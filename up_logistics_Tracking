USE [HNT_TRZ]
GO
/****** Object:  StoredProcedure [dbo].[up_logistics_Tracking]    Script Date: 17/07/2025 12:05:17 p. m. ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[up_logistics_Tracking]
	@TipoConsulta		INT
	,@Opc				INT = NULL
	,@ID				INT = NULL
	,@IdTracking		INT = NULL OUTPUT
	,@TipoTracking		INT = NULL
    ,@Pedimento			nvarchar(50) = NULL
	,@CartaPorte		nvarchar(50) = NULL
	,@AlmacenOrigen		nvarchar(50) = NULL
	,@AlmacenDestino	nvarchar(50) = NULL
	,@IdUsuario			int = NULL
	,@FechaArribo		date = NULL 
	,@CodPuntoLlegada	nvarchar(50) = NULL
	,@PuntoLlegada		nvarchar(500) = NULL
	,@Check				bit = NULL
	,@Factura			nvarchar(50) = NULL
	,@Contenedor		nvarchar(50) = null
	,@Tipo				varchar(50) = NULL
	,@Nombre			varchar(100) = NULL
	,@Extension			varchar(50) = NULL
	,@Archivo			varbinary(MAX) = NULL		
	,@RutaOrigen		varchar(max) = NULL
	,@Usuario			int = NULL
	,@FechaInicio		date = NULL
	,@FechaFin			date = NULL
	,@FolioSEA			VARCHAR(100) = NULL
	,@DocEntry			int = NULL
	,@DocNum			int = NULL
	,@TasaIGI			DECIMAL(18,4) = NULL
	,@iEM				int = NULL
	,@LineNum			int = NULL
	,@ItemCode			nvarchar(50) = NULL
	,@Cantidad			int = NULL	
	,@TipoAlm			int = NULL
	,@Tarima			int = NULL
	,@NoPedimento		NVARCHAR(50) =  NULL
	,@EstatusDoc		nvarchar(50) = NULL
	,@NoTraspaso		int = NULL
	,@NoPE				int = NULL
	,@TipoPE			NVARCHAR(50) = NULL
	,@Observaciones		varchar(MAX) = NULL
	,@Concepto			varchar(MAX) = NULL
	,@Monto				numeric(18,4) = NULL
	,@Moneda			varchar(5) = NULL
	,@nID				int = NULL
	,@NomGrid			varchar(500) = NULL
	,@FolioHistory		INT = NULL OUTPUT
	,@NombreUsuario		VARCHAR(500) = NULL
	,@nIdFiltro			VARCHAR(MAX) = NULL
	,@TipoDescarga		INT = NULL
	, @MontoProyectado	DECIMAL(18,2) = NULL
	, @CardCode			NVARCHAR(15) = NULL
	, @Comentarios      VARCHAR(MAX) = NULL
	, @IdConcepto       NVARCHAR(10) = NULL
	, @ConceptoDesc		NVARCHAR(250) = NULL
	, @Agrupacion		NVARCHAR (10) = NULL
	, @nIdArchivo		INT = NULL
	, @IdTrackingPR		INT = NULL
	, @UpdateorDelete	BIT = NULL
	, @Importe			nvarchar(50) = NULL
	--, @nIdFiltro		VARCHAR(MAX) = NULL
	--, @TipoDescarga		INT = NULL
	, @VariacionProyectado	DECIMAL(18,2) = NULL

	, @SocioDeNegocios	varchar(250) = null
	, @Importe2			decimal(18,2) = null
	, @Aduana			varchar(100) = null --dc
	, @FechaEmision		date = NULL -- dc
	, @Empresa			varchar(15) = NULL
	, @RangoFechas		INT = 0
	, @FechaDesde		varchar(15) = NULL
	, @FechaHasta		varchar(15) = NULL

	--Variables para los XML
	, @CFDI_Version                VARCHAR(150) = NULL
	, @CFDI_Folio                  VARCHAR(150) = NULL
	, @CFDI_Fecha                  DATETIME = NULL
	, @CFDI_FormaPago              VARCHAR(5) = NULL
	, @CFDI_Subtotal               DECIMAL(18,4) = NULL
	, @CFDI_Total                  DECIMAL(18,4) = NULL
	, @CFDI_TipoDeComprobante       VARCHAR(150) = NULL
	, @CFDI_MetodoPago             VARCHAR(10) = NULL
	, @CFDI_RFC_Emisor             VARCHAR(150) = NULL
	, @CFDI_Nombre_Emisor          VARCHAR(500) = NULL
	, @CFDI_RegimenFiscal_Emisor   VARCHAR(150) = NULL
	, @CFDI_RFC_Receptor             VARCHAR(150) = NULL
	, @CFDI_Nombre_Receptor        VARCHAR(500) = NULL
	, @CFDI_RegimenFiscalReceptor_Receptor VARCHAR(150) = NULL
	, @CFDI_UsoCFDI_Receptor       VARCHAR(150) = NULL
	, @CFDI_UUID                   VARCHAR(150) = NULL
	, @CFDI_RetenidoISR            DECIMAL(18,4) = NULL
	, @CFDI_RetenidoIVA            DECIMAL(18,4) = NULL
	, @CFDI_IVA16                  DECIMAL(18,4) = NULL
	, @CFDI_IVA08                  DECIMAL(18,4) = NULL
	, @CFDI_IEPS                   DECIMAL(18,4) = NULL
	, @CFDI_ISH                    DECIMAL(18,4) = NULL
	, @CFDI_Claves                 VARCHAR(150) = NULL
	, @CFDI_Conceptos              VARCHAR(MAX) = NULL
	, @CFDI_SubtotalExcento        DECIMAL(18,4) = NULL
	, @CFDI_SubtotalAgravado       DECIMAL(18,4) = NULL
	, @CFDI_ValidaImporte          VARCHAR(150) = NULL
	, @CFDI_EstadoSAT              VARCHAR(150) = NULL

	--Variables Reglas - Proyección
	, @Modalidad VARCHAR(50) = NULL	
	, @AgenteAduanal VARCHAR(50) = NULL
	, @Forwarder VARCHAR(50) = NULL
	, @PesoContenedor INT = NULL
	, @Contenedores VARCHAR(50) = NULL
	, @Destino VARCHAR(50) = NULL
	, @NumContenedor VARCHAR(200) = NULL
	, @EditCalculoTarifas INT = NULL
	, @StatusProyeccion INT = NULL

	, @SN VARCHAR(100) = NULL
	, @TarifaRegla DECIMAL(18,4) = NULL
	, @StatusRegla INT = 1
	, @TipoAccion VARCHAR(50) = NULL
	, @PesoRegla VARCHAR(50) = NULL
	, @ContenedoresRegla VARCHAR(50) = NULL
	, @IdRegla INT = NULL
	, @NombreTarifa VARCHAR(MAX) = NULL

	--Variables Tarifas Maritimas

	-- Campos principales
    , @POD NVARCHAR(10) = NULL
	, @POL NVARCHAR(10) = NULL	
	, @FECHA_INICIO_VALIDITY DATETIME = NULL
	, @FECHA_FIN_VALIDITY DATETIME = NULL
	, @LAST_UPDATE DATETIME = NULL
    
    -- Tarifas de navieras
    , @COSCO DECIMAL(18,2) = NULL
	, @MAERSK DECIMAL(18,2) = NULL
	, @MSC DECIMAL(18,2) = NULL
	, @COSCO_SPOT DECIMAL(18,2) = NULL
	, @CMA DECIMAL(18,2) = NULL
	, @OOCL DECIMAL(18,2) = NULL
    
    -- Información adicional
    , @TIPO_CONTENEDOR NVARCHAR(20) = NULL	
	, @ACTIVO BIT = 1
    
    -- Campos de auditoría
    , @CREATED_BY NVARCHAR(50) = NULL
    , @UPDATED_BY NVARCHAR(50) = NULL
    
    -- Metadata del upload
    , @UPLOAD_BATCH_ID NVARCHAR(50) = NULL
    , @UPLOAD_FILENAME NVARCHAR(255) = NULL
    , @UPLOAD_DATE DATETIME = NULL    
	, @FECHA_CONSULTA DATETIME = NULL

	, @AccionTarifa			nvarchar(50) = NULL
	, @IdTarifa INT = NULL

	, @AccionCatalogo NVARCHAR(20) = NULL
	, @Codigo NVARCHAR(10) = NULL
	, @Descripcion NVARCHAR(100) = NULL

AS
BEGIN

	DECLARE @ConcepFilt VARCHAR(MAX) = '';--dc	
	DECLARE @Filtro VARCHAR(MAX) = '';--dc	
	DECLARE @Qry varchar(max) = '';
	DECLARE @TablaArchivos varchar(max) = '';
	DECLARE @tableHTML NVARCHAR(MAX) = ''
	DECLARE @_Rol INT = -1, @_Almacen varchar(50) = ''
	DECLARE @CorreoPrincipal varchar(max)
	DECLARE @CorreosCopia varchar(max)
	DECLARE @CorreoAlmacen varchar(max) = ''
	DECLARE @CorreosCopiaNoInstitucionales VARCHAR(MAX)
	DECLARE @AlmacenTrackingLlega varchar(10)
	DECLARE @Error VARCHAR(500) = NULL;

	


	SELECT TOP 1 @_Rol = Rol, @_Almacen = Almacen FROM HNT.Usuarios WHERE UserID = @Usuario

	SELECT @Usuario = UserID, @_Rol = Rol, @_Almacen = Almacen FROM hnt.Usuarios where NombreUsuario = @NombreUsuario

	IF @TipoConsulta = 1
	BEGIN
		IF NOT EXISTS(SELECT * FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking)
		BEGIN
			--INSERT INTO logistics.Tracking_Encabezado(nTipoTracking, sPedimento, sCartaPorte, dFechaArribo, sCodAlmacenDestino, nIdUsuarioCreo, dFechaCreacion, bActivo, sEstatusDoc, sAduana, sFechaEmision)
			--								  VALUES (@TipoTracking, @Pedimento, @CartaPorte, @FechaArribo, @AlmacenDestino, @Usuario, GETDATE(), 1, @EstatusDoc, @Aduana, @FechaEmision)
			
			INSERT INTO logistics.Tracking_Encabezado 
				(
					nTipoTracking, sPedimento, 
					sCartaPorte, dFechaArribo, sCodAlmacenDestino, nIdUsuarioCreo, dFechaCreacion, 
					bActivo, sEstatusDoc, sAduana, sFechaEmision, sModalidad, sAgenteAduanal, sForwarder)--sModalidad, sAgenteAduanal, sForwardR BRAYAN
			VALUES 
				(
					@TipoTracking, @Pedimento, 
					@CartaPorte, @FechaArribo, @AlmacenDestino, @Usuario, GETDATE(), 
					1, @EstatusDoc,@Aduana,	@FechaEmision,@Modalidad,@AgenteAduanal,@Forwarder
				);

			SET @IdTracking = @@IDENTITY	
			
			INSERT INTO logistics.Tracking_EstatusDoc(nIdTracking,nIdUltUsuarioAct,dFechaEstatusDoc,sEstatusDoc)
									           VALUES(@IdTracking,@IdUsuario,GETDATE(),@EstatusDoc)
						    
		END
		ELSE
		BEGIN
			DECLARE @_EstDoc varchar(50) = ISNULL((SELECT TOP 1 ISNULL(sEstatusDoc,'') FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking),'')
			IF ISNULL(@_EstDoc,'') <> ISNULL(@EstatusDoc,'')
			BEGIN
				INSERT INTO logistics.Tracking_EstatusDoc(nIdTracking,nIdUltUsuarioAct,dFechaEstatusDoc,sEstatusDoc)
									           VALUES(@IdTracking,@Usuario,GETDATE(),@EstatusDoc)
			END

			UPDATE logistics.Tracking_Encabezado
			SET 
			   nTipoTracking = @TipoTracking
			   ,sPedimento = @Pedimento
			   ,sCartaPorte = @CartaPorte
			   ,dFechaArribo = @FechaArribo
			   ,sCodAlmacenDestino = @AlmacenDestino
			   ,nIdUltUsuarioAct = @Usuario
			   ,dFechaActualizacion = GETDATE()
			   ,sEstatusDoc = @EstatusDoc
			   ,sAduana = @Aduana
			   ,sFechaEmision = @FechaEmision
			WHERE nIdTracking = @IdTracking
		END
	END
	
	IF @TipoConsulta = 2
	BEGIN
		IF ISNULL(@Opc,1) = 1
		BEGIN 

		IF NOT EXISTS (SELECT nIdTracking FROM logistics.Tracking_PuntosLlegada WHERE nIdTracking = @IdTracking AND sCodPuntoLlegada = @CodPuntoLlegada AND sPuntoLlegada = @PuntoLlegada AND bActivo = 1 )
		BEGIN 
				INSERT INTO logistics.Tracking_PuntosLlegada (nIdTracking, sCodPuntoLlegada, sPuntoLlegada, bActivo, dFechaCreacion)
										          VALUES (@IdTracking, @CodPuntoLlegada, @PuntoLlegada, 1, GETDATE())			
		END

			
		END
		ELSE IF @Opc = 2
		BEGIN
			SELECT nID, nIdTracking, sCodPuntoLlegada, sPuntoLlegada, bCheck FROM logistics.Tracking_PuntosLlegada WHERE nIdTracking = @IdTracking AND bActivo = 1
		END
		ELSE
		BEGIN
			UPDATE logistics.Tracking_PuntosLlegada
			SET bActivo = 0
			WHERE nID = @ID
		END

	END

	IF @TipoConsulta = 3
	BEGIN
		IF ISNULL(@Opc,1) = 1
		BEGIN 
			INSERT INTO logistics.Tracking_Facturas (nIdTracking, sFactura, bActivo, dFechaCreacion, DocEntrySAP)
											VALUES (@IdTracking, @Factura, 1, GETDATE(), @DocEntry)
		END
		ELSE IF @Opc = 2
		BEGIN
			SELECT nID, nIdTracking, sFactura, DocEntrySAP  FROM logistics.Tracking_Facturas WHERE nIdTracking = @IdTracking AND bActivo = 1
		END
		ELSE
		BEGIN
			UPDATE logistics.Tracking_Facturas
			SET bActivo = 0
			WHERE nID = @ID
		END
	END

	IF @TipoConsulta = 4
	BEGIN
		IF ISNULL(@Opc,1) = 1
		BEGIN
			--INSERT INTO logistics.Tracking_Contenedores (nIdTracking, sContenedor, bActivo, dFechaCreacion) VALUES (@IdTracking, @Contenedor, 1, GETDATE())
			INSERT INTO logistics.Tracking_Contenedores (nIdTracking, sContenedor, sPeso, bActivo, dFechaCreacion) VALUES (@IdTracking, @Contenedor, @PesoContenedor, 1, GETDATE())
		END
		ELSE IF @Opc = 2
		BEGIN
			SELECT nID, nIdTracking, sContenedor FROM logistics.Tracking_Contenedores WHERE nIdTracking = @IdTracking AND bActivo = 1
		END
		ELSE
		BEGIN
			UPDATE logistics.Tracking_Contenedores
			SET bActivo = 0
			WHERE nID = @ID
		END
	END

	IF @TipoConsulta = 5
	BEGIN
		IF ISNULL(@Opc,1) = 1
		BEGIN

			IF NOT EXISTS (SELECT sNombre FROM  [HNT-Files].dbo.Files_Tracking_HNT_TRZ WHERE nIdTracking = @IdTracking AND sTipo = @Tipo AND sNombre = @Nombre AND sExtension = @Extension AND sObservaciones = @Observaciones )
			BEGIN
			
				--INSERT INTO [HNT-Files].dbo.Files_Tracking_HNT_TRZ(nIdTracking, sTipo, sNombre, sExtension, fArchivo, sRutaOrigen, dFechaAlta, nIdUsuario, sObservaciones)
				--							   VALUES (@IdTracking, @Tipo, @Nombre, @Extension, @Archivo, @RutaOrigen, GETDATE(), @Usuario, @Observaciones)

				INSERT INTO [HNT-Files].dbo.Files_Tracking_HNT_TRZ(nIdTracking,
				sTipo,
				sNombre,
				sExtension,
				fArchivo,
				sRutaOrigen,
				dFechaAlta,
				nIdUsuario,
				sObservaciones,
				CFDI_Version,
				CFDI_Folio,
				CFDI_Fecha,
				CFDI_FormaPago,
				CFDI_Subtotal,
				CFDI_Total,
				CFDI_TipoDeComprobante,
				CFDI_MetodoPago,
				CFDI_RFC_Emisor,
				CFDI_Nombre_Emisor,
				CFDI_RegimenFiscal_Emisor,
				CFDI_RFC_Receptor,
				CFDI_Nombre_Receptor,
				CFDI_RegimenFiscalReceptor_Receptor,
				CFDI_UsoCFDI_Receptor,
				CFDI_UUID,
				CFDI_RetenidoISR,
				CFDI_RetenidoIVA,
				CFDI_IVA16,
				CFDI_IVA08,
				CFDI_IEPS,
				CFDI_ISH,
				CFDI_Claves,
				CFDI_Conceptos,
				CFDI_SubtotalExcento,
				CFDI_SubtotalAgravado,
				CFDI_ValidaImporte,
				CFDI_EstadoSAT) VALUES (
				@IdTracking, 
				@Tipo, 
				@Nombre, 
				@Extension, 
				CONVERT(varbinary(max), @Archivo), 
				@RutaOrigen, 
				GETDATE(), 
				@Usuario, 
				@Observaciones,
				@CFDI_Version,
				@CFDI_Folio,
				@CFDI_Fecha,
				@CFDI_FormaPago,
				@CFDI_Subtotal,
				@CFDI_Total,
				@CFDI_TipoDeComprobante,
				@CFDI_MetodoPago,
				@CFDI_RFC_Emisor,
				@CFDI_Nombre_Emisor,
				@CFDI_RegimenFiscal_Emisor,
				@CFDI_RFC_Receptor,
				@CFDI_Nombre_Receptor,
				@CFDI_RegimenFiscalReceptor_Receptor,
				@CFDI_UsoCFDI_Receptor,
				@CFDI_UUID,
				@CFDI_RetenidoISR,
				@CFDI_RetenidoIVA,
				@CFDI_IVA16,
				@CFDI_IVA08,
				@CFDI_IEPS,
				@CFDI_ISH,
				@CFDI_Claves,
				@CFDI_Conceptos,
				@CFDI_SubtotalExcento,
				@CFDI_SubtotalAgravado,
				@CFDI_ValidaImporte,
				@CFDI_EstadoSAT
				)
			END
			
		END
		ELSE IF @Opc = 2
		BEGIN
			SELECT nID, nIdTracking, sTipo, sNombre, sExtension, sRutaOrigen, /*fArchivo*/ '' fArchivo, sObservaciones
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ
			WHERE nIdTracking = @IdTracking AND sTipo IN('FAC', 'PED')
		END
		ELSE IF @Opc = 3
		BEGIN
			SELECT nID, nIdTracking
			, CASE WHEN sTipo = 'FAC' THEN 'Facturas' WHEN sTipo = 'PED' THEN 'Pedido' WHEN sTipo = 'GAD' THEN 'Gastos Adicionales' WHEN sTipo = 'OTR' THEN 'Otros' WHEN sTipo = 'REP' THEN 'Reparticion' END[sTipo]
			, sNombre, sExtension, sRutaOrigen, fArchivo, sObservaciones, 'Tracking' [Tipo] 
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ  
			WHERE nIdTracking = @IdTracking AND sTipo = @Tipo
		END
		ELSE IF @Opc = 4
		BEGIN
			SELECT nID, nIdTracking
			, CASE WHEN sTipo = 'FAC' THEN 'Facturas' WHEN sTipo = 'PED' THEN 'Pedido' WHEN sTipo = 'GAD' THEN 'Gastos Adicionales' WHEN sTipo = 'OTR' THEN 'Otros' WHEN sTipo = 'REP' THEN 'Reparticion' END[sTipo]
			, sNombre, sExtension, sRutaOrigen, fArchivo, sObservaciones 
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ
			WHERE nIdTracking = @IdTracking 
			ORDER BY sTipo, sExtension, sNombre
		END
		ELSE IF @Opc = 5
		BEGIN
			IF @ID IS NULL
			BEGIN
			UPDATE [HNT-Files].dbo.Files_Tracking_HNT_TRZ SET sObservaciones = @Observaciones WHERE nID = @nID
			END
			ELSE
			BEGIN
			UPDATE [HNT-Files].dbo.Files_Tracking_HNT_TRZ SET sObservaciones = @Observaciones WHERE nID = @ID
			END
		END	
		ELSE IF @Opc = 6
		BEGIN
			WITH UnionResult AS (
				SELECT
					A.nID,
					'DPJ' AS EMPRESA,
					A.nIdTracking AS Tracking,
					'N/A' COLLATE SQL_Latin1_General_CP1_CI_AS AS Contenedor,
					'N/A' COLLATE SQL_Latin1_General_CP1_CI_AS AS CONCEPTO,
					FORMAT(B.dFechaCreacion, 'yyyy-MM-dd hh:mm:ss') AS FECHA_CREACION_TRACKING,
					A.sTipo COLLATE SQL_Latin1_General_CP1_CI_AS AS Tipo,		
					'Gasto Comprobado' AS TIPO_DOCUMENTO,
					A.sNombre COLLATE SQL_Latin1_General_CP1_CI_AS AS sNombre,
					A.sExtension COLLATE SQL_Latin1_General_CP1_CI_AS AS sExtension,					
					A.CFDI_RFC_Emisor COLLATE SQL_Latin1_General_CP1_CI_AS AS EMISOR_RFC,
					A.CFDI_Nombre_Emisor COLLATE SQL_Latin1_General_CP1_CI_AS AS NOMBRE_EMISOR,
					FORMAT(A.CFDI_Fecha, 'yyyy-MM-dd hh:mm:ss') AS FECHA_CFDI,
					A.CFDI_RFC_Receptor COLLATE SQL_Latin1_General_CP1_CI_AS AS RECEPTOR_RFC,
					A.CFDI_Nombre_Receptor COLLATE SQL_Latin1_General_CP1_CI_AS AS NOMBRE_RECEPTOR,
					A.CFDI_Conceptos COLLATE SQL_Latin1_General_CP1_CI_AS AS DESCRIPCIÓN,
					A.CFDI_UUID COLLATE SQL_Latin1_General_CP1_CI_AS AS UUID,
					A.CFDI_Folio COLLATE SQL_Latin1_General_CP1_CI_AS AS FOLIO,
					A.CFDI_SUBTOTAL AS SUBTOTAL,
					A.CFDI_IVA16 AS IVA,
					A.CFDI_TOTAL AS TOTAL					
				FROM [HNT-Files].dbo.Files_Tracking A
				LEFT JOIN [Halconet].logistics.Tracking_Encabezado B ON A.nIdTracking = B.nIdTracking
				WHERE A.sTipo = 'GCM'
					AND A.sExtension = '.xml'
					AND (@RangoFechas = 0 OR (B.dFechaCreacion >= @FechaDesde AND B.dFechaCreacion < DATEADD(DAY, 1, @FechaHasta)))

				UNION ALL

				SELECT
					A.nID,
					'CTRZ' AS EMPRESA,
					A.nIdTracking AS Tracking,
					'N/A' COLLATE SQL_Latin1_General_CP1_CI_AS AS Contenedor,
					'N/A' COLLATE SQL_Latin1_General_CP1_CI_AS AS CONCEPTO,
					FORMAT(B.dFechaCreacion, 'yyyy-MM-dd hh:mm:ss') AS FECHA_CREACION_TRACKING,
					A.sTipo COLLATE SQL_Latin1_General_CP1_CI_AS AS Tipo,
					'Gasto Comprobado' AS TIPO_DOCUMENTO,
					A.sNombre COLLATE SQL_Latin1_General_CP1_CI_AS AS sNombre,
					A.sExtension COLLATE SQL_Latin1_General_CP1_CI_AS AS sExtension,					
					A.CFDI_RFC_Emisor COLLATE SQL_Latin1_General_CP1_CI_AS AS EMISOR_RFC,
					A.CFDI_Nombre_Emisor COLLATE SQL_Latin1_General_CP1_CI_AS AS NOMBRE_EMISOR,
					FORMAT(A.CFDI_Fecha, 'yyyy-MM-dd hh:mm:ss') AS FECHA_CFDI,
					A.CFDI_RFC_Receptor COLLATE SQL_Latin1_General_CP1_CI_AS AS RECEPTOR_RFC,
					A.CFDI_Nombre_Receptor COLLATE SQL_Latin1_General_CP1_CI_AS AS NOMBRE_RECEPTOR,
					A.CFDI_Conceptos COLLATE SQL_Latin1_General_CP1_CI_AS AS DESCRIPCIÓN,
					A.CFDI_UUID COLLATE SQL_Latin1_General_CP1_CI_AS AS UUID,
					A.CFDI_Folio COLLATE SQL_Latin1_General_CP1_CI_AS AS FOLIO,
					A.CFDI_SUBTOTAL AS SUBTOTAL,
					A.CFDI_IVA16 AS IVA,
					A.CFDI_TOTAL AS TOTAL					
				FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ A
				LEFT JOIN [HNT_TRZ].logistics.Tracking_Encabezado B ON A.nIdTracking = B.nIdTracking
				WHERE A.sTipo = 'GCM'
					AND A.sExtension = '.xml'
					AND (@RangoFechas = 0 OR (B.dFechaCreacion >= @FechaDesde AND B.dFechaCreacion < DATEADD(DAY, 1, @FechaHasta)))

				UNION ALL

				SELECT
					A.nId AS nID,
					'DPJ' AS EMPRESA,
					A.nIdTracking AS Tracking,
					A.sContenedor COLLATE SQL_Latin1_General_CP1_CI_AS AS Contenedor,
					A.TipoConcepto COLLATE SQL_Latin1_General_CP1_CI_AS AS CONCEPTO,
					FORMAT(A.CreateDate, 'yyyy-MM-dd hh:mm:ss') AS FECHA_CREACION_TRACKING,
					A.TipoConcepto COLLATE SQL_Latin1_General_CP1_CI_AS AS Tipo,
					'Logistica' AS TIPO_DOCUMENTO,
					B.Nombre COLLATE SQL_Latin1_General_CP1_CI_AS AS sNombre,
					B.Extension COLLATE SQL_Latin1_General_CP1_CI_AS AS sExtension,	
					B.Emisor COLLATE SQL_Latin1_General_CP1_CI_AS AS EMISOR_RFC,
					B.NombreEmisor COLLATE SQL_Latin1_General_CP1_CI_AS AS NOMBRE_EMISOR,
					FORMAT(B.dFechaPago, 'yyyy-MM-dd hh:mm:ss') AS FECHA_CFDI,
					B.Receptor COLLATE SQL_Latin1_General_CP1_CI_AS AS RECEPTOR_RFC,
					B.NombreReceptor COLLATE SQL_Latin1_General_CP1_CI_AS AS NOMBRE_RECEPTOR,
					B.Conceptos COLLATE SQL_Latin1_General_CP1_CI_AS AS DESCRIPCIÓN,
					B.UUID COLLATE SQL_Latin1_General_CP1_CI_AS AS UUID,
					B.sFolio COLLATE SQL_Latin1_General_CP1_CI_AS AS FOLIO,
					0 AS SUBTOTAL,
					0 AS IVA,		
					A.MontoFactura AS TOTAL
				FROM [Halconet].logistics.Tracking_FacturasLogistica A
				INNER JOIN [HNT-Files].dbo.File_CFDI B ON A.nIdArchivo = B.nIdArchivo
				WHERE 
					A.nIdTracking > 0

				UNION ALL

				SELECT
					A.nId AS nID,
					'SERVIMPO' AS EMPRESA,
					A.nIdTracking AS Tracking,
					A.sContenedor COLLATE SQL_Latin1_General_CP1_CI_AS AS Contenedor,
					A.TipoConcepto COLLATE SQL_Latin1_General_CP1_CI_AS AS CONCEPTO,
					FORMAT(A.CreateDate, 'yyyy-MM-dd hh:mm:ss') AS FECHA_CREACION_TRACKING,
					A.TipoConcepto COLLATE SQL_Latin1_General_CP1_CI_AS AS Tipo,
					'Logistica' AS TIPO_DOCUMENTO,
					B.Nombre COLLATE SQL_Latin1_General_CP1_CI_AS AS sNombre,
					B.Extension COLLATE SQL_Latin1_General_CP1_CI_AS AS sExtension,	
					B.Emisor COLLATE SQL_Latin1_General_CP1_CI_AS AS EMISOR_RFC,
					B.NombreEmisor COLLATE SQL_Latin1_General_CP1_CI_AS AS NOMBRE_EMISOR,
					FORMAT(B.dFechaPago, 'yyyy-MM-dd hh:mm:ss') AS FECHA_CFDI,
					B.Receptor COLLATE SQL_Latin1_General_CP1_CI_AS AS RECEPTOR_RFC,
					B.NombreReceptor COLLATE SQL_Latin1_General_CP1_CI_AS AS NOMBRE_RECEPTOR,
					B.Conceptos COLLATE SQL_Latin1_General_CP1_CI_AS AS DESCRIPCIÓN,
					B.UUID COLLATE SQL_Latin1_General_CP1_CI_AS AS UUID,
					B.sFolio COLLATE SQL_Latin1_General_CP1_CI_AS AS FOLIO,
					0 AS SUBTOTAL,
					0 AS IVA,		
					A.MontoFactura AS TOTAL
				FROM [HNT_SERVIMPO].logistics.Tracking_FacturasLogistica A
				INNER JOIN [HNT-Files].dbo.File_CFDI_SERVIMPO B ON A.nIdArchivo = B.nIdArchivo
				WHERE 
					A.nIdTracking > 0

				UNION ALL

				SELECT
					A.nID,
					'SERVIMPO' AS EMPRESA,
					A.nIdTracking AS Tracking,
					'N/A' COLLATE SQL_Latin1_General_CP1_CI_AS AS Contenedor,
					'N/A' COLLATE SQL_Latin1_General_CP1_CI_AS AS CONCEPTO,
					FORMAT(B.dFechaCreacion, 'yyyy-MM-dd hh:mm:ss') AS FECHA_CREACION_TRACKING,
					A.sTipo COLLATE SQL_Latin1_General_CP1_CI_AS AS Tipo,		
					'Gasto Comprobado' AS TIPO_DOCUMENTO,
					A.sNombre COLLATE SQL_Latin1_General_CP1_CI_AS AS sNombre,
					A.sExtension COLLATE SQL_Latin1_General_CP1_CI_AS AS sExtension,					
					A.CFDI_RFC_Emisor COLLATE SQL_Latin1_General_CP1_CI_AS AS EMISOR_RFC,
					A.CFDI_Nombre_Emisor COLLATE SQL_Latin1_General_CP1_CI_AS AS NOMBRE_EMISOR,
					FORMAT(A.CFDI_Fecha, 'yyyy-MM-dd hh:mm:ss') AS FECHA_CFDI,
					A.CFDI_RFC_Receptor COLLATE SQL_Latin1_General_CP1_CI_AS AS RECEPTOR_RFC,
					A.CFDI_Nombre_Receptor COLLATE SQL_Latin1_General_CP1_CI_AS AS NOMBRE_RECEPTOR,
					A.CFDI_Conceptos COLLATE SQL_Latin1_General_CP1_CI_AS AS DESCRIPCIÓN,
					A.CFDI_UUID COLLATE SQL_Latin1_General_CP1_CI_AS AS UUID,
					A.CFDI_Folio COLLATE SQL_Latin1_General_CP1_CI_AS AS FOLIO,
					A.CFDI_SUBTOTAL AS SUBTOTAL,
					A.CFDI_IVA16 AS IVA,
					A.CFDI_TOTAL AS TOTAL					
				FROM [HNT-Files].dbo.Files_Tracking_SERVIMPO A
				LEFT JOIN [HNT_SERVIMPO].logistics.Tracking_Encabezado B ON A.nIdTracking = B.nIdTracking
				WHERE A.sTipo = 'GCM'
					AND A.sExtension = '.xml'
					AND (@RangoFechas = 0 OR (B.dFechaCreacion >= @FechaDesde AND B.dFechaCreacion < DATEADD(DAY, 1, @FechaHasta)))
			)

			SELECT *
			FROM UnionResult
			WHERE (@Empresa IS NULL OR Empresa = @Empresa);
		END	
		ELSE IF @Opc = 7
		BEGIN		
			DECLARE @tbl_Empresas TABLE (
				IdEmpresa varchar(10),
				NombreEmpresa varchar(300)
			);

			INSERT INTO @tbl_Empresas (IdEmpresa, NombreEmpresa)
			SELECT 'DPJ', 'Distribuidora PJ'
			UNION ALL
			SELECT 'CTRZ', 'Comercializadora TR Zone'			
			UNION ALL
			SELECT 'SERVIMPO', 'Servicios de Importación PJ'			

			-- Para consultar los datos de la tabla de variables
			SELECT * FROM @tbl_Empresas;

		END
		ELSE
		BEGIN
			DELETE [HNT-Files].dbo.Files_Tracking_HNT_TRZ WHERE nID = @ID
		END

	END

	IF @TipoConsulta = 6
	BEGIN
		--SELECT nIdTracking, nTipoTracking, sPedimento, sCartaPorte, dFechaArribo, sCodAlmacenDestino, sEstatusDoc, sAduana, sFechaEmision FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking AND bActivo = 1
		SELECT 
			nIdTracking, nTipoTracking, 
			sPedimento, sCartaPorte, 
			dFechaArribo, sCodAlmacenDestino, 
			sEstatusDoc , sAduana, sFechaEmision, 
			sModalidad, sAgenteAduanal, sForwarder, EditProyeccion
		FROM logistics.Tracking_Encabezado 
		WHERE nIdTracking = @IdTracking AND bActivo = 1
		SELECT nID, nIdTracking, sCodPuntoLlegada, sPuntoLlegada, bCheck FROM logistics.Tracking_PuntosLlegada WHERE nIdTracking = @IdTracking AND bActivo = 1
		SELECT nID, nIdTracking, sFactura, DocEntrySAP FROM logistics.Tracking_Facturas WHERE nIdTracking = @IdTracking AND bActivo = 1
		--SELECT nID, nIdTracking, sContenedor FROM logistics.Tracking_Contenedores WHERE nIdTracking = @IdTracking AND bActivo = 1
		SELECT nID, nIdTracking, sContenedor, sPeso FROM logistics.Tracking_Contenedores WHERE nIdTracking = @IdTracking AND bActivo = 1
	END

	IF @TipoConsulta = 7
	BEGIN
		 SELECT WhsCode[Codigo], WhsName[Nombre] 
		 FROM SBOCTRZ.DBO.OWHS where U_Vlgx_lvl = 'C' and WhsCode NOT IN('E1')
	END

	IF @TipoConsulta = 8
	BEGIN
	
		IF @IdTracking > 0
		BEGIN
			SET @Filtro = ' AND A.nIdTracking =' + CAST(@IdTracking AS VARCHAR)  
		END
		ELSE 
		BEGIN
				SET @Filtro = 'AND CAST(A.dFechaCreacion AS DATE) BETWEEN '''+CAST(@FechaInicio AS VARCHAR)  +''' AND '''+CAST(@Fechafin AS VARCHAR)+'''' + ' AND CAST(A.dFechaCreacion AS DATE) >''2023-01-01'' ' 
		END

		SET @Qry = '


		IF '+CAST(@_Rol AS VARCHAR)+' NOT IN(16,59)
		BEGIN
			SELECT 
			DISTINCT
			A.nIdTracking 
			, A.nTipoTracking
			,C.DocNum[Factura Reserva] 
			, CASE WHEN A.nTipoTracking = 1 THEN ''Importación'' WHEN A.nTipoTracking = 2 THEN ''Nacional'' END[Tipo]
			, CASE WHEN A.nTipoTracking = 1 THEN A.sPedimento  WHEN A.nTipoTracking = 2 THEN 
			(SELECT TOP 1 B0.sFactura FROM logistics.Tracking_Encabezado A0
			INNER JOIN logistics.Tracking_Facturas B0 ON B0.nIdTracking = A0.nIdTracking AND B0.bActivo = 1
			WHERE A0.nIdTracking = A.nIdTracking
			)
			END [No Pedimento]
			, A.sCartaPorte[Carta Porte]
			,isnull((select top 1 FEntrega from HNT_TRZ.logistics.Embarques where Factura = 
					(select top 1(select top 1 X.NumAtCard From SBOCTRZ.dbo.OPOR X where X.DocEntry = XXX.BaseEntry)Factura
						From [SBOCTRZ].dbo.OPCH XX
						JOIN [SBOCTRZ].dbo.PCH1 XXX ON XX.DocEntry = XXX.DocEntry
						where XX.docnum = C.DocNum) ),convert(nvarchar,DATEADD(DAY,2,C.DocDate),111))[Fecha Arribo]
			 ,(select top 1 X.DocNum From SBOCTRZ.dbo.OPOR X where X.DocEntry =  (select top 1 Y.BaseEntry from SBOCTRZ.dbo.PCH1 Y WHERE Y.DocEntry = C.DocEntry))[OC]
			 ,(select top 1 X.NumAtCard From SBOCTRZ.dbo.OPOR X where X.DocEntry =  (select top 1 Y.BaseEntry from SBOCTRZ.dbo.PCH1 Y WHERE Y.DocEntry = C.DocEntry))[PO Grupo]
			--, A.dFechaArribo[Fecha Arribo]		
			, A.sCodAlmacenDestino + '' | '' + B.WhsName[Almacen], CAST(A.dFechaCreacion AS DATE)[Fecha Creacion] 
			, A.sEstatusDoc[Estatus Doc]
			, (SELECT MIN(dFechaEstatusDoc) FROM logistics.Tracking_EstatusDoc ED WHERE ED.nIdTracking = A.nIdTracking AND ED.sEstatusDoc = ''Completo'')[F-Doc Completo]
			--, '''' Estatus
			,ISNULL((SELECT 
			CASE
				WHEN MAX(C0.DocNum) IS NOT NULL AND MAX(DD0.DocNum) IS NULL AND MAX(EE0.DocNum) IS NULL THEN ''con FR''
				WHEN MAX(C0.DocNum) IS NOT NULL AND MAX(DD0.DocNum) IS NOT NULL AND MAX(EE0.DocNum) IS NULL THEN ''con EM''
				WHEN MAX(C0.DocNum) IS NOT NULL AND MAX(DD0.DocNum) IS NOT NULL AND MAX(EE0.DocNum) IS NOT NULL THEN ''con PE''
				WHEN MAX(C0.DocNum) IS NULL AND MAX(DD0.DocNum) IS NULL AND MAX(EE0.DocNum) IS NULL THEN ''SIN DOCUMENTOS''
			END
			
			FROM logistics.Tracking_Encabezado A0
			INNER JOIN logistics.Tracking_Facturas B0 ON B0.nIdTracking = A0.nIdTracking AND B0.bActivo = 1
			INNER JOIN SBOCTRZ.dbo.OPCH C0 ON CASE WHEN A0.nTipoTracking = 1 THEN C0.NumAtCard WHEN A0.nTipoTracking = 2 THEN CAST(C0.DocEntry AS VARCHAR(50)) END = CASE WHEN A0.nTipoTracking = 1 THEN B0.sFactura WHEN A0.nTipoTracking = 2 THEN CAST(B0.DocEntrySAP AS VARCHAR(50)) END AND C0.DocType = ''I''					    
			INNER JOIN SBOCTRZ.dbo.PCH1 CC0 ON CC0.DocEntry = C0.DocEntry
			LEFT JOIN SBOCTRZ.dbo.OCRD CL0 ON CL0.CardCode = C0.CardCode
			LEFT JOIN SBOCTRZ.dbo.PDN1 D0 ON D0.BaseEntry = CC0.DocEntry AND D0.BaseLine = CC0.LineNum AND D0.BaseType = 18
			LEFT JOIN SBOCTRZ.dbo.OPDN DD0 ON DD0.DocEntry = D0.DocEntry
			LEFT JOIN SBOCTRZ.dbo.IPF1 E0 ON E0.BaseEntry = D0.DocEntry AND E0.OrigLine = D0.LineNum AND E0.BaseType = 20
			LEFT JOIN SBOCTRZ.dbo.OIPF EE0 ON EE0.DocEntry = E0.DocEntry
			LEFT JOIN logistics.Tracking_EM_IGI IG0 ON IG0.nIdTracking = A0.nIdTracking AND IG0.DocEntry = DD0.DocEntry
			WHERE A0.bActivo = 1 AND B0.bActivo = 1 AND A0.nIdTracking = A.nIdTracking
			),'''')[Estatus Tracking] 

			, ISNULL((SELECT MIN(E0.FechaRecepcion)
				FROM logistics.Tracking_Encabezado A0
							INNER JOIN logistics.Tracking_Facturas B0 ON B0.nIdTracking = A0.nIdTracking
							INNER JOIN SBOCTRZ.dbo.OPCH C0 ON CASE WHEN A0.nTipoTracking = 1 THEN C0.NumAtCard WHEN A0.nTipoTracking = 2 THEN CAST(C0.DocEntry AS VARCHAR(50)) END = CASE WHEN A0.nTipoTracking = 1 THEN B0.sFactura WHEN A0.nTipoTracking = 2 THEN CAST(B0.DocEntrySAP AS VARCHAR(50)) END AND C0.DocType = ''I''					    
							INNER JOIN SBOCTRZ.dbo.PCH1 CC0 ON CC0.DocEntry = C0.DocEntry

							 
							 LEFT JOIN SBOCTRZ.dbo.POR1 FF0 ON FF0.DocEntry = CC0.BaseEntry AND FF0.LineNum = CC0.BaseLine
							 LEFT JOIN SBOCTRZ.dbo.OPOR F0 ON F0.DocEntry = FF0.DocEntry

							LEFT JOIN SBOCTRZ.dbo.OCRD CL0 ON CL0.CardCode = C0.CardCode
							LEFT JOIN SBOCTRZ.dbo.PDN1 D0 ON D0.BaseEntry = CC0.DocEntry AND D0.BaseLine = CC0.LineNum AND D0.BaseType = 18
							LEFT JOIN SBOCTRZ.dbo.OPDN DD0 ON DD0.DocEntry = D0.DocEntry
							Left Join [HNT_TRZ].[logistics].[RecepcionDocumentos] E0 on 
																						E0.DocEntry = 
																						 CASE 
																							WHEN A0.nTipoTracking = 1 THEN DD0.DocEntry 
																							WHEN A0.nTipoTracking = 2 THEN C0.DocEntry 
																						 END 
																						 AND E0.ObjType = 
																						 CASE
																							WHEN A0.nTipoTracking = 1 THEN DD0.ObjType 
																							WHEN A0.nTipoTracking = 2 THEN C0.ObjType 
																						 END
																						 AND E0.Conteo IS NULL
				WHERE A0.bActivo = 1 AND B0.bActivo = 1 AND A0.nIdTracking = A.nIdTracking
				),
				(SELECT MIN(E0.FechaRecepcion)
				FROM logistics.Tracking_Encabezado A0
							INNER JOIN logistics.Tracking_Facturas B0 ON B0.nIdTracking = A0.nIdTracking
							INNER JOIN SBOCTRZ.dbo.OPCH C0 ON CASE WHEN A0.nTipoTracking = 1 THEN C0.NumAtCard WHEN A0.nTipoTracking = 2 THEN CAST(C0.DocEntry AS VARCHAR(50)) END = CASE WHEN A0.nTipoTracking = 1 THEN B0.sFactura WHEN A0.nTipoTracking = 2 THEN CAST(B0.DocEntrySAP AS VARCHAR(50)) END AND C0.DocType = ''I''					    
							INNER JOIN SBOCTRZ.dbo.PCH1 CC0 ON CC0.DocEntry = C0.DocEntry

							 
							 LEFT JOIN SBOCTRZ.dbo.POR1 FF0 ON FF0.DocEntry = CC0.BaseEntry AND FF0.LineNum = CC0.BaseLine
							 LEFT JOIN SBOCTRZ.dbo.OPOR F0 ON F0.DocEntry = FF0.DocEntry

							LEFT JOIN SBOCTRZ.dbo.OCRD CL0 ON CL0.CardCode = C0.CardCode
							LEFT JOIN SBOCTRZ.dbo.PDN1 D0 ON D0.BaseEntry = CC0.DocEntry AND D0.BaseLine = CC0.LineNum AND D0.BaseType = 18
							LEFT JOIN SBOCTRZ.dbo.OPDN DD0 ON DD0.DocEntry = D0.DocEntry
							Left Join [HNT_TRZ].[logistics].[RecepcionDocumentos] E0 on 
																						E0.DocEntry = 
																						 CASE 
																							WHEN A0.nTipoTracking = 1 THEN DD0.DocEntry 
																							WHEN A0.nTipoTracking = 2 THEN F0.DocEntry 
																						 END 
																						 AND E0.ObjType = 
																						 CASE
																							WHEN A0.nTipoTracking = 1 THEN DD0.ObjType 
																							WHEN A0.nTipoTracking = 2 THEN F0.ObjType 
																						 END
																						 AND E0.Conteo IS NULL
				WHERE A0.bActivo = 1 AND B0.bActivo = 1 AND A0.nIdTracking = A.nIdTracking
				))
				---------------------------------------------------
				[Fecha Recepcion] 
				
				
				, 
				CASE
					WHEN ISNULL((SELECT COUNT(nID) FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ T0 WHERE T0.nIdTracking = A.nIdTracking AND sTipo = ''RDC''),0) > 0 THEN ''Cerrado''
					ELSE
					(SELECT CASE
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NOT NULL THEN ''Conteo Finalizado''
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NULL AND ISNULL(MIN(E0.FechaInicioConteo),MIN(G0.FechaInicioConteo)) IS NOT NULL THEN ''Conteo Iniciado''
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NULL AND ISNULL(MIN(E0.FechaInicioConteo),MIN(G0.FechaInicioConteo)) IS NULL AND ISNULL(MIN(E0.FechaFinDescarga),MIN(G0.FechaFinDescarga)) IS NOT NULL THEN ''Descarga Finalizada''
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NULL AND ISNULL(MIN(E0.FechaInicioConteo),MIN(G0.FechaInicioConteo)) IS NULL AND ISNULL(MIN(E0.FechaFinDescarga),MIN(G0.FechaFinDescarga)) IS NULL AND ISNULL(MIN(E0.FechaInicioDescarga),MIN(G0.FechaInicioDescarga)) IS NOT NULL THEN ''Descarga Iniciada''
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NULL AND ISNULL(MIN(E0.FechaInicioConteo),MIN(G0.FechaInicioConteo)) IS NULL AND ISNULL(MIN(E0.FechaFinDescarga),MIN(G0.FechaFinDescarga)) IS NULL AND ISNULL(MIN(E0.FechaInicioDescarga),MIN(G0.FechaInicioDescarga)) IS NULL AND ISNULL(MIN(E0.FechaRecepcion),MIN(G0.FechaRecepcion)) IS NOT NULL THEN ''Recepcionado'' 
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NULL AND ISNULL(MIN(E0.FechaInicioConteo),MIN(G0.FechaInicioConteo)) IS NULL AND ISNULL(MIN(E0.FechaFinDescarga),MIN(G0.FechaFinDescarga)) IS NULL AND ISNULL(MIN(E0.FechaInicioDescarga),MIN(G0.FechaInicioDescarga)) IS NULL AND ISNULL(MIN(E0.FechaRecepcion),MIN(G0.FechaRecepcion)) IS NULL THEN ''No Recepcionado''
								WHEN MIN(DD0.DocNum) IS NULL THEN ''Sin Documento EM''							
							  END
					FROM logistics.Tracking_Encabezado A0
								INNER JOIN logistics.Tracking_Facturas B0 ON B0.nIdTracking = A0.nIdTracking
								INNER JOIN SBOCTRZ.dbo.OPCH C0 ON CASE WHEN A0.nTipoTracking = 1 THEN C0.NumAtCard WHEN A0.nTipoTracking = 2 THEN CAST(C0.DocEntry AS VARCHAR(50)) END = CASE WHEN A0.nTipoTracking = 1 THEN B0.sFactura WHEN A0.nTipoTracking = 2 THEN CAST(B0.DocEntrySAP AS VARCHAR(50)) END AND C0.DocType = ''I''					    
								INNER JOIN SBOCTRZ.dbo.PCH1 CC0 ON CC0.DocEntry = C0.DocEntry

								LEFT JOIN SBOCTRZ.dbo.POR1 FF0 ON FF0.DocEntry = CC0.BaseEntry AND FF0.LineNum = CC0.BaseLine
								 LEFT JOIN SBOCTRZ.dbo.OPOR F0 ON F0.DocEntry = FF0.DocEntry

								LEFT JOIN SBOCTRZ.dbo.OCRD CL0 ON CL0.CardCode = C0.CardCode
								LEFT JOIN SBOCTRZ.dbo.PDN1 D0 ON D0.BaseEntry = CC0.DocEntry AND D0.BaseLine = CC0.LineNum AND D0.BaseType = 18
								LEFT JOIN SBOCTRZ.dbo.OPDN DD0 ON DD0.DocEntry = D0.DocEntry
								Left Join [logistics].[RecepcionDocumentos] E0 on E0.DocEntry = 
																							 CASE 
																								WHEN A0.nTipoTracking = 1 THEN DD0.DocEntry 
																								WHEN A0.nTipoTracking = 2 THEN C0.DocEntry 
																							 END 
																							 AND E0.ObjType = 
																							 CASE
																								WHEN A0.nTipoTracking = 1 THEN DD0.ObjType 
																								WHEN A0.nTipoTracking = 2 THEN C0.ObjType 
																							 END
																							 AND E0.Conteo IS NULL
								Left Join [logistics].[RecepcionDocumentos] G0 on G0.DocEntry = 
																							 CASE 
																								WHEN A0.nTipoTracking = 1 THEN DD0.DocEntry 
																								WHEN A0.nTipoTracking = 2 THEN F0.DocEntry 
																							 END 
																							 AND G0.ObjType = 
																							 CASE
																								WHEN A0.nTipoTracking = 1 THEN DD0.ObjType 
																								WHEN A0.nTipoTracking = 2 THEN G0.ObjType 
																							 END
																							 AND G0.Conteo IS NULL
					WHERE A0.bActivo = 1 AND B0.bActivo = 1 AND A0.nIdTracking = A.nIdTracking 
					GROUP BY A0.nTipoTracking
					)
				END [Estatus Almacen] 
				,ISNULL(A.ComentariosComercio,'''') ComentariosComercio		
				,EMB.Ref
			FROM logistics.Tracking_Encabezado A
			INNER JOIN logistics.Tracking_Facturas TF ON TF.nIdTracking = A.nIdTracking AND TF.bActivo = 1
			INNER JOIN SBOCTRZ.dbo.OPCH C ON CASE WHEN A.nTipoTracking = 1 THEN C.NumAtCard WHEN A.nTipoTracking = 2 THEN CAST(C.DocEntry AS VARCHAR(50)) END = CASE WHEN A.nTipoTracking = 1 THEN TF.sFactura WHEN A.nTipoTracking = 2 THEN CAST(TF.DocEntrySAP AS VARCHAR(50)) END AND C.DocType = ''I''	
			LEFT JOIN SBOCTRZ.dbo.OWHS B ON B.WhsCode = A.sCodAlmacenDestino
			LEFT JOIN [HNT_TRZ].logistics.EmbarquesV2 EMB ON EMB.Tracking = A.nIdTracking
			WHERE A.bActivo = 1 '+@Filtro+'
			ORDER BY A.nIdTracking

			SELECT 	
				DISTINCT
				a.nIdTracking, A.nTipoTracking, 
				C.DocNum[FacturaReserva], 
				A.sCodAlmacenDestino, CL.CardCode, CL.CardName[Proveedor] 
				, B.sFactura --[PJ-FLOT].dbo.SinComaFinal((SELECT F0.sFactura + '','' FROM logistics.Tracking_Facturas F0 WHERE F0.nIdTracking = A.nIdTracking AND F0.bActivo = 1 FOR XML PATH('''')))
				[FacturaProv]
				,C.DocEntry[iFacturaReserva] 
				,C.DocNum[Factura Reserva] 
				--CAST(RIGHT(''0000'' + CAST(YEAR(C.CreateDate) AS varchar(4)),4) + ''-'' + RIGHT(''00'' + CAST(MONTH(C.CreateDate) AS varchar(2)),2) + ''-'' + RIGHT(''00'' + CAST(DAY(C.CreateDate) AS varchar(2)),2) + '' '' +
				--CASE
				--	WHEN LEN(C.DocTime)=3 THEN 
				--	FORMAT(CAST(SUBSTRING(CAST(C.DocTime AS VARCHAR(3)),1,1) AS tinyint), ''00'') + '':'' +
				--	FORMAT(CAST(SUBSTRING(CAST(C.DocTime AS VARCHAR(3)),2,2) AS tinyint), ''00'') --+ '':'' +
				--	WHEN LEN(C.DocTime)=4 THEN 
				--	FORMAT(CAST(SUBSTRING(CAST(C.DocTime AS VARCHAR(4)),1,2) AS tinyint), ''00'') + '':'' +
				--	FORMAT(CAST(SUBSTRING(CAST(C.DocTime AS VARCHAR(4)),3,2) AS tinyint), ''00'') --+ '':'' +
				--END AS datetime)[Fecha FR]
				, DD.DocEntry[iEM]
				, DD.DocNum[EM]
				--, CAST(RIGHT(''0000'' + CAST(YEAR(DD.CreateDate) AS varchar(4)),4) + ''-'' + RIGHT(''00'' + CAST(MONTH(DD.CreateDate) AS varchar(2)),2) + ''-'' + RIGHT(''00'' + CAST(DAY(DD.CreateDate) AS varchar(2)),2) + '' '' +
				--CASE
				--	WHEN LEN(DD.DocTime)=3 THEN 
				--	FORMAT(CAST(SUBSTRING(CAST(DD.DocTime AS VARCHAR(3)),1,1) AS tinyint), ''00'') + '':'' +
				--	FORMAT(CAST(SUBSTRING(CAST(DD.DocTime AS VARCHAR(3)),2,2) AS tinyint), ''00'') --+ '':'' +
				--	WHEN LEN(DD.DocTime)=4 THEN 
				--	FORMAT(CAST(SUBSTRING(CAST(DD.DocTime AS VARCHAR(4)),1,2) AS tinyint), ''00'') + '':'' +
				--	FORMAT(CAST(SUBSTRING(CAST(DD.DocTime AS VARCHAR(4)),3,2) AS tinyint), ''00'') --+ '':'' +
				--END AS datetime)[Fecha EM] 
				, A.sPedimento[Pedimento]
				, IG.nTasaIGI
				, EE.DocNum[PE]
				, CASE  
					WHEN ISNULL(EE.U_EstadoEntrega,''02'') = ''01'' AND EE.DocNum IS NOT NULL THEN ''Parcial''
					WHEN ISNULL(EE.U_EstadoEntrega,''02'') = ''02'' AND EE.DocNum IS NOT NULL THEN ''Completo''
				  END[Tipo]
				, dbo.HNT_SinComaFinal((SELECT DISTINCT CONCAT(nIdTraspaso,'','') FROM logistics.Tracking_Encabezado A0 
				INNER JOIN logistics.Tracking_EM_TR B0 ON B0.nIdTracking = A0.nIdTracking AND B0.nIdEM = DD.DocEntry FOR XML PATH('''')))[Traspasos]
				, ISNULL((SELECT COUNT( DISTINCT nIdTraspaso) FROM logistics.Tracking_Encabezado A0 
				INNER JOIN logistics.Tracking_EM_TR B0 ON B0.nIdTracking = A0.nIdTracking AND B0.nIdEM = DD.DocEntry
				),0)[NumTraspasos]
			----	, /*CL.QryGroup51*/''N'' QryGroupImportacion
				, CASE WHEN A.dFechaCreacion <= ''2023-11-30'' AND A.nTipoTracking = 2 THEN ''N'' ELSE CL.QryGroup51 END QryGroupImportacion
				, A.sAduana
				, FORMAT(A.sFechaEmision, ''yyyy-MM-dd'') sFechaEmision
				, G.DocEntry [OC_FR]
				FROM logistics.Tracking_Encabezado A
				INNER JOIN logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking AND B.bActivo = 1
				INNER JOIN SBOCTRZ.dbo.OPCH C ON CASE WHEN A.nTipoTracking = 1 THEN C.NumAtCard WHEN A.nTipoTracking = 2 THEN CAST(C.DocEntry AS VARCHAR(50)) END = CASE WHEN A.nTipoTracking = 1 THEN B.sFactura WHEN A.nTipoTracking = 2 THEN CAST(B.DocEntrySAP AS VARCHAR(50)) END AND C.DocType = ''I''					    
				INNER JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
				LEFT JOIN SBOCTRZ.dbo.OCRD CL ON CL.CardCode = C.CardCode
				LEFT JOIN SBOCTRZ.dbo.PDN1 D ON D.BaseEntry = CC.DocEntry AND D.BaseLine = CC.LineNum AND D.BaseType = 18
				LEFT JOIN SBOCTRZ.dbo.OPDN DD ON DD.DocEntry = D.DocEntry
				LEFT JOIN SBOCTRZ.dbo.IPF1 E ON E.BaseEntry = D.DocEntry AND E.OrigLine = D.LineNum AND E.BaseType = 20
				LEFT JOIN SBOCTRZ.dbo.OIPF EE ON EE.DocEntry = E.DocEntry
				LEFT JOIN logistics.Tracking_EM_IGI IG ON IG.nIdTracking = A.nIdTracking AND IG.DocEntry = DD.DocEntry
				LEFT JOIN [HNT_TRZ].logistics.EmbarquesV2 EMB ON EMB.Tracking = A.nIdTracking
				
				---Nuevos JOINS AGREGADOS BRYAN (OC DE FACTURA DE RESERVA
				LEFT JOIN SBOCTRZ.dbo.POR1 GG ON GG.DocEntry = CC.BaseEntry 
					AND GG.LineNum = CC.BaseLine 				
				LEFT JOIN SBOCTRZ.dbo.OPOR G ON G.DocEntry = GG.DocEntry
			WHERE A.bActivo = 1 AND B.bActivo = 1 '+@Filtro+'
			GROUP BY 
				a.nIdTracking
				, A.nTipoTracking
				, A.sCodAlmacenDestino
				, CL.CardCode
				, CL.CardName
				, B.sFactura
				, C.DocEntry
				, C.DocNum
				, DD.DocEntry
				, DD.DocNum
				, A.sPedimento
				, IG.nTasaIGI
				, EE.DocNum
				, EE.U_EstadoEntrega
				, CL.QryGroup51
				, A.sAduana
				, A.sFechaEmision
				, A.dFechaCreacion
				, G.DocEntry
			ORDER BY A.nIdTracking
		END
		ELSE
		BEGIN
			SELECT 
			DISTINCT
			A.nIdTracking
			, A.nTipoTracking
			, CASE WHEN A.nTipoTracking = 1 THEN ''Importación'' WHEN A.nTipoTracking = 2 THEN ''Nacional'' END[Tipo]
			, CASE WHEN A.nTipoTracking = 1 THEN A.sPedimento  WHEN A.nTipoTracking = 2 THEN 
			(SELECT TOP 1 B0.sFactura FROM logistics.Tracking_Encabezado A0
			INNER JOIN logistics.Tracking_Facturas B0 ON B0.nIdTracking = A0.nIdTracking AND B0.bActivo = 1
			WHERE A0.nIdTracking = A.nIdTracking
			)
			END [No Pedimento]
			--, A.sCartaPorte[Carta Porte]
			,isnull((select top 1 FEntrega from HNT_TRZ.logistics.Embarques where Factura = 
					(select top 1(select top 1 X.NumAtCard From SBOCTRZ.dbo.OPOR X where X.DocEntry = XXX.BaseEntry)Factura
						From [SBOCTRZ].dbo.OPCH XX
						JOIN [SBOCTRZ].dbo.PCH1 XXX ON XX.DocEntry = XXX.DocEntry
						where XX.docnum = C.DocNum) ),convert(nvarchar,DATEADD(DAY,2,C.DocDate),111))[Fecha Arribo]
			 ,(select top 1 X.DocNum From SBOCTRZ.dbo.OPOR X where X.DocEntry =  (select top 1 Y.BaseEntry from SBOCTRZ.dbo.PCH1 Y WHERE Y.DocEntry = C.DocEntry))[OC]
			 ,(select top 1 X.NumAtCard From SBOCTRZ.dbo.OPOR X where X.DocEntry =  (select top 1 Y.BaseEntry from SBOCTRZ.dbo.PCH1 Y WHERE Y.DocEntry = C.DocEntry))[PO Grupo]
			--, A.dFechaArribo[Fecha Arribo]		
			, A.sCodAlmacenDestino + '' | '' + B.WhsName[Almacen], CAST(A.dFechaCreacion AS DATE)[Fecha Creacion] 
			, A.sEstatusDoc[Estatus Doc]
			, (SELECT MIN(dFechaEstatusDoc) FROM logistics.Tracking_EstatusDoc ED WHERE ED.nIdTracking = A.nIdTracking AND ED.sEstatusDoc = ''Completo'')[F-Doc Completo]
			--, '''' Estatus
			,ISNULL((SELECT 
			CASE
				WHEN MAX(C0.DocNum) IS NOT NULL AND MAX(DD0.DocNum) IS NULL AND MAX(EE0.DocNum) IS NULL THEN ''con FR''
				WHEN MAX(C0.DocNum) IS NOT NULL AND MAX(DD0.DocNum) IS NOT NULL AND MAX(EE0.DocNum) IS NULL THEN ''con EM''
				WHEN MAX(C0.DocNum) IS NOT NULL AND MAX(DD0.DocNum) IS NOT NULL AND MAX(EE0.DocNum) IS NOT NULL THEN ''con PE''
				WHEN MAX(C0.DocNum) IS NULL AND MAX(DD0.DocNum) IS NULL AND MAX(EE0.DocNum) IS NULL THEN ''SIN DOCUMENTOS''
			END
			
			FROM logistics.Tracking_Encabezado A0
			INNER JOIN logistics.Tracking_Facturas B0 ON B0.nIdTracking = A0.nIdTracking AND B0.bActivo = 1
			INNER JOIN SBOCTRZ.dbo.OPCH C0 ON CASE WHEN A0.nTipoTracking = 1 THEN C0.NumAtCard WHEN A0.nTipoTracking = 2 THEN CAST(C0.DocEntry AS VARCHAR(50)) END = CASE WHEN A0.nTipoTracking = 1 THEN B0.sFactura WHEN A0.nTipoTracking = 2 THEN CAST(B0.DocEntrySAP AS VARCHAR(50)) END AND C0.DocType = ''I''					    
			INNER JOIN SBOCTRZ.dbo.PCH1 CC0 ON CC0.DocEntry = C0.DocEntry
			LEFT JOIN SBOCTRZ.dbo.OCRD CL0 ON CL0.CardCode = C0.CardCode
			LEFT JOIN SBOCTRZ.dbo.PDN1 D0 ON D0.BaseEntry = CC0.DocEntry AND D0.BaseLine = CC0.LineNum AND D0.BaseType = 18
			LEFT JOIN SBOCTRZ.dbo.OPDN DD0 ON DD0.DocEntry = D0.DocEntry
			LEFT JOIN SBOCTRZ.dbo.IPF1 E0 ON E0.BaseEntry = D0.DocEntry AND E0.OrigLine = D0.LineNum AND E0.BaseType = 20
			LEFT JOIN SBOCTRZ.dbo.OIPF EE0 ON EE0.DocEntry = E0.DocEntry
			LEFT JOIN logistics.Tracking_EM_IGI IG0 ON IG0.nIdTracking = A0.nIdTracking AND IG0.DocEntry = DD0.DocEntry
			LEFT JOIN [HNT_TRZ].logistics.EmbarquesV2 EMB ON EMB.Tracking = A0.nIdTracking
			WHERE A0.bActivo = 1 AND B0.bActivo = 1 AND A0.nIdTracking = A.nIdTracking
			),'''')[Estatus Tracking] 

			, ISNULL((SELECT MIN(E0.FechaRecepcion)
				FROM logistics.Tracking_Encabezado A0
							INNER JOIN logistics.Tracking_Facturas B0 ON B0.nIdTracking = A0.nIdTracking
							INNER JOIN SBOCTRZ.dbo.OPCH C0 ON CASE WHEN A0.nTipoTracking = 1 THEN C0.NumAtCard WHEN A0.nTipoTracking = 2 THEN CAST(C0.DocEntry AS VARCHAR(50)) END = CASE WHEN A0.nTipoTracking = 1 THEN B0.sFactura WHEN A0.nTipoTracking = 2 THEN CAST(B0.DocEntrySAP AS VARCHAR(50)) END AND C0.DocType = ''I''					    
							INNER JOIN SBOCTRZ.dbo.PCH1 CC0 ON CC0.DocEntry = C0.DocEntry

							 
							 LEFT JOIN SBOCTRZ.dbo.POR1 FF0 ON FF0.DocEntry = CC0.BaseEntry AND FF0.LineNum = CC0.BaseLine
							 LEFT JOIN SBOCTRZ.dbo.OPOR F0 ON F0.DocEntry = FF0.DocEntry

							LEFT JOIN SBOCTRZ.dbo.OCRD CL0 ON CL0.CardCode = C0.CardCode
							LEFT JOIN SBOCTRZ.dbo.PDN1 D0 ON D0.BaseEntry = CC0.DocEntry AND D0.BaseLine = CC0.LineNum AND D0.BaseType = 18
							LEFT JOIN SBOCTRZ.dbo.OPDN DD0 ON DD0.DocEntry = D0.DocEntry
							Left Join [logistics].[RecepcionDocumentos] E0 on 
																						E0.DocEntry = 
																						 CASE 
																							WHEN A0.nTipoTracking = 1 THEN DD0.DocEntry 
																							WHEN A0.nTipoTracking = 2 THEN C0.DocEntry 
																						 END 
																						 AND E0.ObjType = 
																						 CASE
																							WHEN A0.nTipoTracking = 1 THEN DD0.ObjType 
																							WHEN A0.nTipoTracking = 2 THEN C0.ObjType 
																						 END
																						 AND E0.Conteo IS NULL
				WHERE A0.bActivo = 1 AND B0.bActivo = 1 AND A0.nIdTracking = A.nIdTracking
				),
				(SELECT MIN(E0.FechaRecepcion)
				FROM logistics.Tracking_Encabezado A0
							INNER JOIN logistics.Tracking_Facturas B0 ON B0.nIdTracking = A0.nIdTracking
							INNER JOIN SBOCTRZ.dbo.OPCH C0 ON CASE WHEN A0.nTipoTracking = 1 THEN C0.NumAtCard WHEN A0.nTipoTracking = 2 THEN CAST(C0.DocEntry AS VARCHAR(50)) END = CASE WHEN A0.nTipoTracking = 1 THEN B0.sFactura WHEN A0.nTipoTracking = 2 THEN CAST(B0.DocEntrySAP AS VARCHAR(50)) END AND C0.DocType = ''I''					    
							INNER JOIN SBOCTRZ.dbo.PCH1 CC0 ON CC0.DocEntry = C0.DocEntry

							 
							 LEFT JOIN SBOCTRZ.dbo.POR1 FF0 ON FF0.DocEntry = CC0.BaseEntry AND FF0.LineNum = CC0.BaseLine
							 LEFT JOIN SBOCTRZ.dbo.OPOR F0 ON F0.DocEntry = FF0.DocEntry

							LEFT JOIN SBOCTRZ.dbo.OCRD CL0 ON CL0.CardCode = C0.CardCode
							LEFT JOIN SBOCTRZ.dbo.PDN1 D0 ON D0.BaseEntry = CC0.DocEntry AND D0.BaseLine = CC0.LineNum AND D0.BaseType = 18
							LEFT JOIN SBOCTRZ.dbo.OPDN DD0 ON DD0.DocEntry = D0.DocEntry
							Left Join [logistics].[RecepcionDocumentos] E0 on 
																						E0.DocEntry = 
																						 CASE 
																							WHEN A0.nTipoTracking = 1 THEN DD0.DocEntry 
																							WHEN A0.nTipoTracking = 2 THEN F0.DocEntry 
																						 END 
																						 AND E0.ObjType = 
																						 CASE
																							WHEN A0.nTipoTracking = 1 THEN DD0.ObjType 
																							WHEN A0.nTipoTracking = 2 THEN F0.ObjType 
																						 END
																						 AND E0.Conteo IS NULL
				WHERE A0.bActivo = 1 AND B0.bActivo = 1 AND A0.nIdTracking = A.nIdTracking
				))
				---------------------------------------------------
				[Fecha Recepcion] 
				
				
				, 
				CASE
					WHEN ISNULL((SELECT COUNT(nID) FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ T0 WHERE T0.nIdTracking = A.nIdTracking AND sTipo = ''RDC''),0) > 0 THEN ''Cerrado''
					ELSE
					(SELECT CASE
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NOT NULL THEN ''Conteo Finalizado''
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NULL AND ISNULL(MIN(E0.FechaInicioConteo),MIN(G0.FechaInicioConteo)) IS NOT NULL THEN ''Conteo Iniciado''
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NULL AND ISNULL(MIN(E0.FechaInicioConteo),MIN(G0.FechaInicioConteo)) IS NULL AND ISNULL(MIN(E0.FechaFinDescarga),MIN(G0.FechaFinDescarga)) IS NOT NULL THEN ''Descarga Finalizada''
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NULL AND ISNULL(MIN(E0.FechaInicioConteo),MIN(G0.FechaInicioConteo)) IS NULL AND ISNULL(MIN(E0.FechaFinDescarga),MIN(G0.FechaFinDescarga)) IS NULL AND ISNULL(MIN(E0.FechaInicioDescarga),MIN(G0.FechaInicioDescarga)) IS NOT NULL THEN ''Descarga Iniciada''
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NULL AND ISNULL(MIN(E0.FechaInicioConteo),MIN(G0.FechaInicioConteo)) IS NULL AND ISNULL(MIN(E0.FechaFinDescarga),MIN(G0.FechaFinDescarga)) IS NULL AND ISNULL(MIN(E0.FechaInicioDescarga),MIN(G0.FechaInicioDescarga)) IS NULL AND ISNULL(MIN(E0.FechaRecepcion),MIN(G0.FechaRecepcion)) IS NOT NULL THEN ''Recepcionado'' 
								WHEN CASE WHEN A0.nTipoTracking = 1 THEN MIN(DD0.DocNum) WHEN A0.nTipoTracking = 2 THEN MIN(C0.DocNum) END IS NOT NULL AND ISNULL(MIN(E0.FechaFinConteo),MIN(G0.FechaFinConteo)) IS NULL AND ISNULL(MIN(E0.FechaInicioConteo),MIN(G0.FechaInicioConteo)) IS NULL AND ISNULL(MIN(E0.FechaFinDescarga),MIN(G0.FechaFinDescarga)) IS NULL AND ISNULL(MIN(E0.FechaInicioDescarga),MIN(G0.FechaInicioDescarga)) IS NULL AND ISNULL(MIN(E0.FechaRecepcion),MIN(G0.FechaRecepcion)) IS NULL THEN ''No Recepcionado''
								WHEN MIN(DD0.DocNum) IS NULL THEN ''Sin Documento EM''							
							  END
								FROM logistics.Tracking_Encabezado A0
								INNER JOIN logistics.Tracking_Facturas B0 ON B0.nIdTracking = A0.nIdTracking
								INNER JOIN SBOCTRZ.dbo.OPCH C0 ON CASE WHEN A0.nTipoTracking = 1 THEN C0.NumAtCard WHEN A0.nTipoTracking = 2 THEN CAST(C0.DocEntry AS VARCHAR(50)) END = CASE WHEN A0.nTipoTracking = 1 THEN B0.sFactura WHEN A0.nTipoTracking = 2 THEN CAST(B0.DocEntrySAP AS VARCHAR(50)) END AND C0.DocType = ''I''					    
								INNER JOIN SBOCTRZ.dbo.PCH1 CC0 ON CC0.DocEntry = C0.DocEntry

								LEFT JOIN SBOCTRZ.dbo.POR1 FF0 ON FF0.DocEntry = CC0.BaseEntry AND FF0.LineNum = CC0.BaseLine
								 LEFT JOIN SBOCTRZ.dbo.OPOR F0 ON F0.DocEntry = FF0.DocEntry

								LEFT JOIN SBOCTRZ.dbo.OCRD CL0 ON CL0.CardCode = C0.CardCode
								LEFT JOIN SBOCTRZ.dbo.PDN1 D0 ON D0.BaseEntry = CC0.DocEntry AND D0.BaseLine = CC0.LineNum AND D0.BaseType = 18
								LEFT JOIN SBOCTRZ.dbo.OPDN DD0 ON DD0.DocEntry = D0.DocEntry
								Left Join [logistics].[RecepcionDocumentos] E0 on E0.DocEntry = 
																							 CASE 
																								WHEN A0.nTipoTracking = 1 THEN DD0.DocEntry 
																								WHEN A0.nTipoTracking = 2 THEN C0.DocEntry 
																							 END 
																							 AND E0.ObjType = 
																							 CASE
																								WHEN A0.nTipoTracking = 1 THEN DD0.ObjType 
																								WHEN A0.nTipoTracking = 2 THEN C0.ObjType 
																							 END
																							 AND E0.Conteo IS NULL
								Left Join [logistics].[RecepcionDocumentos] G0 on G0.DocEntry = 
																							 CASE 
																								WHEN A0.nTipoTracking = 1 THEN DD0.DocEntry 
																								WHEN A0.nTipoTracking = 2 THEN F0.DocEntry 
																							 END 
																							 AND G0.ObjType = 
																							 CASE
																								WHEN A0.nTipoTracking = 1 THEN DD0.ObjType 
																								WHEN A0.nTipoTracking = 2 THEN G0.ObjType 
																							 END
																							 AND G0.Conteo IS NULL
								
					WHERE A0.bActivo = 1 AND B0.bActivo = 1 AND A0.nIdTracking = A.nIdTracking 
					GROUP BY A0.nTipoTracking
					)
				END [Estatus Almacen]
				,ISNULL(A.ComentariosComercio,'''') ComentariosComercio
			FROM logistics.Tracking_Encabezado A
			INNER JOIN logistics.Tracking_Facturas TF ON TF.nIdTracking = A.nIdTracking AND TF.bActivo = 1
			INNER JOIN SBOCTRZ.dbo.OPCH C ON CASE WHEN A.nTipoTracking = 1 THEN C.NumAtCard WHEN A.nTipoTracking = 2 THEN CAST(C.DocEntry AS VARCHAR(50)) END = CASE WHEN A.nTipoTracking = 1 THEN TF.sFactura WHEN A.nTipoTracking = 2 THEN CAST(TF.DocEntrySAP AS VARCHAR(50)) END AND C.DocType = ''I''					    
			LEFT JOIN SBOCTRZ.dbo.OWHS B ON B.WhsCode = A.sCodAlmacenDestino
			LEFT JOIN [HNT_TRZ].logistics.EmbarquesV2 EMB ON EMB.Tracking = A.nIdTracking
			WHERE A.bActivo = 1 '+@Filtro+'
			AND A.sCodAlmacenDestino = '''+@_Almacen+'''
			ORDER BY A.nIdTracking

			SELECT 
			DISTINCT
			a.nIdTracking, A.nTipoTracking, A.sCodAlmacenDestino, CL.CardCode, CL.CardName[Proveedor] 
			, B.sFactura --[PJ-FLOT].dbo.SinComaFinal((SELECT F0.sFactura + '','' FROM logistics.Tracking_Facturas F0 WHERE F0.nIdTracking = A.nIdTracking AND F0.bActivo = 1 FOR XML PATH('''')))
			[FacturaProv]
			,C.DocEntry[iFacturaReserva] 
			,C.DocNum[Factura Reserva] 
			--CAST(RIGHT(''0000'' + CAST(YEAR(C.CreateDate) AS varchar(4)),4) + ''-'' + RIGHT(''00'' + CAST(MONTH(C.CreateDate) AS varchar(2)),2) + ''-'' + RIGHT(''00'' + CAST(DAY(C.CreateDate) AS varchar(2)),2) + '' '' +
			--CASE
			--	WHEN LEN(C.DocTime)=3 THEN 
			--	FORMAT(CAST(SUBSTRING(CAST(C.DocTime AS VARCHAR(3)),1,1) AS tinyint), ''00'') + '':'' +
			--	FORMAT(CAST(SUBSTRING(CAST(C.DocTime AS VARCHAR(3)),2,2) AS tinyint), ''00'') --+ '':'' +
			--	WHEN LEN(C.DocTime)=4 THEN 
			--	FORMAT(CAST(SUBSTRING(CAST(C.DocTime AS VARCHAR(4)),1,2) AS tinyint), ''00'') + '':'' +
			--	FORMAT(CAST(SUBSTRING(CAST(C.DocTime AS VARCHAR(4)),3,2) AS tinyint), ''00'') --+ '':'' +
			--END AS datetime)[Fecha FR]
			, DD.DocEntry[iEM]
			, DD.DocNum[EM]
			--, CAST(RIGHT(''0000'' + CAST(YEAR(DD.CreateDate) AS varchar(4)),4) + ''-'' + RIGHT(''00'' + CAST(MONTH(DD.CreateDate) AS varchar(2)),2) + ''-'' + RIGHT(''00'' + CAST(DAY(DD.CreateDate) AS varchar(2)),2) + '' '' +
			--CASE
			--	WHEN LEN(DD.DocTime)=3 THEN 
			--	FORMAT(CAST(SUBSTRING(CAST(DD.DocTime AS VARCHAR(3)),1,1) AS tinyint), ''00'') + '':'' +
			--	FORMAT(CAST(SUBSTRING(CAST(DD.DocTime AS VARCHAR(3)),2,2) AS tinyint), ''00'') --+ '':'' +
			--	WHEN LEN(DD.DocTime)=4 THEN 
			--	FORMAT(CAST(SUBSTRING(CAST(DD.DocTime AS VARCHAR(4)),1,2) AS tinyint), ''00'') + '':'' +
			--	FORMAT(CAST(SUBSTRING(CAST(DD.DocTime AS VARCHAR(4)),3,2) AS tinyint), ''00'') --+ '':'' +
			--END AS datetime)[Fecha EM] 
			, A.sPedimento[Pedimento]
			, IG.nTasaIGI
			, EE.DocNum[PE]
			, CASE  
				WHEN ISNULL(EE.U_EstadoEntrega,''02'') = ''01'' AND EE.DocNum IS NOT NULL THEN ''Parcial''
				WHEN ISNULL(EE.U_EstadoEntrega,''02'') = ''02'' AND EE.DocNum IS NOT NULL THEN ''Completo''
			  END[Tipo]
			, dbo.HNT_SinComaFinal((SELECT DISTINCT CONCAT(nIdTraspaso,'','') FROM logistics.Tracking_Encabezado A0 INNER JOIN logistics.Tracking_EM_TR B0 ON B0.nIdTracking = A0.nIdTracking AND B0.nIdEM = DD.DocEntry FOR XML PATH('''')))[Traspasos]
			, ISNULL((SELECT COUNT( DISTINCT nIdTraspaso) FROM logistics.Tracking_Encabezado A0 
			INNER JOIN logistics.Tracking_EM_TR B0 ON B0.nIdTracking = A0.nIdTracking AND B0.nIdEM = DD.DocEntry
			),0)[NumTraspasos]
			, /*CL.QryGroup51*/''N''   QryGroupImportacion
			, CASE WHEN A.dFechaCreacion <= ''2023-11-30'' AND A.nTipoTracking = 2 THEN ''N'' ELSE CL.QryGroup51 END QryGroupImportacion
			, A.sAduana
			, FORMAT(A.sFechaEmision, ''yyyy-MM-dd'') sFechaEmision
			FROM logistics.Tracking_Encabezado A
			INNER JOIN logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking AND B.bActivo = 1
			INNER JOIN SBOCTRZ.dbo.OPCH C ON CASE WHEN A.nTipoTracking = 1 THEN C.NumAtCard WHEN A.nTipoTracking = 2 THEN CAST(C.DocEntry AS VARCHAR(50)) END = CASE WHEN A.nTipoTracking = 1 THEN B.sFactura WHEN A.nTipoTracking = 2 THEN CAST(B.DocEntrySAP AS VARCHAR(50)) END AND C.DocType = ''I''					    
			INNER JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
			LEFT JOIN SBOCTRZ.dbo.OCRD CL ON CL.CardCode = C.CardCode
			LEFT JOIN SBOCTRZ.dbo.PDN1 D ON D.BaseEntry = CC.DocEntry AND D.BaseLine = CC.LineNum AND D.BaseType = 18
			LEFT JOIN SBOCTRZ.dbo.OPDN DD ON DD.DocEntry = D.DocEntry
			LEFT JOIN SBOCTRZ.dbo.IPF1 E ON E.BaseEntry = D.DocEntry AND E.OrigLine = D.LineNum AND E.BaseType = 20
			LEFT JOIN SBOCTRZ.dbo.OIPF EE ON EE.DocEntry = E.DocEntry
			LEFT JOIN logistics.Tracking_EM_IGI IG ON IG.nIdTracking = A.nIdTracking AND IG.DocEntry = DD.DocEntry
			LEFT JOIN [HNT_TRZ].logistics.EmbarquesV2 EMB ON EMB.Tracking = A.nIdTracking
			WHERE A.bActivo = 1 AND B.bActivo = 1 '+@Filtro+'
			AND A.sCodAlmacenDestino = '''+@_Almacen+'''
			GROUP BY a.nIdTracking, A.nTipoTracking, A.sCodAlmacenDestino, CL.CardCode, CL.CardName, B.sFactura, C.DocEntry, C.DocNum, DD.DocEntry, DD.DocNum, A.sPedimento, IG.nTasaIGI, EE.DocNum, EE.U_EstadoEntrega
			, CL.QryGroup51
			, A.sAduana
			, A.sFechaEmision
			, A.dFechaCreacion
			ORDER BY A.nIdTracking
		END

		';

		EXECUTE(@Qry)
	END

	--SE CONSULTAN LOS PERMISOS PARA TRACKING
	IF @TipoConsulta = 9
	BEGIN
		
		--select*From HNT_TRZ.hnt.Usuarios where Nombre like '%Toxqui%'

		IF @Usuario > 0
		BEGIN
			IF @_Rol = 1
			BEGIN
				SELECT CAST(1 AS BIT) [CrearTracking], CAST(1 AS BIT) [EditarTracking], CAST(1 AS BIT) [AgregarReparticion], CAST(1 AS BIT) [EditarIGI], CAST(1 AS BIT) [CrearTraspasos], CAST(1 AS BIT) [VisualizarTraspasos], CAST(1 AS BIT) [VisualizarAllTabs], CAST(0 AS BIT) [IngresoCreacionSoloLectura], CAST(1 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion]  
			END
			ELSE IF @Usuario IN(2566,3893,3959,3984,5960)
			BEGIN
				SELECT CAST(1 AS BIT) [CrearTracking], CAST(1 AS BIT) [EditarTracking], CAST(1 AS BIT) [AgregarReparticion], CAST(0 AS BIT) [EditarIGI], CAST(0 AS BIT) [CrearTraspasos], CAST(0 AS BIT) [VisualizarTraspasos], CAST(1 AS BIT) [VisualizarAllTabs], CAST(0 AS BIT) [IngresoCreacionSoloLectura], CAST(0 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion] 
			END
			ELSE IF @_Rol IN(3)
			BEGIN
				SELECT CAST(0 AS BIT) [CrearTracking], CAST(0 AS BIT) [EditarTracking], CAST(1 AS BIT) [AgregarReparticion], CAST(0 AS BIT) [EditarIGI], CAST(0 AS BIT) [CrearTraspasos], CAST(1 AS BIT) [VisualizarTraspasos], CAST(1 AS BIT) [VisualizarAllTabs], CAST(0 AS BIT) [IngresoCreacionSoloLectura], CAST(0 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion] 
			END
			ELSE IF @_Rol IN(16,59)
			BEGIN
				SELECT CAST(0 AS BIT) [CrearTracking], CAST(0 AS BIT) [EditarTracking], CAST(0 AS BIT) [AgregarReparticion], CAST(0 AS BIT) [EditarIGI], CAST(1 AS BIT) [CrearTraspasos], CAST(1 AS BIT) [VisualizarTraspasos], CAST(1 AS BIT) [VisualizarAllTabs], CAST(0 AS BIT) [IngresoCreacionSoloLectura], CAST(1 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion] 
			END
			ELSE IF @_Rol IN(6)
			BEGIN
				SELECT CAST(0 AS BIT) [CrearTracking], CAST(0 AS BIT) [EditarTracking], CAST(0 AS BIT) [AgregarReparticion], CAST(0 AS BIT) [EditarIGI], CAST(1 AS BIT) [CrearTraspasos], CAST(1 AS BIT) [VisualizarTraspasos], CAST(1 AS BIT) [VisualizarAllTabs], CAST(0 AS BIT) [IngresoCreacionSoloLectura], CAST(0 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion] 
			END
			ELSE IF @_Rol IN(17,79)
			BEGIN
				SELECT CAST(0 AS BIT) [CrearTracking], CAST(1 AS BIT) [EditarTracking], CAST(0 AS BIT) [AgregarReparticion], CAST(1 AS BIT) [EditarIGI], CAST(0 AS BIT) [CrearTraspasos], CAST(1 AS BIT) [VisualizarTraspasos], CAST(1 AS BIT) [VisualizarAllTabs], CAST(0 AS BIT) [IngresoCreacionSoloLectura], CAST(0 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion] 
			END
			ELSE IF @_Rol IN(30, 24, 19)
			BEGIN
				SELECT CAST(0 AS BIT) [CrearTracking], CAST(0 AS BIT) [EditarTracking], CAST(0 AS BIT) [AgregarReparticion], CAST(0 AS BIT) [EditarIGI], CAST(0 AS BIT) [CrearTraspasos], CAST(1 AS BIT) [VisualizarTraspasos], CAST(1 AS BIT) [VisualizarAllTabs], CAST(1 AS BIT) [IngresoCreacionSoloLectura], CAST(0 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion] 
			END
			ELSE IF @_Rol IN(25)
			BEGIN
				SELECT CAST(0 AS BIT) [CrearTracking], CAST(0 AS BIT) [EditarTracking], CAST(0 AS BIT) [AgregarReparticion], CAST(0 AS BIT) [EditarIGI], CAST(0 AS BIT) [CrearTraspasos], CAST(1 AS BIT) [VisualizarTraspasos], CAST(0 AS BIT) [VisualizarAllTabs], CAST(0 AS BIT) [IngresoCreacionSoloLectura], CAST(0 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion] 
			END
			ELSE IF @_Rol IN(15, 33, 69)
			BEGIN
				SELECT CAST(1 AS BIT) [CrearTracking], CAST(1 AS BIT) [EditarTracking], CAST(1 AS BIT) [AgregarReparticion], CAST(0 AS BIT) [EditarIGI], CAST(0 AS BIT) [CrearTraspasos], CAST(0 AS BIT) [VisualizarTraspasos], CAST(1 AS BIT) [VisualizarAllTabs], CAST(0 AS BIT) [IngresoCreacionSoloLectura], CAST(0 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion] 
				
			END
			ELSE IF @_Rol IN(/*33,*/ 50)
			BEGIN
				SELECT CAST(0 AS BIT) [CrearTracking], CAST(0 AS BIT) [EditarTracking], CAST(1 AS BIT) [AgregarReparticion], CAST(0 AS BIT) [EditarIGI], CAST(0 AS BIT) [CrearTraspasos], CAST(0 AS BIT) [VisualizarTraspasos], CAST(1 AS BIT) [VisualizarAllTabs], CAST(0 AS BIT) [IngresoCreacionSoloLectura], CAST(0 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion] 
			END
			ELSE
				SELECT CAST(0 AS BIT) [CrearTracking], CAST(0 AS BIT) [EditarTracking], CAST(0 AS BIT) [AgregarReparticion], CAST(0 AS BIT) [EditarIGI], CAST(0 AS BIT) [CrearTraspasos], CAST(0 AS BIT) [VisualizarTraspasos], CAST(0 AS BIT) [VisualizarAllTabs], CAST(0 AS BIT) [IngresoCreacionSoloLectura], CAST(0 AS BIT) [AdjuntarInSeguimiento], CAST(0 AS BIT) [ControlProyeccion] 
		END
	END

		--select*From Halconet.hnt.Usuarios where  nombre like '%NANCY%'



	IF @TipoConsulta = 10
	BEGIN
		IF NOT EXISTS(SELECT * FROM logistics.Tracking_EM_IGI WHERE nIdTracking = @IdTracking AND DocEntry = @DocEntry AND DocNum = @DocNum)
		BEGIN
			INSERT INTO logistics.Tracking_EM_IGI (nIdTracking, DocEntry, DocNum, nTasaIGI)
													VALUES (@IdTracking, @DocEntry, @DocNum, @TasaIGI)
		END
		ELSE
		BEGIN
			UPDATE logistics.Tracking_EM_IGI
			SET nTasaIGI = @TasaIGI
			WHERE nIdTracking = @IdTracking AND DocEntry = @DocEntry AND DocNum = @DocNum
		END

	END	

	IF @TipoConsulta = 11
	BEGIN
		SELECT WhsCode[Codigo], WhsName[Nombre] FROM SBOCTRZ.dbo.OWHS WHERE WhsCode IN ('02','E2','07')
	END
	IF @TipoConsulta = 12
	BEGIN

		--SELECT DISTINCT A.WhsCode FROM SBOCTRZ.dbo.PDN1 A
		--WHERE A.DocEntry = @DocNum

		SELECT 
		A.DocEntry, A.LineNum, A.ItemCode[Articulo], A.Dscription[Descripcion], A.WhsCode, D.WhsName[Almacen], C.BWeight1[PesoU], (C.BVolume/1000000)*35.3147 VolumenU
		, C.ManBtchNum, A.FromWhsCod--, A.Quantity
		, A.Quantity * ISNULL(C.NumInBuy,1)
		- ISNULL((SELECT SUM(nQuantity) FROM logistics.Tracking_EM_TR A0 WHERE A0.nIdEM = A.DocEntry AND A0.nLineNumEM = A.LineNum AND A0.sItemCode = A.ItemCode),0)		
		 [CantidadPendiente]
		
		, CASE
			WHEN ISNULL((SELECT TOP 1 DocEntry FROM sap.ODRF 
			WHERE ObjType = 67 AND U_OC = A.DocEntry AND (TransId IS NULL OR TransId = -1)
			AND NumAtCard = 'TraspasoFromEM'
			),0)>0 THEN E.nQuantity
			ELSE
			A.Quantity * ISNULL(C.NumInBuy,1)
			- ISNULL((SELECT SUM(nQuantity) FROM logistics.Tracking_EM_TR A0 WHERE A0.nIdEM = A.DocEntry AND A0.nLineNumEM = A.LineNum AND A0.sItemCode = A.ItemCode),0)
		  END		
		[CantidadRecibir]
		, ISNULL(A.U_TipoAlm, E.nTipoAlm)[TipoAlm], ISNULL(A.U_Tarima,nTarima)[Tarima], A.U_Padre, A.U_Vendedor 
		, C.BuyUnitMsr[Unidad de medida]
		,ISNULL(C.NumInBuy,1)[Cantidad Unitaria]
		FROM SBOCTRZ.dbo.PDN1 A
		INNER JOIN SBOCTRZ.dbo.OITM C ON C.ItemCode = A.ItemCode AND C.ItemType <> 'F'
		INNER JOIN SBOCTRZ.dbo.OWHS D ON D.WhsCode = A.WhsCode
		 LEFT JOIN logistics.Tracking_EM_Previo E ON E.nIdEM = A.DocEntry AND E.nLineNum = A.LineNum
		WHERE A.DocEntry = @DocNum

	END
	IF @TipoConsulta = 13
	BEGIN
		SELECT U_FolioSolicitud, DocEntry, DocNum, NumAtCard[Tipo], 
		O1.WhsCode[Codigo-Origen], O1.WhsName[Nombre Origen], 
		O2.WhsCode[Codigo-Destino], O2.WhsName[Nombre Destino], 
		CASE
			WHEN TransId IS NULL THEN 'En proceso de generación..'
			ELSE PickRmrk
				
		END[Estatus]
		, TransId  
		
		FROM [HNT_TRZ].sap.ODRF T1
		INNER JOIN [SBOCTRZ].dbo.OWHS O1 ON T1.Filler = O1.WhsCode
		INNER JOIN [SBOCTRZ].dbo.OWHS O2 ON T1.ToWhsCode = O2.WhsCode
		WHERE T1.ObjType = 67 
		AND ISNULL(T1.TransId,0) NOT IN(-5)
		AND T1.U_FolioSolicitud = @IdTracking AND T1.U_OC = @iEM
		ORDER BY T1.DocEntry		
	
	END

	IF @TipoConsulta = 14
	BEGIN
		SELECT TOP 1 * FROM sap.ODRF 
		WHERE ObjType = 67 AND U_FolioSolicitud = @IdTracking AND Filler = @AlmacenOrigen AND ToWhsCode = @AlmacenDestino AND U_OC = @iEM AND TransId IS NULL
		AND NumAtCard = 'TraspasoFromEM'
	END

	IF @TipoConsulta = 15
	BEGIN
		IF @TipoAlm = -1
			SET @TipoAlm = NULL

		IF @Tarima = -1
			SET @Tarima = NULL

		IF NOT EXISTS(SELECT * FROM logistics.Tracking_EM_Previo WHERE nIdTracking = @IdTracking AND nIdEM = @iEM AND nLineNum = @LineNum)
		BEGIN
			INSERT INTO logistics.Tracking_EM_Previo (nIdTracking, nIdEM, nLineNum, sItemCode, nQuantity, nTipoAlm, nTarima)
													   VALUES (@IdTracking, @iEM, @LineNum, @ItemCode, @Cantidad, @TipoAlm, @Tarima)
		END
		ELSE
		BEGIN
			UPDATE logistics.Tracking_EM_Previo
			SET nQuantity = @Cantidad
				,nTipoAlm = @TipoAlm
				,nTarima = @Tarima
			WHERE nIdTracking = @IdTracking AND nIdEM = @iEM AND nLineNum = @LineNum
		END
	END

	IF @TipoConsulta = 16
	BEGIN
		--SE ACTUALIZA EL TRANSID PARA LOS FOLIOS DE TRASPASO BORRADOR CON (-5) PARA DESCARTAR DEFINITIVAMENTE A LOS TRASPASOS 
		--QUE HAN MARCADO ALGUNA EXCEPCION Y QUE TIENEN POR VALOR EN TRANSID(-1)
		UPDATE sap.ODRF SET TransId = -5 
		WHERE ObjType = 67 AND U_FolioSolicitud = @IdTracking AND Filler = @AlmacenOrigen AND ToWhsCode = @AlmacenDestino AND TransId = -1 
		AND NumAtCard = 'TraspasoFromEM'
	END

	IF @TipoConsulta = 17
	BEGIN
		SELECT 
		A.DocNum[No. Traspaso], B.ItemCode[Articulo], C.ItemName[Descripcion], B.Quantity[Cantidad]
		, B.FromWhsCod + ' | ' + D.WhsName[Origen], B.WhsCode + ' | ' + E.WhsName[Destino]

		FROM SBOCTRZ.dbo.OWTR A 
		INNER JOIN SBOCTRZ.dbo.WTR1 B ON B.DocEntry = A.DocEntry
		INNER JOIN SBOCTRZ.dbo.OITM C ON C.ItemCode = B.ItemCode
		LEFT JOIN SBOCTRZ.dbo.OWHS D ON D.WhsCode = B.FromWhsCod
		LEFT JOIN SBOCTRZ.dbo.OWHS E ON E.WhsCode = B.WhsCode
		WHERE A.DocNum = @DocNum
	END

	IF @TipoConsulta = 18
	BEGIN
		SELECT nIdTraspaso[No. Traspaso] 
		FROM logistics.Tracking_Encabezado A0 
		INNER JOIN logistics.Tracking_EM_TR B0 ON B0.nIdTracking = A0.nIdTracking 
		WHERE B0.nIdEM = @iEM
		GROUP BY nIdTraspaso
		

	END

	IF @TipoConsulta = 19 --SE INSERTA LOS ARCHIVOS DE RECEPCION DE DOCTOS
	BEGIN
		IF ISNULL(@Opc,1) = 1
		BEGIN
		--Se agrego tabla a la base de datos (ANGEL)
			INSERT INTO [HNT-Files].dbo.CTRZ_Files_RecepDoctos(DocEntry, sTipo, sNombre, sExtension, fArchivo, sRutaOrigen, dFechaAlta, nIdUsuario)
												VALUES (@DocEntry, @Tipo, @Nombre, @Extension, @Archivo, @RutaOrigen, GETDATE(), @Usuario)
		END
		ELSE IF @Opc = 2
		BEGIN
			SELECT nID, DocEntry
			, sTipo
			, sNombre, sExtension, sRutaOrigen, fArchivo 
			FROM [HNT-Files].dbo.CTRZ_Files_RecepDoctos
			WHERE DocEntry = @DocEntry AND sTipo = @Tipo 
			UNION ALL
			SELECT nID, nIdTracking[DocEntry] 
			, sTipo
			, sNombre, sExtension, sRutaOrigen, fArchivo
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ
			WHERE nIdTracking = @IdTracking AND sTipo = 'RDC'

			ORDER BY sTipo, sExtension, sNombre
		END
		ELSE
		BEGIN
			IF ISNULL(@Tipo,'') = ''
			BEGIN
				DELETE [HNT-Files].dbo.Files_Tracking_HNT_TRZ WHERE nID = @ID
			END
			ELSE IF ISNULL(@Tipo,'') IN('RDC','GAD','FAC','OTR','PED','REP')
			BEGIN
				DELETE [HNT-Files].dbo.Files_Tracking_HNT_TRZ WHERE nID = @ID
			END
			--ELSE IF ISNULL(@Tipo,'') <> 'RDC'
			--BEGIN
			--	DELETE [HNT-Files].dbo.Files_RecepDoctos WHERE nID = @ID
			--END
			--ELSE IF ISNULL(@Tipo,'') = ''
			--BEGIN
			--	DELETE [HNT-Files].dbo.Files_Tracking_HNT_TRZ WHERE nID = @ID
			--END
			--ELSE IF ISNULL(@Tipo,'') = 'RDC'
			--BEGIN
			--	DELETE [HNT-Files].dbo.Files_Tracking_HNT_TRZ WHERE nID = @ID
			--END
			--ELSE
			--BEGIN
			--	DELETE [HNT-Files].dbo.Files_Tracking_HNT_TRZ WHERE nID = @ID
			--END
		END
	END

	--SELECT * FROM [HNT-Files].dbo.Files_RecepDoctos
	--select DISTINCT stipo from [HNT-Files].dbo.Files_Tracking_HNT_TRZ
	--select nid, nidtracking, stipo, snombre, sextension, srutaorigen, dfechaalta, nidusuario, sobservaciones from [HNT-Files].dbo.Files_Tracking_HNT_TRZ WHERE stipo = 'RDC' nID = 4320
	--SELECT * FROM SBOCTRZ.dbo.OPCH WHERE CardCode = '18856'
	
	IF @TipoConsulta = 20
	BEGIN
				
				DECLARE @_TipoTrack_ INT

				SELECT @_TipoTrack_ = ISNULL(nTipoTracking,1) FROM logistics.Tracking_Encabezado A WHERE nIdTracking = @IdTracking
				
				SET @CorreoPrincipal = 'comercio.exterior@tractozone.com.mx;zulma.garcia@tractozone.com.mx;'
				SET @CorreosCopia = 'ana.suarez@tractozone.com.mx;'--leticia.aguilar@tractozone.com.mx;'

				
				SET @CorreoAlmacen = (SELECT ISNULL(Correo,'') + ';' FROM HNT.Usuarios  where ROL = 16 AND Almacen = 
				(SELECT TOP 1 sCodAlmacenDestino FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking)
				AND ISNULL(Correo,'')<>'' FOR XML PATH('')
				)

				IF @_TipoTrack_ = 2
				BEGIN
					SET @CorreoPrincipal = @CorreoAlmacen
					SET @AlmacenTrackingLlega = (SELECT TOP 1 sCodAlmacenDestino FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking)
					
					
					SET @CorreoAlmacen = ''

					IF ISNULL(@AlmacenTrackingLlega,'') = '01'
						SET @CorreoAlmacen = 'recepcionmaterial@hotmail.com;'
					ELSE IF ISNULL(@AlmacenTrackingLlega,'') = '02'
						SET @CorreoAlmacen = 'almacen.mtypj2@gmail.com;'
					ELSE IF ISNULL(@AlmacenTrackingLlega,'') = 'E2'
						SET @CorreoAlmacen = 'recibo.cedispj@gmail.com;'
					

				END

				IF @CorreoAlmacen <> ''
					SET @CorreosCopia += @CorreoAlmacen
		
				SET @tableHTML = 
						'<style>
							body,p {font-family: Arial, Helvetica, sans-serif;}
							table {font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 12px; text-align: left; border: 1px solid white; }
							th { text-align: left; }
							td { text-align: right; padding: 8px; background: #BDBDBD; border-bottom: 1px solid #fff; color: #000000; border-top: 1px solid transparent; }
							tr:hover td { background: #d0dafd; color: #339; }
							</style>
							<p>Se notifica de la creación de una orden de solicitud de tracking</p>
							<p>No. de tracking: </p>'

		
				SET @tableHTML += '<p>Detalle:</p>' +  
					 N'<table style="padding: 5px;"><body>' +  
					 N'<tr style = "font-size: 6px;">
						   <th style = "text-align:left; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Folio</th>
						   <th style = "text-align:left; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Destino</th>
						   '
						  -- if @_TipoTrack_ = 1
						  -- begin
								--SET @tableHTML += '<th style = "text-align:left; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Cliente</th>'
						  -- end
						  -- else
						  -- begin
						 --		SET 
							--@tableHTML += 
							+ '<th style = "text-align:left; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Proveedor</th>'
						   --end
						   --SET @tableHTML =+ 
						   + '<th style = "text-align:left; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:100px;">Facturas</th>
						   <th style = "text-align:rigth; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Factura Reserva</th>
						   <th style = "text-align:rigth; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">EM</th>
						   <th style = "text-align:rigth; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Pedimento</th>
						   <th style = "text-align:rigth; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Tasa IGI</th>
						   <th style = "text-align:rigth; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">PE</th>
						   <th style = "text-align:rigth; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Traspasos</th>
						   '
						   +
						   CAST ((SELECT 
							 td = ISNULL(CAST(A.nIdTracking AS VARCHAR(50)),'---'), ''
						   , td = ISNULL(CAST(A.sCodAlmacenDestino AS VARCHAR(500)),'---'), ''
						   , td = ISNULL(CAST(CL.CardCode AS VARCHAR(50)),'---'), '' 
							,td = ISNULL(CAST((SELECT F0.sFactura + ',' FROM logistics.Tracking_Facturas F0 WHERE F0.nIdTracking = A.nIdTracking FOR XML PATH('')) AS VARCHAR(5000)),'---'), ''
							,td = ISNULL(CAST(C.DocNum AS VARCHAR(50)),'---'), ''
							,td = ISNULL(CAST(DD.DocNum AS VARCHAR(50)),'---'), ''
							,td = ISNULL(CAST(A.sPedimento AS VARCHAR(50)),'---'), ''
							,td = ISNULL(CAST(IG.nTasaIGI AS VARCHAR(50)),'---'), ''
							,td = ISNULL(CAST(EE.DocNum AS VARCHAR(50)),'---'), ''
							,td = ISNULL(CAST([PJ-FLOT].dbo.SinComaFinal((SELECT DISTINCT CONCAT(nIdTraspaso,',') FROM logistics.Tracking_Encabezado A0 
							INNER JOIN logistics.Tracking_EM_TR B0 ON B0.nIdTracking = A0.nIdTracking AND B0.nIdEM = DD.DocEntry FOR XML PATH('')))AS VARCHAR(5000)),'---'), ''
							FROM logistics.Tracking_Encabezado A
							INNER JOIN logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking
							LEFT JOIN SBOCTRZ.dbo.OPCH C ON C.NumAtCard = B.sFactura AND C.DocType = 'I'
							LEFT JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
							LEFT JOIN SBOCTRZ.dbo.OCRD CL ON CL.CardCode = C.CardCode
							LEFT JOIN SBOCTRZ.dbo.PDN1 D ON D.BaseEntry = CC.DocEntry AND D.BaseLine = CC.LineNum AND D.BaseType = 18
							LEFT JOIN SBOCTRZ.dbo.OPDN DD ON DD.DocEntry = D.DocEntry		
							LEFT JOIN SBOCTRZ.dbo.IPF1 E ON E.BaseEntry = D.DocEntry AND E.OrigLine = D.LineNum AND E.BaseType = 20
							LEFT JOIN SBOCTRZ.dbo.OIPF EE ON EE.DocEntry = E.DocEntry
							LEFT JOIN [HNT_TRZ].logistics.Tracking_EM_IGI IG ON IG.nIdTracking = A.nIdTracking AND IG.DocEntry = DD.DocEntry
							WHERE A.nIdTracking = @IdTracking AND A.bActivo = 1 AND B.bActivo = 1
							GROUP BY a.nIdTracking, A.sCodAlmacenDestino, CL.CardCode, C.DocNum, DD.DocNum, A.sPedimento, IG.nTasaIGI, EE.DocNum,DD.DocEntry
							FOR XML PATH('tr'), TYPE) AS NVARCHAR(MAX))
							+						
							N'</body></table>' 
							
							--+ '<p>' + @CorreoPrincipal + @CorreosCopia + '</p>'
							;


							--select @tableHTML

				IF @_TipoTrack_ = 1
				BEGIN
					SET @CorreosCopia += 'ulises.uribe@tractozone.com.mx;auxiliar.contabilidadpj@tractozone.com.mx;'

					EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'
					, @recipients='comercio.exterior2@tractozone.com.mx;comercio.exterior@tractozone.com.mx;zulma.garcia@tractozone.com.mx'
					, @copy_recipients = @CorreosCopia
					, @blind_copy_recipients='halconet@tractozone.com.mx;'
					, @subject = 'Creacion de Folio Tracking importacion - CTRZ', @importance= 'High', @body = @tableHTML, @body_format = 'HTML'; 
				END
				--ELSE IF @_TipoTrack_ = 2
				--BEGIN
				--	SET @CorreosCopia += 'leticia.aguilar@tractozone.com.mx;'

				--	EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'
				--	, @recipients= @CorreoPrincipal
				--	--, @copy_recipients = @CorreosCopia
				--	, @blind_copy_recipients='halconet@tractozone.com.mx;'
				--	, @subject = 'Creacion de Folio Tracking Nacional', @importance= 'High', @body = @tableHTML, @body_format = 'HTML'; 
				--END

				DECLARE @_TipoTrack int = -1
				SET @_TipoTrack = (SELECT TOP 1 nTipoTracking FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking)

				IF @_TipoTrack =  2 -- ES UN TRACKING NACIONAL POR TANTO DEBE NOTIFICARSE A LOS PLANEADORES DE COMPRA QUE YA ESTA EL TRACKING Y PUEDEN SUBIR SU ARCHIVO DE REPARTICION
				BEGIN
					DECLARE @_CodComprador varchar(50), @_NomComprador varchar(500), @_CorreoComprador varchar(MAX)
					
					--DECLARE lineas_cursor CURSOR FOR  					
					--SELECT F.Code[CodigoComprador], F.Name, F.U_Correo
					--	FROM logistics.Tracking_Encabezado A
					--	INNER JOIN logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking
					--	INNER JOIN SBOCTRZ.dbo.OPCH C ON C.DocEntry = B.DocEntrySAP AND C.DocType = 'I'
					--	LEFT JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
					--	INNER JOIN SBOCTRZ.dbo.OITM D ON D.ItemCode = CC.ItemCode
					--	INNER JOIN SBOCTRZ.dbo.OITB E ON E.ItmsGrpCod = D.ItmsGrpCod
					--	 LEFT JOIN [SBOCTRZ].[dbo].[@HNT_COMPRADOR] F ON F.Code = E.U_Comprador
					--	WHERE A.nIdTracking = @IdTracking
					--	GROUP BY F.Code, F.Name, F.U_Correo
					--OPEN lineas_cursor
					--FETCH NEXT FROM lineas_cursor INTO @_CodComprador, @_NomComprador, @_CorreoComprador
					--IF @@FETCH_STATUS <> 0 
					--	PRINT '<<None>>'   
					--WHILE @@FETCH_STATUS = 0
					--BEGIN
						
					--	SET @tableHTML = 
					--	'<style>
					--	body,p {font-family: Arial, Helvetica, sans-serif;}
					--	table {font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 12px; text-align: left; border: 1px solid white; }
					--	th { text-align: left; }
					--	td { text-align: right; padding: 8px; background: #BDBDBD; border-bottom: 1px solid #fff; color: #000000; border-top: 1px solid transparent; }
					--	tr:hover td { background: #d0dafd; color: #339; }
					--	</style>
					--	<p>Se notifica de la creación de un folio tracking - factura reserva para el cual ya puede agregar documento de repartición si fuese necesario.' + '</p>
					--	'

					--	SET @tableHTML += '<p>Detalle:</p>' +  
					--	N'<table style="padding: 5px;"><body>' +  
					--	N'<tr style = "font-size: 6px;">
					--	<th style = "text-align:left; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Folio tracking</th>
					--	<th style = "text-align:left; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Factura</th>
					--	<th style = "text-align:left; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Articulo</th>
					--	<th style = "text-align:left; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:100px;">Linea</th>
					--	<th style = "text-align:rigth; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:150px;">Comprador</th>
					--	'
					--	+
					--	+
					--	CAST ((SELECT 
					--	    td = ISNULL(CAST(@IdTracking AS VARCHAR(50)),'---'), ''
					--	, td = ISNULL(CAST(C.DocNum AS VARCHAR(50)),'---'), ''
					--	, td = ISNULL(CAST(D.ItemCode AS VARCHAR(500)),'---'), ''
					--	, td = ISNULL(CAST(E.ItmsGrpNam AS VARCHAR(500)),'---'), '' 
					--	, td = ISNULL(CAST(F.Name AS VARCHAR(500)),'---'), '' 
					--	FROM logistics.Tracking_Encabezado A
					--	INNER JOIN logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking
					--	INNER JOIN SBOCTRZ.dbo.OPCH C ON C.DocEntry = B.DocEntrySAP AND C.DocType = 'I'
					--	LEFT JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
					--	INNER JOIN SBOCTRZ.dbo.OITM D ON D.ItemCode = CC.ItemCode
					--	INNER JOIN SBOCTRZ.dbo.OITB E ON E.ItmsGrpCod = D.ItmsGrpCod
					--		LEFT JOIN [SBOCTRZ].[dbo].[@HNT_COMPRADOR] F ON F.Code = E.U_Comprador
					--	WHERE A.nIdTracking = @IdTracking AND E.U_Comprador = @_CodComprador
					--	FOR XML PATH('tr'), TYPE) AS NVARCHAR(MAX))
					--	+						
					--	N'</body></table>' 

					--	IF @_CodComprador = '04'
					--		SET @_CorreoComprador += ';monica.jimenez@tractozone.com.mx;'

					--	--SE INACTIVA SOL LETICIA 2023-05-10 CORREO 2023-05-08
					--	EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'
					--		, @recipients= @_CorreoComprador-- 'comercio.exterior2@tractozone.com.mx;comercio.exterior@tractozone.com.mx;luis.cervantes@tractozone.com.mx'
					--		, @copy_recipients = @CorreosCopia
					--		, @blind_copy_recipients='halconet@tractozone.com.mx;'
					--		, @subject = 'Creacion de Folio Tracking Nacional - Factura reserva', @importance= 'High', @body = @tableHTML, @body_format = 'HTML'; 

					--	FETCH NEXT FROM lineas_cursor
					--	INTO @_CodComprador, @_NomComprador, @_CorreoComprador
					--END
					--CLOSE lineas_cursor;  
					--DEALLOCATE lineas_cursor; 

					DECLARE @CorreoSupervisorReciboEmbarques nvarchar(max),
							@IdTrackingDPJ int;

					DECLARE lineas_cursor CURSOR FOR  					
					--SELECT F.Code[CodigoComprador], F.Name, F.U_Correo
					--FROM logistics.Tracking_Encabezado A
					--INNER JOIN logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking
					--INNER JOIN SBOCTRZ.dbo.OPCH C ON C.DocEntry = B.DocEntrySAP AND C.DocType = 'I'
					--LEFT JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
					--INNER JOIN SBOCTRZ.dbo.OITM D ON D.ItemCode = CC.ItemCode
					--INNER JOIN SBOCTRZ.dbo.OITB E ON E.ItmsGrpCod = D.ItmsGrpCod
					--	LEFT JOIN [SBOCTRZ].[dbo].[@HNT_COMPRADOR] F ON F.Code = E.U_Comprador
					--WHERE A.nIdTracking = @IdTracking
					--GROUP BY F.Code, F.Name, F.U_Correo, C.U_Comentarios
					SELECT 
						F.Code[CodigoComprador], F.Name, F.U_Correo
					FROM logistics.Tracking_Encabezado A
					INNER JOIN logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking
					LEFT JOIN SBOCTRZ.dbo.OPCH C ON C.NumAtCard = B.sFactura AND C.DocType = 'I'
					LEFT JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
					INNER JOIN SBOCTRZ.dbo.OITM D ON D.ItemCode = CC.ItemCode	
					--INNER JOIN SBOCTRZ.dbo.OITB E ON E.ItmsGrpCod = D.ItmsGrpCod
					--LEFT JOIN [SBOCTRZ].[dbo].[@HNT_COMPRADOR] F ON F.Code = E.U_Comprador	
					INNER JOIN SBOCTRZ.dbo.OCRD E ON E.CardCode = D.CardCode
					LEFT JOIN [SBOCTRZ].[dbo].[@HNT_COMPRADOR] F ON F.Code = E.U_VLGX_PLC	
					WHERE A.nIdTracking = @IdTracking
					GROUP BY F.Code, F.Name, F.U_Correo

					OPEN lineas_cursor
					FETCH NEXT FROM lineas_cursor INTO @_CodComprador, @_NomComprador, @_CorreoComprador
					IF @@FETCH_STATUS <> 0 
						PRINT '<<None>>'   
					WHILE @@FETCH_STATUS = 0
					BEGIN

						--SELECT @_CodComprador, @_NomComprador, @_CorreoComprador, @IdTracking;

						SET @AlmacenTrackingLlega = (SELECT TOP 1 sCodAlmacenDestino FROM HNT_TRZ.logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking)	
						--SET @CorreoAlmacen = (SELECT TOP 1 Correo FROM HNT.Usuarios where ROL = 16 AND Almacen = (SELECT TOP 1 sCodAlmacenDestino FROM HNT_TRZ.logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking));
						--SET @CorreoAlmacen = (SELECT  STRING_AGG(Correo, '; ') WITHIN GROUP (ORDER BY Correo)  FROM HNT.Usuarios where ROL = 16 AND Activo='Y' AND Almacen = (SELECT TOP 1 sCodAlmacenDestino FROM HNT_TRZ.logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking));
						--SET @CorreoSupervisorReciboEmbarques = (SELECT  STRING_AGG(Correo, '; ') WITHIN GROUP (ORDER BY Correo)  FROM HNT.Usuarios where ROL = 59 AND Activo='Y' AND Almacen = (SELECT TOP 1 sCodAlmacenDestino FROM HNT_TRZ.logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking));
						SET @CorreoAlmacen = (SELECT  STRING_AGG(Correo, '; ') WITHIN GROUP (ORDER BY Correo)  FROM HNT.Usuarios where ROL = 16 AND Activo='Y' AND Almacen = (SELECT TOP 1 sCodAlmacenDestino FROM HNT_TRZ.logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking));
						SET @CorreoSupervisorReciboEmbarques = (SELECT  STRING_AGG(Correo, '; ') WITHIN GROUP (ORDER BY Correo)  FROM HNT.Usuarios where ROL = 59 AND Activo='Y' AND Almacen = (SELECT TOP 1 sCodAlmacenDestino FROM HNT_TRZ.logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking));
	
						--SELECT @AlmacenTrackingLlega;

						--IF ISNULL(@AlmacenTrackingLlega,'') = '01'
						--	SET @CorreoAlmacen = 'ctrz.recibopue@gmail.com;'
						--ELSE IF ISNULL(@AlmacenTrackingLlega,'') = '02'
						--	SET @CorreoAlmacen = 'almacen.mtypj2@gmail.com;'
						--ELSE IF ISNULL(@AlmacenTrackingLlega,'') = 'E2'
						--	SET @CorreoAlmacen = 'recibo.cedispj@gmail.com;'

						--IF ISNULL(@AlmacenTrackingLlega,'') = '01'
						--	SET @CorreoSupervisorReciboEmbarques = 'ctrz.recibopue@gmail.com;'
						--ELSE IF ISNULL(@AlmacenTrackingLlega,'') = '02'
						--	SET @CorreoSupervisorReciboEmbarques = 'almacen.mtypj2@gmail.com;'
						--ELSE IF ISNULL(@AlmacenTrackingLlega,'') = 'E2'
						--	SET @CorreoSupervisorReciboEmbarques = 'recibo.cedispj@gmail.com;'

						--SELECT @CorreoAlmacen 'Correo Gerente Almacen';
						--SELECT @CorreoSupervisorReciboEmbarques 'Correo Supervisor de Recibo y Embarques';

						--DECLARE @NomAlmacenDestTr varchar(500) = '';
		
						--SET  @NomAlmacenDestTr = (SELECT TOP 1 sCodAlmacenDestino + ' | ' + B.WhsName FROM HNT_TRZ.logistics.Tracking_Encabezado A
						--							INNER JOIN SBOCTRZ.dbo.OWHS B ON B.WhsCode = A.sCodAlmacenDestino WHERE nIdTracking = @IdTracking)
	
						--SELECT @NomAlmacenDestTr;

						SET @IdTrackingDPJ = (SELECT 
							C.U_Comentarios
						FROM logistics.Tracking_Encabezado A
						INNER JOIN logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking
						INNER JOIN SBOCTRZ.dbo.OPCH C ON C.DocEntry = B.DocEntrySAP AND C.DocType = 'I'
						WHERE A.nIdTracking = @IdTracking);

						--SELECT * FROM Halconet.logistics.Tracking_Contenedores WHERE nIdTracking=47941;

						--AND E.U_Comprador = @_CodComprador
						
						SET @tableHTML = 
						'<style>
						body,p {font-family: Arial, Helvetica, sans-serif;}
						table {font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 12px; text-align: center; border: 1px solid white; }
						th { text-align: center; }
						td { text-align: center; padding: 8px; background: #BDBDBD; border-bottom: 1px solid #fff; color: #000000; border-top: 1px solid transparent; }
						tr:hover td { background: #d0dafd; color: #339; }
						</style>
						<p>Se notifica de la creación de un folio tracking - factura reserva para el cual ya puede agregar documento de repartición si fuese necesario.' + '</p>
						'

						SET @tableHTML += '<p>Detalle:</p>' +  
						N'<table style="padding: 5px;text-align: center;"><body>' +  
						N'<tr style = "font-size: 6px;">
						<th style = "text-align:center; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Folio tracking</th>
						<th style = "text-align:center; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Factura Proveedor CTRZ</th>
						<th style = "text-align:center; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:70px;">Articulo</th>
						<th style = "text-align:center; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:100px;">Cantidad</th>
						<th style = "text-align:center; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:150px;">Comprador</th>
						<th style = "text-align:center; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:150px;">Contenedores</th>
						<th style = "text-align:center; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:150px;">Facturas DPJ</th>
						<th style = "text-align:center; font-size: 13px; font-weight: normal; padding: 8px; background: #0B2161; border-top: 4px solid #aabcfe; border-bottom: 1px solid #fff; color: #FFFFFF;Width:150px;">Tipo</th>
						'
						+		
						CAST ((
							SELECT 
								td = ISNULL(CAST(A.nIdTracking AS VARCHAR(50)), '---'), ''
								, td = ISNULL(CAST(C.NumAtCard AS VARCHAR(50)), '---'), ''
								, td = ISNULL(CAST(D.ItemCode AS VARCHAR(500)), '---'), ''
								--, td = ISNULL(CC.Quantity, 0), '' 
								, td = ISNULL(CAST(CC.Quantity AS INT), 0), '' -- Conversión a entero
								, td = ISNULL(CAST(F.Name AS VARCHAR(500)), '---'), ''
								, td = ISNULL((
									SELECT STRING_AGG(TC.sContenedor, ', ') WITHIN GROUP (ORDER BY TC.sContenedor) 
									FROM Halconet.logistics.Tracking_Contenedores TC
									WHERE TC.nIdTracking = @IdTrackingDPJ
								), ''), ''
								, td = ISNULL((
									SELECT STRING_AGG(TC.sFactura, ', ') WITHIN GROUP (ORDER BY TC.sFactura) 
									FROM Halconet.logistics.Tracking_Facturas TC
									WHERE TC.nIdTracking = @IdTrackingDPJ
								), ''), ''
								, td = CASE 				
									WHEN I.Zona = 'NACIONAL' THEN 'Nacional'															
									WHEN I.Zona <> 'NACIONAL' THEN 'Importación'															
								END, ''
							FROM logistics.Tracking_Encabezado A
							INNER JOIN logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking
							INNER JOIN SBOCTRZ.dbo.OPCH C ON C.DocEntry = B.DocEntrySAP AND C.DocType = 'I'
							LEFT JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
							INNER JOIN SBOCTRZ.dbo.OITM D ON D.ItemCode = CC.ItemCode			
							INNER JOIN SBOCTRZ.dbo.OCRD E ON E.CardCode = D.CardCode
							INNER JOIN SBOCTRZ.dbo.OITB EB ON EB.ItmsGrpCod = D.ItmsGrpCod
							LEFT JOIN [SBOCTRZ].[dbo].[@HNT_COMPRADOR] F ON F.Code = E.U_VLGX_PLC	
							INNER JOIN [HNT_TRZ].[purchase].[VW_OrigenProveedor] I ON I.CardCode = D.CardCode
							WHERE A.nIdTracking = @IdTracking AND E.U_VLGX_PLC = @_CodComprador
							FOR XML PATH('tr'), TYPE
						) AS NVARCHAR(MAX))
						+						
						N'</body></table>' 	
						--+ '<div style="padding-top: 25px;"><strong>Información solo para PRUEBAS:</strong><p> <strong>- Almacén:</strong> ' + @NomAlmacenDestTr 
						--+ '<br> - <strong>Correo Comprador:</strong> ' + ISNULL(@_CorreoComprador , '')
						--+ '<br> - <strong>Correo Jéfe de Almacén:</strong> ' + ISNULL(@CorreoAlmacen, '') 
						--+ ' <br>  - <strong>Correos de Supervisores de Recibos y Embarques:</strong> ' + ISNULL(@CorreoSupervisorReciboEmbarques, '') + '</p></div>'	

						IF @_CodComprador = '04'
						SET @_CorreoComprador += ';monica.jimenez@tractozone.com.mx;'


						DECLARE @recipients_nuevotracking NVARCHAR(MAX) = ''; 
						SET @recipients_nuevotracking += ISNULL(@_CorreoComprador + ';', ''); 
						SET @recipients_nuevotracking += ISNULL(@CorreoAlmacen + ';', ''); 
						SET @recipients_nuevotracking += ISNULL(@CorreoSupervisorReciboEmbarques, '');

						--SELECT @recipients_nuevotracking;

						EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'    
						--, @recipients='bryan.martinez@tractozone.com.mx;'
						, @recipients=@recipients_nuevotracking
						--, @copy_recipients = 'bryan.martinez@tractozone.com.mx'
						, @copy_recipients = @CorreosCopia
						, @blind_copy_recipients = 'halconet@tractozone.com.mx;bryan.martinez@tractozone.com.mx'
						, @subject = 'Creación de Folio Tracking - CTRZ'
						, @importance = 'High'
						, @body = @tableHTML
						, @body_format = 'HTML';


						FETCH NEXT FROM lineas_cursor
						INTO @_CodComprador, @_NomComprador, @_CorreoComprador
					END
					CLOSE lineas_cursor;  
					DEALLOCATE lineas_cursor; 
					
				END
	END

	IF @TipoConsulta = 21
	BEGIN
		SELECT 'Parcial'[Codigo], 'Parcial'[Nombre]
		UNION ALL
		SELECT 'Completo'[Codigo], 'Completo'[Nombre]
	END

	IF @TipoConsulta = 22
	BEGIN
		SET @CorreoPrincipal = 'ulises.uribe@tractozone.com.mx;auxiliar.contabilidadpj@tractozone.com.mx;'
		SET @CorreosCopia = 'lizbeth.wences@tractozone.com.mx;comercio.exterior2@tractozone.com.mx;comercio.exterior@tractozone.com.mx;'

		IF @Opc = 1
		BEGIN
			SET @tableHTML = 
					'<style>
						body,p {font-family: Arial, Helvetica, sans-serif;}
						table {font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 12px; text-align: left; border: 1px solid white; }
						th { text-align: left; }
						td { text-align: right; padding: 8px; background: #BDBDBD; border-bottom: 1px solid #fff; color: #000000; border-top: 1px solid transparent; }
						tr:hover td { background: #d0dafd; color: #339; }
						</style>
						<p>Se notifica que el estatus de la documentación del Folio No. ' + CAST(@IdTracking AS varchar(50)) + ' es ''Parcial''</p>
						<p>No de pedimento: ' + CAST(@Pedimento AS VARCHAR(50)) + '</p>
						<p>No. de tracking: ' + CAST(@IdTracking AS varchar(50))+ '</p>'

						--+ '<p>' + @CorreoPrincipal + @CorreosCopia + '</p>'
				--SE INACTIVA PARA IMPORTACION SOL LETICIA 10/05/2023 EN CORREO 2023-05-08
				EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'
					, @recipients= @CorreoPrincipal
					--, @copy_recipients = /*'pedro.juarez@tractozone.com.mx;*/@CorreosCopia
					, @blind_copy_recipients='halconet@tractozone.com.mx'
					, @subject = 'Estatus Documentacion Folio Tracking', @importance= 'High', @body = @tableHTML, @body_format = 'HTML';
		END
		ELSE IF @Opc = 2
		BEGIN
			SET @tableHTML = 
					'<style>
						body,p {font-family: Arial, Helvetica, sans-serif;}
						table {font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 12px; text-align: left; border: 1px solid white; }
						th { text-align: left; }
						td { text-align: right; padding: 8px; background: #BDBDBD; border-bottom: 1px solid #fff; color: #000000; border-top: 1px solid transparent; }
						tr:hover td { background: #d0dafd; color: #339; }
						</style>
						<p>Se notifica para fines de seguimiento que el estatus de la documentación del Folio No. ' + CAST(@IdTracking AS varchar(50)) + ' es ''Completo''</p>
						<p>No de pedimento: ' + CAST(@Pedimento AS VARCHAR(50)) + '</p>
						<p>No. de tracking: ' + CAST(@IdTracking AS varchar(50))+ '</p>'

						--+ '<p>' + @CorreoPrincipal + @CorreosCopia + '</p>'
			EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'
					, @recipients= @CorreoPrincipal
					--, @copy_recipients = /*'pedro.juarez@tractozone.com.mx;*/@CorreosCopia
					, @blind_copy_recipients='halconet@tractozone.com.mx'
					, @subject = 'Estatus Documentacion Folio Tracking', @importance= 'High', @body = @tableHTML, @body_format = 'HTML';
		END
	END

	IF @TipoConsulta = 23 --CONSULTA PARA DEVOLVER LOS PE Parciales
	BEGIN
		SELECT A.DocEntry, A.DocNum[No. Documento], A.DocDate[Fecha], A.CardCode[Cliente/Proveedor], A.SuppName[Nombre], A.Descr[Descripcion], A.DocCur[Moneda], A.DocTotal[Total]  
		--,A.DocRate
		INTO #PEParciales
		FROM SBOCTRZ.dbo.OIPF A
		WHERE 
		CAST(A.CreateDate AS DATE) BETWEEN @FechaInicio AND @FechaFin
		AND 
		A.U_EstadoEntrega = '01'

		SELECT * FROM #PEParciales

		SELECT 
		A.DocEntry, A.ItemCode[Articulo], A.Quantity[Cantidad], A.Currency[Moneda], A.Rate[Tipo Cambio] 
		FROM SBOCTRZ.dbo.IPF1 A
		WHERE A.DocEntry IN(SELECT DocEntry FROM #PEParciales)

		DROP TABLE #PEParciales
		--UPDATE SBOCTRZ.dbo.OIPF SET U_EstadoEntrega = '01' WHERE DocNum = 75
	END

	IF @TipoConsulta = 24
	BEGIN
		SET @CorreoPrincipal = 'compras4@tractozone.com.mx;'--'compras3@tractozone.com.mx;'
		--SET @CorreosCopia = 'lizbeth.wences@tractozone.com.mx;'
		SET @CorreosCopia = 'halconet@tractozone.com.mx;leticia.aguilar@tractozone.com.mx;compras3@tractozone.com.mx;'

		SET @CorreoAlmacen = (SELECT TOP 1 Correo FROM HNT.Usuarios where ROL = 16 AND Almacen = 
				(SELECT TOP 1 sCodAlmacenDestino FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking)
				)


		IF @CorreoAlmacen <> ''
			SET @CorreosCopia += @CorreoAlmacen + ';'

		
		SET @CorreoAlmacen = ''
		SET @AlmacenTrackingLlega = (SELECT TOP 1 sCodAlmacenDestino FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking)
		IF ISNULL(@AlmacenTrackingLlega,'') = '01'
			SET @CorreoAlmacen = 'recepcionmaterial@hotmail.com;'
		ELSE IF ISNULL(@AlmacenTrackingLlega,'') = '02'
			SET @CorreoAlmacen = 'almacen.mtypj2@gmail.com;'
		ELSE IF ISNULL(@AlmacenTrackingLlega,'') = 'E2'
			SET @CorreoAlmacen = 'recibo.cedispj@gmail.com;'

		IF @CorreoAlmacen <> ''
			SET @CorreosCopia += @CorreoAlmacen + ';'

		SET @tableHTML = 
						'<style>
							body,p {font-family: Arial, Helvetica, sans-serif;}
							table {font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 12px; text-align: left; border: 1px solid white; }
							th { text-align: left; }
							td { text-align: right; padding: 8px; background: #BDBDBD; border-bottom: 1px solid #fff; color: #000000; border-top: 1px solid transparent; }
							tr:hover td { background: #d0dafd; color: #339; }
							</style>
							<p>Se notifica de un adjunto de reparticion en el modulo de TRACKING para el folio: ' + CAST(@IdTracking as varchar(50)) + ', verifique que sea correcto para su seguimiento correspondiente. </p>
							'
							--+ '<p>' + @CorreoPrincipal + @CorreosCopia + '</p>'
							--select @tableHTML
				--EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'
				----, @recipients='pedro.juarez@tractozone.com.mx;'
				--, @recipients=/*'pedro.juarez@tractozone.com.mx;'*/@CorreoPrincipal
				--, @copy_recipients = /*'pedro.juarez@tractozone.com.mx;*/@CorreosCopia
				--, @blind_copy_recipients='halconet@tractozone.com.mx'
				--, @subject = 'Ajunto archivo reparticion en Tracking', @importance= 'High', @body = @tableHTML, @body_format = 'HTML'; 
	END

	IF @TipoConsulta = 25
	BEGIN
		SET @CorreoPrincipal = 'halconet@tractozone.com.mx;' --'compras3@tractozone.com.mx;compras4@tractozone.com.mx;'
		SET @CorreosCopia = 'lizbeth.wences@tractozone.com.mx;'
		--SET @CorreosCopia += 'compras3@tractozone.com.mx;compras4@tractozone.com.mx;leticia.aguilar@tractozone.com.mx'

		SET @CorreoAlmacen = (SELECT TOP 1 Correo FROM HNT.Usuarios where ROL = 16 AND Almacen = 
				(SELECT TOP 1 sCodAlmacenDestino FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking)
				)
		DECLARE @NomAlmacenDestTr varchar(500) = ''
		
		SET  @NomAlmacenDestTr = (SELECT TOP 1 sCodAlmacenDestino + ' | ' + B.WhsName FROM logistics.Tracking_Encabezado A
									INNER JOIN SBOCTRZ.dbo.OWHS B ON B.WhsCode = A.sCodAlmacenDestino WHERE nIdTracking = @IdTracking)

		IF @CorreoAlmacen <> ''
			SET @CorreosCopia += @CorreoAlmacen + ';'

		SET @CorreoAlmacen = ''
		SET @AlmacenTrackingLlega = (SELECT TOP 1 sCodAlmacenDestino FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking)
		IF ISNULL(@AlmacenTrackingLlega,'') = '01'
			SET @CorreoAlmacen = 'recepcionmaterial@hotmail.com;'
		ELSE IF ISNULL(@AlmacenTrackingLlega,'') = '02'
			SET @CorreoAlmacen = 'almacen.mtypj2@gmail.com;'
		ELSE IF ISNULL(@AlmacenTrackingLlega,'') = 'E2'
			SET @CorreoAlmacen = 'recibo.cedispj@gmail.com;'

		IF @CorreoAlmacen <> ''
			SET @CorreosCopia += @CorreoAlmacen + ';'

		IF @Opc = 1
		BEGIN
			SET @tableHTML = 
							'<style>
								body,p {font-family: Arial, Helvetica, sans-serif;}
								table {font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 12px; text-align: left; border: 1px solid white; }
								th { text-align: left; }
								td { text-align: right; padding: 8px; background: #BDBDBD; border-bottom: 1px solid #fff; color: #000000; border-top: 1px solid transparent; }
								tr:hover td { background: #d0dafd; color: #339; }
								</style>
								<p>Se notifica de la creacion de un traspaso con precios parciales con relacion a un adjunto de reparticion en el modulo de importacion para el folio tracking ' + CAST(@IdTracking as varchar(50)) 
								+ ', verifique que sea correcto para su seguimiento correspondiente. </p>'
								+ '<p>Almacen Destino: ' + ISNULL(@NomAlmacenDestTr ,'') + '</p>'
								+ '<p>No traspaso: ' + CAST(@NoTraspaso as varchar(50)) + '</p>'
								+ '<p>No PE: ' + CAST(@NoPE as varchar(50)) + '</p>'

								--+ '<p>' + @CorreoPrincipal + @CorreosCopia + '</p>'
								
								--select @tableHTML
					EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'
					--, @recipients='pedro.juarez@tractozone.com.mx;'
					, @recipients=/*'pedro.juarez@tractozone.com.mx;'*/@CorreoPrincipal
					, @copy_recipients = /*'pedro.juarez@tractozone.com.mx;'*/@CorreosCopia
					, @blind_copy_recipients='halconet@tractozone.com.mx'
					, @subject = 'Traspaso con PE parciales', @importance= 'High', @body = @tableHTML, @body_format = 'HTML'; 
		END
		ELSE IF @Opc = 2
		BEGIN
			SET @CorreosCopia += 'compras3@tractozone.com.mx;compras4@tractozone.com.mx;leticia.aguilar@tractozone.com.mx'

			SET @tableHTML = 
						'<style>
							body,p {font-family: Arial, Helvetica, sans-serif;}
							table {font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 12px; text-align: left; border: 1px solid white; }
							th { text-align: left; }
							td { text-align: right; padding: 8px; background: #BDBDBD; border-bottom: 1px solid #fff; color: #000000; border-top: 1px solid transparent; }
							tr:hover td { background: #d0dafd; color: #339; }
							</style>
							<p>Se notifica de la creacion de un traspaso con precios definitos con relacion a un adjunto de reparticion en el modulo de importacion para el folio tracking ' + CAST(@IdTracking as varchar(50)) 
							+ ', verifique que sea correcto para su seguimiento correspondiente. </p>'
							+ '<p>Almacen Destino: ' + ISNULL(@NomAlmacenDestTr,'') + '</p>'
							+ '<p>No traspaso: ' + CAST(@NoTraspaso as varchar(50)) + '</p>'
							+ '<p>No PE: ' + CAST(@NoPE as varchar(50)) + '</p>'

							--+ '<p>' + @CorreoPrincipal + @CorreosCopia + '</p>'
							
								--select @tableHTML
					EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'
					--, @recipients='pedro.juarez@tractozone.com.mx;'
					, @recipients=/*'pedro.juarez@tractozone.com.mx;*/@CorreoPrincipal
					, @copy_recipients = /*'pedro.juarez@tractozone.com.mx;*/@CorreosCopia
					, @blind_copy_recipients='halconet@tractozone.com.mx'
					, @subject = 'Traspaso con PE definitivos', @importance= 'High', @body = @tableHTML, @body_format = 'HTML'; 
		END
		ELSE IF @Opc = 3
		BEGIN
			SET @tableHTML = 
						'<style>
							body,p {font-family: Arial, Helvetica, sans-serif;}
							table {font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 12px; text-align: left; border: 1px solid white; }
							th { text-align: left; }
							td { text-align: right; padding: 8px; background: #BDBDBD; border-bottom: 1px solid #fff; color: #000000; border-top: 1px solid transparent; }
							tr:hover td { background: #d0dafd; color: #339; }
							</style>
							<p>Se notifica de la creacion de un traspaso sin especificar el tipo de PE con relacion a un adjunto de reparticion en el modulo de importacion para el folio tracking ' + CAST(@IdTracking as varchar(50)) 
							+ ', verifique que sea correcto para su seguimiento correspondiente. </p>'
							+ '<p>Almacen Destino: ' + ISNULL(@NomAlmacenDestTr,'') + '</p>'
							+ '<p>No traspaso: ' + CAST(@NoTraspaso as varchar(50)) + '</p>'
							+ '<p>No PE: ' + CAST(@NoPE as varchar(50)) + '</p>'
							
							--+ '<p>' + @CorreoPrincipal + @CorreosCopia + '</p>'
								--select @tableHTML
					EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'
					--, @recipients='pedro.juarez@tractozone.com.mx;'
					, @recipients=/*'pedro.juarez@tractozone.com.mx;*/@CorreoPrincipal
					, @copy_recipients = /*'pedro.juarez@tractozone.com.mx;*/@CorreosCopia
					, @blind_copy_recipients='halconet@tractozone.com.mx'
					, @subject = 'Traspaso con PE NO definidos', @importance= 'High', @body = @tableHTML, @body_format = 'HTML'; 
		END
		ELSE IF @Opc = 4
		BEGIN
			SET @tableHTML = 
						'<style>
							body,p {font-family: Arial, Helvetica, sans-serif;}
							table {font-family: "Lucida Sans Unicode", "Lucida Grande", Sans-Serif; font-size: 12px; text-align: left; border: 1px solid white; }
							th { text-align: left; }
							td { text-align: right; padding: 8px; background: #BDBDBD; border-bottom: 1px solid #fff; color: #000000; border-top: 1px solid transparent; }
							tr:hover td { background: #d0dafd; color: #339; }
							</style>
							<p>Se notifica de la creacion de un traspaso desde el modulo de importacion para el folio tracking ' 
							+ ISNULL(CAST(@IdTracking as varchar(50)),'') 
							+ ', verifique que sea correcto para su seguimiento correspondiente. </p>'
							+ '<p>Almacen Destino: ' + ISNULL(@NomAlmacenDestTr,'') + '</p>'
							+ '<p>No traspaso: ' + ISNULL(CAST(@NoTraspaso as varchar(50)),'') + '</p>'
							+ '<p>No PE: ' + ISNULL(CAST(@NoPE as varchar(50)),'') + '</p>'
							
							--+ '<p>' + @CorreoPrincipal + @CorreosCopia + '</p>'
								--select @tableHTML
					EXEC msdb.dbo.sp_send_dbmail @profile_name = 'Correo Halconet'
					--, @recipients='pedro.juarez@tractozone.com.mx;'
					, @recipients=/*'pedro.juarez@tractozone.com.mx;*/@CorreoPrincipal
					, @copy_recipients = /*'pedro.juarez@tractozone.com.mx;*/@CorreosCopia
					, @blind_copy_recipients='halconet@tractozone.com.mx;'
					, @subject = 'Traspaso desde Tracking', @importance= 'High', @body = @tableHTML, @body_format = 'HTML'; 
		END

	END

	IF @TipoConsulta = 26
	BEGIN
		
		IF @Opc = 1
		BEGIN
			INSERT INTO logistics.Tracking_FacturasComprobar (nIdTracking, sConcepto, mMonto, sMoneda, nIdUsuario, dFechaAlta, bActivo)
															   VALUES (@IdTracking, @Concepto, @Monto, @Moneda, @IdUsuario, GETDATE(), 1)
		END
		ELSE IF @Opc = 2
		BEGIN
			SELECT nID, nIdTracking, sConcepto[Concepto], mMonto[Monto], sMoneda[Moneda] FROM logistics.Tracking_FacturasComprobar 
			WHERE nIdTracking = @IdTracking AND bActivo = 1
		END
		ELSE IF @Opc = 3
		BEGIN
			UPDATE logistics.Tracking_FacturasComprobar
			SET bActivo = 0 WHERE nID = @ID
		END
	END

	IF @TipoConsulta = 27
	BEGIN
	----	--OBJTYPE = 22 OC, OBJTYPE = 18 FR
	--	SELECT 2[nTipoTracking], CASE WHEN T0.NoOC>1 THEN T0.DocDate ELSE 
	--	DATEADD(DAY, 
	--	ISNULL((Select
	--		ISNULL(A0.dTrayecto, 0) /*dTrayecto,*/ + ISNULL(A0.dLiberacion, 0) /*dLiberacion,*/
	--	From 
	--		[HNT_TRZ].logistics.ArribosDiasCompras A0
	--		JOIN [SBOCTRZ].dbo.OCRD B0 ON A0.CardCode = B0.CardCode
	--		WHERE B0.CardCode = T0.CardCode
	--	),0)
	--	,T0.DocDate)  END[dFechaArribo]
	--	, 1[nIdUsuarioCreo], 'Parcial'[sEstatusDoc], T0.NumAtCard[DocNum], T0.DocEntry[DocEntryFR], T0.DocNum[DocNumFR], T0.NoOC, T0.OC, t0.Destino
	--	FROM(
	--		SELECT A.DocEntry, A.DocNum, A.DocDate, A.CardCode, A.CardName, A.NumAtCard, A.DocCur, A.DocRate, A.DocTotal, A.ObjType, A.Comments, A.UserSign
	--		,[PJ-FLOT].dbo.SinComaFinal((
	--		SELECT CAST(C0.DocNum AS VARCHAR(50)) + ',' FROM SBOCTRZ.dbo.OPCH A0
	--		INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
	--		INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
	--		INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry
	--		WHERE A0.DocEntry = A.DocEntry
	--		GROUP BY C0.DocNum
	--		FOR XML PATH('')))[OC]
	--		,(
	--		SELECT COUNT(DISTINCT C1.DocEntry) FROM SBOCTRZ.dbo.OPCH A0
	--		INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
	--		INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
	--		INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry
	--		WHERE A0.DocEntry = A.DocEntry
		
	--		)[NoOC]
	--		,(
	--		SELECT MAX(C0.DocDate) FROM SBOCTRZ.dbo.OPCH A0
	--		INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
	--		INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
	--		INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry
	--		WHERE A0.DocEntry = A.DocEntry
		
	--		)[FArriboCompra]
	--		,(
	--		SELECT TOP 1 C1.WhsCode FROM SBOCTRZ.dbo.OPCH A0
	--		INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
	--		INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
	--		INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry
	--		WHERE A0.DocEntry = A.DocEntry ORDER BY C1.DocEntry, C1.LineNum
		
	--		)[Destino]
	--		FROM SBOCTRZ.dbo.OPCH A
			
	--		WHERE CAST(A.CreateDate AS date) BETWEEN CAST(GETDATE() AS date) AND CAST(GETDATE() AS date) AND A.isIns = 'Y'
	--		AND A.CardCode IN (SELECT CardCode FROM purchase.ProveedoresTracking)
	--		GROUP BY A.DocEntry, A.DocNum, A.DocDate, A.CardCode, A.CardName, A.NumAtCard, A.DocCur, A.DocRate, A.DocTotal, A.ObjType, A.Comments, A.UserSign
	--		)T0
	--		WHERE T0.DocEntry 
	--		NOT IN(
	--		SELECT B.DocEntrySAP FROM Logistics.Tracking_Encabezado A
	--		INNER JOIN Logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking
	--		AND A.nTipoTracking = 2 
	--		AND B.DocEntrySAP IS NOT NULL
	--		)
	--		AND T0.Destino IN('01','02','03','04','05','06','07','11','12','13','14','E1','E2','T 197','15','16','17','18','19','20','21')--IN('01','E2') --pregunté a Leticia sobre anexar bodega 20 confirmo hacerlo
		
	--	--SE NOTIFICAN AQUELLOS PE QUE NO SE HAYAN GENERADO Y QUE APLICAN CON PROPIEDAD 43 DE PROVEEDORES

	SELECT *
	INTO #TmpProveedoresMty
	FROM (
	--
	SELECT '10338' CardCode , '02' Destino
	UNION ALL
	SELECT '10082', '02'
	UNION ALL
	SELECT '10103' , '02'
	UNION ALL
	SELECT '18827', '02'
	UNION ALL
	SELECT '18832', '02'
	UNION ALL
	SELECT '18834', '02'
	UNION ALL
	SELECT '18837', '02'
	UNION ALL
	SELECT  '18840', '02'
	UNION ALL
	SELECT  '18841', '02'
	UNION ALL
	SELECT '18842', '02'
	UNION ALL
	SELECT '10356', '02'
	UNION ALL 
	SELECT '10052', '02'
	UNION ALL 
	SELECT '10254', '02'
	UNION ALL 
	SELECT '10115', '02'
	) T0	
		--OBJTYPE = 22 OC, OBJTYPE = 18 FR
		SELECT 2[nTipoTracking], CASE WHEN T0.NoOC>1 THEN T0.DocDate ELSE 
		DATEADD(DAY, 
		ISNULL((Select
			ISNULL(A0.dTrayecto, 0) /*dTrayecto,*/ + ISNULL(A0.dLiberacion, 0) /*dLiberacion,*/
		From 
			[HNT_TRZ].logistics.ArribosDiasCompras A0
			JOIN [SBOCTRZ].dbo.OCRD B0 ON A0.CardCode = B0.CardCode
			WHERE B0.CardCode = T0.CardCode
		),0)
		,T0.DocDate)   /*T0.FArriboCompra*/ END[dFechaArribo]
		, 1[nIdUsuarioCreo], 'Parcial'[sEstatusDoc], T0.NumAtCard[DocNum], T0.DocEntry[DocEntryFR], T0.DocNum[DocNumFR], T0.NoOC, T0.OC, t0.Destino
		FROM(
			SELECT A.DocEntry, A.DocNum, A.DocDate, A.CardCode, A.CardName, A.NumAtCard, A.DocCur, A.DocRate, A.DocTotal, A.ObjType, A.Comments, A.UserSign
			,[PJ-FLOT].dbo.SinComaFinal((
			SELECT CAST(C0.DocNum AS VARCHAR(50)) + ',' FROM SBOCTRZ.dbo.OPCH A0
			INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
			INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
			INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry
			WHERE A0.DocEntry = A.DocEntry
			GROUP BY C0.DocNum
			FOR XML PATH('')))[OC]
			,(
			SELECT COUNT(DISTINCT C1.DocEntry) FROM SBOCTRZ.dbo.OPCH A0
			INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
			INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
			INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry
			WHERE A0.DocEntry = A.DocEntry
			--Group by C1.DocEntry
			)[NoOC]
			,(
			SELECT MAX(C0.DocDate) FROM SBOCTRZ.dbo.OPCH A0
			INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
			INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
			INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry
			WHERE A0.DocEntry = A.DocEntry
			--Group by C1.DocEntry
			)[FArriboCompra]
			--,(
			--SELECT TOP 1 C1.WhsCode FROM SBOCTRZ.dbo.OPCH A0
			--INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
			--INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
			--INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry
			--WHERE A0.DocEntry = A.DocEntry ORDER BY C1.DocEntry, C1.LineNum
			----Group by C1.DocEntry
			--)[Destino]
			,(
			SELECT TOP 1 
			CASE WHEN A0.CardCode = (SELECT CardCode fROM #TmpProveedoresMty TP WHERE TP.CardCode =  A0.CardCode) 
			     THEN  (SELECT Destino FROM #TmpProveedoresMty TP WHERE TP.CardCode =  A0.CardCode) 
				 ELSE C1.WhsCode  
			END 		
			FROM SBOCTRZ.dbo.OPCH A0
			INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
			INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
			INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry
			WHERE A0.DocEntry = A.DocEntry ORDER BY C1.DocEntry, C1.LineNum
			) [Destino]
			FROM SBOCTRZ.dbo.OPCH A
			--- LEFT JOIN SBOCTRZ.dbo.OCRD B ON B.CardCode = A.CardCode PONER EN PRODUCTIVO *DC
			--INNER JOIN [HNT_TRZ].[purchase].[VW_ZonaProveedor] C ON C.CardCode = A.CardCode 
			--AND ((C.Zona = 'NACIONAL') OR (C.CardCode IN(18827, 18828, 18831, 18832, 10061, 18905, 18834, 10105,
			--18837, 18839, 18840, 10194, 10066)))
			WHERE CAST(A.CreateDate AS date) BETWEEN CAST(GETDATE() AS date) AND CAST(GETDATE() AS date) AND A.isIns = 'Y'
			AND A.CardCode IN (SELECT CardCode FROM purchase.ProveedoresTracking)
			--AND B.QryGroup51 = 'N' PONER EN PRODUCTIVO *DC
			GROUP BY A.DocEntry, A.DocNum, A.DocDate, A.CardCode, A.CardName, A.NumAtCard, A.DocCur, A.DocRate, A.DocTotal, A.ObjType, A.Comments, A.UserSign
			)T0
			WHERE T0.DocEntry 
			NOT IN(
			SELECT B.DocEntrySAP FROM Logistics.Tracking_Encabezado A
			INNER JOIN Logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking
			AND A.nTipoTracking = 2 
			AND B.DocEntrySAP IS NOT NULL
			)
			AND T0.Destino IN('01','02','03','04','05','06','07','11','12','13','14','E1','E2','T 197','15','16','17','18','19','20','21','22','23','24')--IN('01','E2') --pregunté a Leticia sobre anexar bodega 20 confirmo hacerlo
			--SELECT * FROM SBOCTRZ.DBO.OWHS WHERE WHSCODE IN('01','02','03','04','05','06','07','11','12','13','14','E2')
		--SE NOTIFICAN AQUELLOS PE QUE NO SE HAYAN GENERADO Y QUE APLICAN CON PROPIEDAD 43 DE PROVEEDORES
	END

	IF @TipoConsulta = 28
	BEGIN
		SELECT TOP 5 nIdArchivo[nID], @IdTracking[nIdTracking], 'Factura Prov'[sTipo], Nombre[sNombre], Extension[sExtension], RutaArc[sRutaOrigen], Archivo[fArchivo], ''[sObservaciones]
		FROM [HNT-Files].dbo.File_CFDI_HNT_TRZ
		WHERE TipoDoc = 'Factura' AND DocEntry = @DocEntry
	END

	IF @TipoConsulta = 29
	BEGIN
		--OBJTYPE = 22 OC, OBJTYPE = 18 FR
		SELECT 2[nTipoTracking], CASE WHEN T0.NoOC>1 THEN T0.DocDate ELSE 
		DATEADD(DAY, 
		ISNULL((Select
			ISNULL(A0.dTrayecto, 0) /*dTrayecto,*/ + ISNULL(A0.dLiberacion, 0) /*dLiberacion,*/
		From 
			[HNT_TRZ].logistics.ArribosDiasCompras A0
			JOIN [SBOCTRZ].dbo.OCRD B0 ON A0.CardCode = B0.CardCode
			WHERE B0.CardCode = T0.CardCode
		),0)
		,T0.DocDate)   /*T0.FArriboCompra*/ END[dFechaArribo]
		, 1[nIdUsuarioCreo], 'Parcial'[sEstatusDoc], T0.NumAtCard[DocNum], T0.DocEntry[DocEntryFR], T0.DocNum[DocNumFR], T0.NoOC, T0.OC, t0.Destino
		FROM(
			SELECT A.DocEntry, A.DocNum, A.DocDate, A.CardCode, A.CardName, A.NumAtCard, A.DocCur, A.DocRate, A.DocTotal, A.ObjType, A.Comments, A.UserSign
			,[PJ-FLOT].dbo.SinComaFinal((
			SELECT CAST(C0.DocNum AS VARCHAR(50)) + ',' FROM SBOCTRZ.dbo.OPCH A0
			INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
			INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
			INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry 
			WHERE A0.DocEntry = A.DocEntry
			GROUP BY C0.DocNum
			FOR XML PATH('')))[OC]
			,(
			SELECT COUNT(DISTINCT C1.DocEntry) FROM SBOCTRZ.dbo.OPCH A0
			INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
			INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
			INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry 
			WHERE A0.DocEntry = A.DocEntry
			--Group by C1.DocEntry
			)[NoOC]
			,(
			SELECT MAX(C0.DocDate) FROM SBOCTRZ.dbo.OPCH A0
			INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
			INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
			INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry 
			WHERE A0.DocEntry = A.DocEntry
			--Group by C1.DocEntry
			)[FArriboCompra]
			,(
			SELECT TOP 1 C1.WhsCode FROM SBOCTRZ.dbo.OPCH A0
			INNER JOIN SBOCTRZ.dbo.PCH1 B0 ON B0.DocEntry = A0.DocEntry
			INNER JOIN SBOCTRZ.dbo.POR1 C1 ON C1.DocEntry = B0.BaseEntry
			INNER JOIN SBOCTRZ.dbo.OPOR C0 ON C0.DocEntry = C1.DocEntry 
			WHERE A0.DocEntry = A.DocEntry ORDER BY C1.DocEntry, C1.LineNum
			--Group by C1.DocEntry
			)[Destino]
			FROM SBOCTRZ.dbo.OPCH A
			--INNER JOIN [HNT_TRZ].[purchase].[VW_ZonaProveedor] C ON C.CardCode = A.CardCode 
			--AND ((C.Zona = 'NACIONAL') OR (C.CardCode IN(18827, 18828, 18831, 18832, 10061, 18905, 18834, 10105, 10229, --18829,
			--18837, 18839, 18840, 10194, 10066, 10016 /*Provs Chinos -->*/,10009, 15967, 10119, 15996, 18857, 4044, 10115  )))
			WHERE 
			A.DocNum in (
			200055557
		--200047269,200047270
) --8791 200004270 DOCNUM = 3249
			AND A.CardCode IN (SELECT CardCode FROM purchase.ProveedoresTracking)
			GROUP BY A.DocEntry, A.DocNum, A.DocDate, A.CardCode, A.CardName, A.NumAtCard, A.DocCur, A.DocRate, A.DocTotal, A.ObjType, A.Comments, A.UserSign
			)T0
			WHERE T0.DocEntry 
			NOT IN(
			SELECT B.DocEntrySAP FROM Logistics.Tracking_Encabezado A
			INNER JOIN Logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking
			AND A.nTipoTracking = 2 AND B.DocEntrySAP IS NOT NULL
			)
			AND T0.Destino IN('01','02','03','04','05','06','07','11','12','13','14','E1','E2','T 197','15','E3','16','17','18','19','20','21','22','23','24')-- anexo 20 autorizado por Leti
			order by DocNumFR
	END

	IF @TipoConsulta = 30
	BEGIN
		IF ISNULL(@Tipo,'') IN('RDC','GAD','FAC','OTR','PED','REP')
		BEGIN
			SELECT nID, nIdTracking, sTipo, sNombre, sExtension, fArchivo[Archivo], sRutaOrigen, dFechaAlta, sObservaciones 
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ
			WHERE nID = @ID

			--SELECT TOP 2 * FROM  [HNT-Files].dbo.File_CFDI Files_Tracking_HNT_TRZ
		END
	END

	/*
	TRUNCATE TABLE logistics.Tracking_Encabezado
	TRUNCATE TABLE logistics.Tracking_PuntosLlegada
	TRUNCATE TABLE logistics.Tracking_Facturas
	TRUNCATE TABLE logistics.Tracking_Contenedores
	TRUNCATE TABLE logistics.Tracking_EM_IGI
	TRUNCATE TABLE logistics.Tracking_EM_Previo
	TRUNCATE TABLE logistics.Tracking_EM_TR

	truncate table [hnt-files].dbo.Files_Tracking_HNT_TRZ

	SELECT * FROM logistics.Tracking_Encabezado
	SELECT * FROM logistics.Tracking_PuntosLlegada
	SELECT * FROM logistics.Tracking_Facturas
	SELECT * FROM logistics.Tracking_Contenedores
	SELECT * FROM logistics.Tracking_EM_IGI
	SELECT * FROM logistics.Tracking_EM_Previo
	SELECT * FROM logistics.Tracking_EM_TR

	delete sap.odrf where NumAtCard = 'TraspasoFromEM'
	*/
	IF @TipoConsulta = 31
	BEGIN
		SELECT nIdTracking [Id], nTipoTracking [Tipo], sCodAlmacenDestino[Almacen_Destino] FROM logistics.Tracking_Encabezado WHERE nIdTracking = @IdTracking
	END

	IF @TipoConsulta = 32
	BEGIN
		Update logistics.Tracking_Encabezado set sCodAlmacenDestino = @AlmacenDestino WHERE nIdTracking = @IdTracking
	END

	IF @TipoConsulta = 33
	BEGIN
		INSERT INTO [logistics].[Tracking_CambioDestinos] 
		(U_Create, ID_Usuario, Folio, Almacen_Destino_Original, Almacen_Destino_Nuevo)
		VALUES (GETDATE(), @ID, @IdTracking, @AlmacenOrigen, @AlmacenDestino )
	END
	/**************************TRACKING WEB --PABLO CUAUTLE COATL-- 2019-10-29****************************/
	IF @TipoConsulta = 34
	BEGIN
		IF @Opc = 2
		BEGIN
			SELECT nID, nIdTracking, sTipo, sNombre, sExtension, sRutaOrigen/*, fArchivo*/, sObservaciones, 'Tracking'[Tipo]
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ
			WHERE nIdTracking = @IdTracking AND sTipo IN('FAC', 'PED')
		END
		ELSE IF @Opc = 3
		BEGIN
			SELECT nID, nIdTracking
			, CASE WHEN sTipo = 'FAC' THEN 'Facturas' WHEN sTipo = 'PED' THEN 'Pedido' WHEN sTipo = 'GAD' THEN 'Gastos Adicionales' WHEN sTipo = 'OTR' THEN 'Otros' WHEN sTipo = 'REP' THEN 'Reparticion' END[sTipo]
			, sNombre, sExtension, sRutaOrigen, 'f' fArchivo, sObservaciones, 'Tracking'[Tipo] --DC AGREGUÉ COLUMNA  fArchivo
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ
			WHERE nIdTracking = @IdTracking AND sTipo = @Tipo
		END
		ELSE IF @Opc = 4
		BEGIN
			SELECT nID, nIdTracking
			, CASE WHEN sTipo = 'FAC' THEN 'Facturas' WHEN sTipo = 'PED' THEN 'Pedido' WHEN sTipo = 'GAD' THEN 'Gastos Adicionales' WHEN sTipo = 'OTR' THEN 'Otros' WHEN sTipo = 'REP' THEN 'Reparticion' END[sTipo]
			, sNombre, sExtension, sRutaOrigen/*, fArchivo*/, sObservaciones, 'Tracking'[Tipo]
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ
			WHERE nIdTracking = @IdTracking 
			ORDER BY sTipo, sExtension, sNombre
		END
		ELSE IF @Opc = 5
		BEGIN
			SELECT 
				nID
				, nIdTracking
				, CASE 
					WHEN sTipo = 'FAC' THEN 'Facturas'
					WHEN sTipo = 'PED' THEN 'Pedido'
					WHEN sTipo = 'GCM' THEN 'Gastos Comprobados'
					WHEN sTipo = 'GAD' THEN 'Gastos Adicionales'
					WHEN sTipo = 'OTR' THEN 'Otros' 
					WHEN sTipo = 'REP' THEN 'Reparticion' END[sTipo]
				, sNombre
				, sExtension
				, sRutaOrigen
				, 'f' fArchivo
				, sObservaciones
				, 'Tracking'[Tipo] --DC AGREGUÉ COLUMNA  fArchivo
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ
			WHERE nIdTracking = @IdTracking AND sTipo = @Tipo			
		END
	END

	IF @TipoConsulta = 35
	BEGIN
		IF @Tipo = 'Tracking'
		BEGIN
			SELECT nID[ID], fArchivo[FileData], sExtension[Extension],sNombre [Nombre]
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ
			WHERE nIdTracking = @IdTracking AND nID = @nID 
		END
		ELSE
		BEGIN
			--SELECT nIdArchivo[ID], Archivo[FileData], Extension[Extension]
			--FROM [HNT-Files].dbo.File_CFDI_HNT_TRZ
			--WHERE nIdArchivo = @nID 

			SELECT * FROM (
				select nIdArchivo[ID], Archivo[FileData], Extension[Extension],Nombre [Nombre]
				from [HNT-Files].dbo.File_CFDI_HNT_TRZ  
				where nIdArchivo = @nID 
				UNION ALL 
				select nIdArchivo[ID], ArchivoPDF[FileData], '.pdf'[Extension],Nombre [Nombre]
				from [HNT-Files].dbo.File_CFDI_HNT_TRZ  
				where nIdArchivo = @nID 
					AND ArchivoPDF IS NOT NULL
			) t0 WHERE Extension = @Extension
		END
	END

	IF @TipoConsulta = 36
	BEGIN
		
			SELECT TOP 5 
			nIdArchivo[nID]
			, @IdTracking[nIdTracking]
			, 'Factura Prov'[sTipo]
			, Nombre[sNombre]
			, Extension[sExtension]
			, RutaArc[sRutaOrigen]
			, /*Archivo*/''[fArchivo]
			, ''[sObservaciones]
		FROM [HNT-Files].dbo.File_CFDI_HNT_TRZ
		WHERE TipoDoc = 'Factura' AND DocEntry = @DocEntry
		UNION ALL 
		select 
			nIdArchivo[nID]
			, @IdTracking [nIdTracking]
			, 'Factura Prov'[sTipo]
			, Nombre [sNombre]
			, '.pdf'[sExtension]
			,  REPLACE(RutaArc, '.xml', '.pdf') [sRutaOrigen]
			, ''[fArchivo]
			, ''[sObservaciones]
		from [HNT-Files].dbo.File_CFDI_HNT_TRZ  
		where TipoDoc = 'Factura' AND DocEntry = @DocEntry
			AND ArchivoPDF IS NOT NULL
	END

	IF @TipoConsulta = 37
	BEGIN
		select 
			nIdArchivo[nID]
			, @IdTracking [nIdTracking]
			, 'Factura Prov'[sTipo]
			, Nombre[sNombre]
			, Extension[sExtension]
			, RutaArc[sRutaOrigen]
			, ''[fArchivo]
			, ''[sObservaciones]
			, 'CFDI'[Tipo]
		from [HNT-Files].dbo.File_CFDI_HNT_TRZ  
		where DocEntry = @DocEntry
		UNION ALL 
		select 
			nIdArchivo[nID]
			, @IdTracking [nIdTracking]
			, 'Factura Prov'[sTipo]
			, Nombre [sNombre]
			, '.pdf'[sExtension]
			,  REPLACE(RutaArc, '.xml', '.pdf') [sRutaOrigen]
			, ''[fArchivo]
			, ''[sObservaciones]
			, 'CFDI'[Tipo]
		from [HNT-Files].dbo.File_CFDI_HNT_TRZ  
		where DocEntry = @DocEntry
			AND ArchivoPDF IS NOT NULL
	END

	IF @TipoConsulta = 38
	BEGIN
		SELECT 
			fArchivo [FileData],
			[sNombre],
			[sExtension] [Extension],
			(CAST([sNombre] AS VARCHAR(10)) + '-' + CAST([nIdTracking] AS VARCHAR(10)) + [sExtension])[Name]
		FROM [HNT-Files].[dbo].[Files_Tracking_HNT_TRZ]
		WHERE nIdTracking = @IdTracking AND sTipo = 'REP' AND sExtension LIKE '.xl%'
	END

	IF @TipoConsulta = 39 --SE INSERTA LOS ARCHIVOS DE RECEPCION DE DOCTOS
	BEGIN
		IF ISNULL(@Opc,1) = 1
		BEGIN
		--Se agrego tabla a la base de datos (ANGEL)
			INSERT INTO [HNT-Files].dbo.CTRZ_Files_RecepDoctos(DocEntry, sTipo, sNombre, sExtension, fArchivo, sRutaOrigen, dFechaAlta, nIdUsuario)
												VALUES (@DocEntry, @Tipo, @Nombre, @Extension, @Archivo, @RutaOrigen, GETDATE(), @Usuario)
		END
		ELSE IF @Opc = 2
		BEGIN
			SELECT nID, DocEntry[nIdTracking]
			, sTipo
			, sNombre, sExtension, sRutaOrigen, 'Tracking'[Tipo]--, fArchivo 
			FROM [HNT-Files].dbo.CTRZ_Files_RecepDoctos
			WHERE DocEntry = @DocEntry AND sTipo = @Tipo 
			UNION ALL
			SELECT nID, nIdTracking--[DocEntry] 
			, sTipo
			, sNombre, sExtension, sRutaOrigen, 'Tracking'[Tipo]--, fArchivo
			FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ
			WHERE nIdTracking = @IdTracking AND sTipo = 'RDC'

			ORDER BY sTipo, sExtension, sNombre
		END
		ELSE
		BEGIN
			IF ISNULL(@Tipo,'') = ''
			BEGIN
				DELETE [HNT-Files].dbo.Files_Tracking_HNT_TRZ WHERE nID = @ID
			END
			ELSE IF ISNULL(@Tipo,'') IN('RDC','GAD','FAC','OTR','PED','REP')
			BEGIN
				DELETE [HNT-Files].dbo.Files_Tracking_HNT_TRZ WHERE nID = @ID
			END
		END
	END

	IF @TipoConsulta = 40
	BEGIN
		BEGIN TRAN
		BEGIN TRY
			IF NOT EXISTS(SELECT * FROM logistics.History_TrackingEncabezado WHERE Foliotracking = @IdTracking 
																			   AND Tipo = @TipoTracking 
																			   AND Destino = @AlmacenDestino 
																			   AND Pedimento = @Pedimento 
																			   AND CartaPorte = @CartaPorte 
																			   AND CAST(FechaArribo AS DATE) = CAST(@FechaArribo AS DATE)
																			   AND Estatus = @EstatusDoc)
			BEGIN
				SET @FolioHistory = (SELECT ISNULL(MAX(Id), 0) + 1 FROM logistics.History_TrackingEncabezado)
				INSERT INTO logistics.History_TrackingEncabezado
				(
					[Id],
					[Foliotracking],
					[Tipo],
					[Destino],
					[Pedimento],
					[CartaPorte],
					[FechaArribo],
					[Estatus],
					[UserId],
					[Fecha]
				)
				VALUES
				(
					@FolioHistory,
					@IdTracking, 
					@TipoTracking,   
					@AlmacenDestino, 
					@Pedimento,
					@CartaPorte,
					@FechaArribo,
					@EstatusDoc, 
					@Usuario,
					GETDATE()
				)
			END
		COMMIT
		END TRY
		BEGIN CATCH
			SET @FolioHistory = -1;
			SET @Error = (SELECT ERROR_MESSAGE() AS ErrorMessage);
			RAISERROR(@Error, 11, 1);
			ROLLBACK
		END CATCH
	END

	IF @TipoConsulta = 41
	BEGIN
		BEGIN TRAN
		BEGIN TRY
			IF NOT EXISTS(SELECT * FROM logistics.History_TrackingDetalle WHERE Foliotracking = @IdTracking 
																			AND Tipo = @Tipo 
																			AND DgvId = @ID 
																			AND VAR1 = @Nombre 
																			AND VAR2 = @Observaciones 
																			AND VAR3 = @Monto)
			BEGIN
				SET @FolioHistory = (SELECT ISNULL(MAX(Id), 0) + 1 FROM logistics.History_TrackingDetalle)
				INSERT INTO logistics.History_TrackingDetalle
				(
					 [Id],
					 [FolioTracking],
					 [Tipo],
					 [DgvId],
					 [VAR1],
					 [VAR2],
					 [VAR3],
					 [UserId],
					 [Fecha]
				)
				VALUES
				(
					@FolioHistory, 
					@IdTracking, 
					@Tipo, 
					@ID, 
					@Nombre,
					@Observaciones, 
					@Monto,
					@Usuario,
					GETDATE()
				)
			END
		COMMIT
		END TRY
		BEGIN CATCH
			SET @Error = (SELECT ERROR_MESSAGE() AS ErrorMessage);
			RAISERROR(@Error, 11, 1);
			ROLLBACK
		END CATCH
	END

	IF @TipoConsulta = -41
	BEGIN
		BEGIN TRAN
		BEGIN TRY
			IF NOT EXISTS (SELECT * FROM logistics.History_TrackingDetalleProyeccionReal WHERE FolioTracking = @IdTracking
																							and Concepto = @Concepto
																							and MontoProyectado = @MontoProyectado
																							and Moneda = @Moneda
																							and SocioDeNegocios = @SocioDeNegocios
																							and Comentarios = @Comentarios
																							and Factura = @Factura
																							and Importe = @Importe2
																							and VariacionProyectado = @VariacionProyectado)
			BEGIN
				INSERT INTO logistics.History_TrackingDetalleProyeccionReal
				(
					[FolioTracking]
					, [Concepto]
					, [MontoProyectado]
					, [Moneda]
					, [SocioDeNegocios]
					, [Comentarios]
					, [Factura]
					, [Importe]
					, [VariacionProyectado]
					, [UserId]
					, [Fecha]
				)
				VALUES
				(
					@IdTracking
					, @Concepto
					, @MontoProyectado
					, @Moneda
					, @SocioDeNegocios
					, @Comentarios
					, @Factura
					, @Importe2
					, @VariacionProyectado
					, @Usuario
					, GETDATE()
				)
			END
		COMMIT
		END TRY
		BEGIN CATCH
			SET @Error = (SELECT ERROR_MESSAGE() AS ErrorMessage);
			RAISERROR(@Error, 11, 1);
			ROLLBACK
		END CATCH
	END

	IF @TipoConsulta = 42
	BEGIN
		SELECT 
			Id, 
			Foliotracking[Folio],  
			CASE WHEN Tipo = 1 THEN 'Importacion' ELSE 'Nacional' END[Tipo],
			WhsCode[Destino], 
			Pedimento, 
			CartaPorte[Carta Porte], 
			FechaArribo[Fecha Arribo], 
			Estatus[Estatus Documentacion], 
			B.Nombre,
			Fecha[Ultimo Cambio]
		FROM logistics.History_TrackingEncabezado A
		INNER JOIN hnt.Usuarios B ON A.UserId = B.UserID
		INNER JOIN SBOCTRZ.dbo.OWHS C on A.Destino = C.WhsCode
		WHERE Foliotracking = @IdTracking

		SELECT 
			Id, 
			FolioTracking,
			Tipo,
			CASE WHEN Tipo = 'PuntoLlegada' THEN 'Puntos de llegada'
				 WHEN Tipo = 'Facturas' THEN 'Factura Relacionada'
				 WHEN Tipo = 'Contenedores' THEN 'Contenedores'
				 WHEN Tipo = 'FAC' THEN 'Archivo - Factura'
				 WHEN Tipo = 'PED' THEN 'Archivo - Pedido'
				 WHEN Tipo = 'GAD' THEN 'Archivo - Gastos Adicionales'
				 WHEN Tipo = 'OTR' THEN 'Archivo - Otros'
				 WHEN Tipo = 'REP' THEN 'Archivo - Reparticion'
				 WHEN Tipo = 'RDC' THEN 'Archivo - Recepcion Documentos'
				 WHEN Tipo = 'FacComprobar' THEN 'Factuturas por Comprobar'
				 ELSE 'Archivos - Generales' END[Tabla],
			DgvId[Identificador], 
			CASE WHEN Tipo = 'PuntoLlegada' THEN 'Punto de llegada: ' + VAR1
				 WHEN Tipo = 'Facturas' THEN 'Factura Relacionada: ' + VAR1
				 WHEN Tipo = 'Contenedores' THEN 'Contenedor: '+ VAR1
				 WHEN Tipo = 'FAC' THEN 'Nombre: ' + VAR1
				 WHEN Tipo = 'PED' THEN 'Nombre: ' + VAR1
				 WHEN Tipo = 'GAD' THEN 'Nombre: ' + VAR1
				 WHEN Tipo = 'OTR' THEN 'Nombre: ' + VAR1
				 WHEN Tipo = 'REP' THEN 'Nombre: ' + VAR1
				 WHEN Tipo = 'RDC' THEN 'Nombre: ' + VAR1
				 WHEN Tipo = 'FacComprobar' THEN 'Factuturas por Comprobar'
				 ELSE VAR1 END[Valor Almacenado1],
			CASE WHEN Tipo = 'PuntoLlegada' THEN 'Punto de llegada: ' + VAR2
				 WHEN Tipo = 'FAC' THEN 'Observaciones: ' + VAR2
				 WHEN Tipo = 'PED' THEN 'Observaciones: ' + VAR2
				 WHEN Tipo = 'GAD' THEN 'Observaciones: ' + VAR2
				 WHEN Tipo = 'OTR' THEN 'Observaciones: ' + VAR2
				 WHEN Tipo = 'REP' THEN 'Observaciones: ' + VAR2
				 WHEN Tipo = 'RDC' THEN 'Observaciones: ' + VAR2
				 WHEN Tipo = 'FacComprobar' THEN 'Moneda: ' + VAR2 
				 ELSE VAR2 END[Valor Almacenado2],
			CASE WHEN Tipo = 'FacComprobar' THEN 'Monto Factura por Comprobar: ' + cast(VAR3 as varchar(50)) ELSE '' END [Valor Almacenado3],
			Nombre,
			Fecha[Ultimo Cambio]
		FROM logistics.History_TrackingDetalle A
		INNER JOIN hnt.Usuarios B ON A.UserId = B.UserID
		WHERE Foliotracking = @IdTracking 

		select 
			FolioTracking [Folio]
			, Concepto
			, MontoProyectado
			, Moneda
			, SocioDeNegocios
			, Comentarios
			, Factura
			, Importe
			, VariacionProyectado
			, B.Nombre
			, Fecha [UltimoCambio]
		from logistics.History_TrackingDetalleProyeccionReal A
		join hnt.Usuarios B on A.UserId = B.UserID
		where FolioTracking = @IdTracking
			

	END
	
	IF @TipoConsulta = 43
	BEGIN
		SELECT 'HNT'[Conection], 'Comercializadora TR Zone'[Empresa]
		UNION ALL
		SELECT 'HNT_DPJ'[Conection], 'Distribuidora PJ'[Empresa]
		UNION ALL
		SELECT 'SERVIMPO'[Conection], 'Servicios de Importacion'[Empresa]
		UNION ALL
		SELECT 'CPEJ'[Conection], 'Comercializadora PEJ'[Empresa]
	END




		IF @TipoConsulta = 44
	BEGIN
		SELECT 
			IdTrackingPR
			, nIdTracking
			, IdConcepto
			, ConceptoDesc
			, Agrupacion
			, MontoProyectado
			, Moneda
			, CL.CardCode
			, Cl.[QryGroup31]
			, Comentarios
			, Factura
			, Importe
			, VariacionVsProyectado
			, ISNULL(nIdArchivo, -1) nIdArchivo 
		FROM 
			HNT_TRZ.[logistics].[Tracking_ProyeccionReal] A
			LEFT JOIN SBOCTRZ.DBO.OCRD CL on CL.CardCode = A.CardCode AND CL.CardType = 'S' AND CL.frozenFor = 'N'
		WHERE 
			nIdTracking = @IdTracking 
	END

		
	IF @TipoConsulta = 45 
	BEGIN
		IF @UpdateorDelete = 1
		BEGIN 
			UPDATE HNT_TRZ.logistics.Tracking_ProyeccionReal SET nIdArchivo = @nIdArchivo WHERE IdTrackingPR = @IdTrackingPR
		END
		ELSE IF @UpdateorDelete = 0
		BEGIN
			UPDATE HNT_TRZ.logistics.Tracking_ProyeccionReal SET nIdArchivo = NULL WHERE IdTrackingPR = @IdTrackingPR
		END
	END

	IF @TipoConsulta = 46
	BEGIN
		SELECT 
			  IdTrackingPR
			, A.nIdArchivo
			, B.Nombre
		FROM 
			HNT_TRZ.[logistics].[Tracking_ProyeccionReal] A
			INNER JOIN [HNT-Files].dbo.File_CFDI_HNT_TRZ B ON A.nIdArchivo = B.nIdArchivo
		WHERE 
			IdTrackingPR = @IdTracking
	END

--DC
	IF @TipoConsulta = 60
	BEGIN
		  IF @IdTracking = -1
		  BEGIN

		  --		SELECT  -1 IdTrackingPR, 'FMA' IdConcepto	,'A1' [Agrupacion], 'FLETE MARITIMO' ConceptoDesc, '' CardCode, '' Moneda , '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR, 'FTE' IdConcepto	,'B2' [Agrupacion],'FLETE TERRESTRE 1' ConceptoDesc, '' CardCode, '' Moneda, '' CardName, '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				----UNION ALL
				----SELECT  -1 IdTrackingPR, 'FTE2' IdConcepto	,'B2' [Agrupacion],'FLETE TERRESTRE 2' ConceptoDesc, '' CardCode, '' Moneda, '' CardName, '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR, 'NCR' IdConcepto	,'B2' [Agrupacion], 'NC' ConceptoDesc , '' CardCode, '' Moneda, '' CardName, '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'FTF' IdConcepto	,'B2' [Agrupacion],'FACTURA DE TRASPASO PARA FLETES A GUADALAJARA' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'ARR' IdConcepto	,'C3' [Agrupacion],'ARRASTRES' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'COR' IdConcepto	,'D4' [Agrupacion],'CARGOS EN ORIGEN' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'CDE' IdConcepto	,'E5' [Agrupacion],'CARGOS EN DESTINO' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios, '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'LDC' IdConcepto	,'F6' [Agrupacion],'LIMPIEZA/DAÑOS CONTENEDOR' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios, '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT -1 IdTrackingPR, 'DEM' IdConcepto	,'G7' [Agrupacion],'DEMORAS' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				----nuevo
				--SELECT -1 IdTrackingPR, 'PEN' IdConcepto	,'H8' [Agrupacion],'PERNOCTAJE' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'EST' IdConcepto	,'I9' [Agrupacion],'ESTADIAS' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'CUS' IdConcepto	,'J10' [Agrupacion],'CUSTODIA' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'UVA' IdConcepto	,'K11' [Agrupacion],'UVA' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				----nuevo
				--SELECT  -1 IdTrackingPR,'PER' IdConcepto	,'M12' [Agrupacion],'PERMUTA' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				----nuevo
				--SELECT  -1 IdTrackingPR,'RUS' IdConcepto	,'N13' [Agrupacion],'RUSH' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				----nuevo
				--SELECT  -1 IdTrackingPR,'GLO' IdConcepto	,'O14' [Agrupacion],'GLOBAL' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'CBA' IdConcepto	,'P15' [Agrupacion],'COMISION BANCARIA CTA ADUANERA' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'CGA' IdConcepto	,'Q16' [Agrupacion],'CUENTA GASTOS' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'HON' IdConcepto	,'Q16' [Agrupacion],'HONORARIOS' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura , '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'SCD' IdConcepto	,'Q16' [Agrupacion],'SERVICIOS COMPLEMENTARIOS (DOCUMENTACIÓN)' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'MCO' IdConcepto	,'Q16' [Agrupacion],'MANIOBRAS(COMPROBADOS)' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'PVA' IdConcepto	,'Q16' [Agrupacion],'PEDIMENTO Y VALIDACIÓN' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'SFI' IdConcepto	,'Q16' [Agrupacion],'SELLOS FISCALES' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'PRE' IdConcepto	,'Q16' [Agrupacion],'PREVIO' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'CPT' IdConcepto	,'Q16' [Agrupacion],'CONTRAPRESTACION' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'RAD' IdConcepto	,'Q16' [Agrupacion],'RECONOCIMIENTO ADUANERO' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'VUC' IdConcepto	,'Q16' [Agrupacion],'VUCEM' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura , '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'PED' IdConcepto	,'R17' [Agrupacion],'PEDIMENTO' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura , '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'DTA' IdConcepto	,'R17' [Agrupacion],'DTA' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'PRV' IdConcepto	,'R17' [Agrupacion],'PRV' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios, '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'IGI' IdConcepto	,'R17' [Agrupacion],'IGI' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado
				--UNION ALL
				--SELECT  -1 IdTrackingPR,'OTR' IdConcepto	,'S18' [Agrupacion],'OTROS' ConceptoDesc, '' CardCode, '' Moneda, '' CardName , '' Comentarios , '' Factura, '' Moneda,'' VariacionVsProyectado

				SELECT * FROM logistics.Tracking_ConceptosProyeccion ORDER BY ConceptoDesc ASC;	
	
		  END
		  ELSE
		  BEGIN 
			
				
				 SELECT 
		  	  	  ISNULL(IdTrackingPR, -1)IdTrackingPR
				  , nIdTracking
		  	  	  , IdConcepto
		  	  	  , Agrupacion
		  	  	  , ConceptoDesc
		  	  	  , MontoProyectado
		  	  	  , Moneda 
				  , A.CardCode, ' [' + A.CardCode + '] ' + CL.CardName  CardName
		  	  	  , CL.QryGroup31
		  	  	  , Comentarios
		  	  	  , Factura
		  	  	  , Importe
				  , EditCalculoTarifas--BRAYAN
		  	  	  , (ISNULL(Importe,0) - MontoProyectado) VariacionVsProyectado				  
		  	  	  , ISNULL(nIdArchivo, -1) nIdArchivo
				  ,Tipo
		  	  FROM 
		  	  	  HNT_TRZ.[logistics].[Tracking_ProyeccionReal] A
		  	  	  LEFT JOIN SBOCTRZ.DBO.OCRD CL on CL.CardCode = A.CardCode AND CL.CardType = 'S' AND CL.frozenFor = 'N'
			  WHERE nIdTracking = @IdTracking AND IdConcepto <> 'MOD'  AND A.Tipo IN(1,3)
			  ORDER BY IdTrackingPR, Agrupacion	

		  END
	END

	IF @TipoConsulta = 61
	BEGIN
		
		Select '-1' CardCode, '- Sin socio de negocios - ' CardName
		UNION ALL
		Select  A.CardCode, ' [' + A.CardCode + '] ' + CardName--, A.QRYGROUP31
		From SBOCTRZ.dbo.OCRD A	WHERE A.CardType = 'S'

	END

	IF @TipoConsulta = 62
	BEGIN


	IF @MontoProyectado = 0
		BEGIN
				SET @MontoProyectado = NULL
				SET @Tipo = 2;
		END
		ELSE 
		BEGIN
				SET @Tipo = 1;
		END
	IF @CardCode = '-1' 
		BEGIN
				SET @CardCode = NULL
		END
	IF @IdTrackingPR = -1
		BEGIN

	IF @MontoProyectado = NULL 
		BEGIN
				SET @CardCode = NULL
				SET @Moneda = NULL
				SET @Comentarios = NULL				
		END
	
		--SELECT*FROM [Halconet].[logistics].[Tracking_ProyeccionReal]
				--INSERT INTO [HNT_TRZ].[logistics].[Tracking_ProyeccionReal]
				--	   (
				--		   nIdTracking,
				--		   IdConcepto,
				--		   ConceptoDesc,
				--		   Agrupacion,
				--		   MontoProyectado,
				--		   Moneda,
				--		   CardCode,
				--		   Comentarios,
				--		   Tipo,
				--		   FechaCreacion
				--	   ) 
				--VALUES (
				--			@IdTracking,
				--			@IdConcepto,
				--			@ConceptoDesc,
				--			@Agrupacion,
				--			@MontoProyectado,
				--			@Moneda,
				--			@CardCode,
				--			@Comentarios,
				--			@Tipo,
				--			GETDATE()
				--		)
				INSERT INTO [HNT_TRZ].[logistics].[Tracking_ProyeccionReal]
					   (
						   nIdTracking,
						   IdConcepto,
						   ConceptoDesc,
						   Agrupacion,
						   MontoProyectado,
						   Moneda,
						   CardCode,
						   Comentarios,
						   Tipo,
						   FechaCreacion,
						   EditCalculoTarifas
					   ) 
				VALUES (
							@IdTracking,
							@IdConcepto,
							@ConceptoDesc,
							@Agrupacion,
							@MontoProyectado,
							@Moneda,
							@CardCode,
							@Comentarios,
							@Tipo,
							GETDATE(),
							@EditCalculoTarifas
						) -- BRAYAN
		END
	ELSE
		BEGIN 
				IF 1 = 1 --@CardCode IS NOT NULL 
				BEGIN 
						UPDATE HNT_TRZ.[logistics].[Tracking_ProyeccionReal] 
						SET Factura = @Factura, Importe = @Importe, VariacionVsProyectado =  @VariacionProyectado, MontoProyectado = @MontoProyectado, Moneda = @Moneda, Comentarios = @Comentarios	
						WHERE IdConcepto = @IdConcepto AND  nIdTracking = @IdTracking
				END
				-- select*from HNT_TRZ.[logistics].[Tracking_ProyeccionReal] 

		END

	END
	



	IF @TipoConsulta = 63
	BEGIN
		IF @IdTracking <> -1
		BEGIN
		SELECT 
			A.IdTrackingPR,
			A.nIdTracking,
			A.IdConcepto,
			A.ConceptoDesc,
			A.Agrupacion,
			A.Importe,
			A.Moneda,
			A.CardCode,
			A.Comentarios,
			A.nIdArchivo,
			CL.QryGroup31
		FROM
			HNT_TRZ.[logistics].[Tracking_ProyeccionReal] A
			 LEFT JOIN SBOCTRZ.DBO.OCRD CL on CL.CardCode = A.CardCode AND CL.CardType = 'S' AND CL.frozenFor = 'N'
			WHERE A.nIdTracking = @IdTracking AND A.IdConcepto = 'MOD' AND A.Agrupacion = 'MOD'

		UNION ALL
		SELECT 
			NULL IdTrackingPR,
				0 nIdTracking,
			'MOD' IdConcepto,
			NULL ConceptoDesc,
			'MOD' Agrupacion,
			NULL Importe,
			NULL Moneda,
			NULL CardCode,
			NULL Comentarios,
			-1 nidArchivo,
			NULL QryGroup31
		END
	END
	
	IF @TipoConsulta = 64
	BEGIN
		--UPDATE HNT_TRZ.logistics.Tracking_ProyeccionReal SET CardCode = 
		--	CASE 
		--		WHEN @CardCode != '' THEN @CardCode
		--		ELSE NULL
		--	END
		--where IdTrackingPR = @IdTrackingPR

		IF @CardCode = '' OR @CardCode = '-1'
	BEGIN
			SET @CardCode = NULL
	END


		BEGIN TRY
			          BEGIN TRANSACTION 
										UPDATE HNT_TRZ.logistics.Tracking_ProyeccionReal SET CardCode = @CardCode			
										where IdTrackingPR = @IdTrackingPR

										SELECT 'Se ha asignado el socio correctamente' [MESSAGE]		
											  ,'SUCCESS' [TIPO]	

				      COMMIT TRANSACTION

			END TRY
					BEGIN CATCH
						 		    
								SELECT 'Error: '+ ERROR_MESSAGE() [MESSAGE]		
									   ,'ERROR' [TIPO]	
								
								ROLLBACK TRANSACTION
					END CATCH;


	END



IF @TipoConsulta = 65
	BEGIN
	IF @IdTrackingPR > 0
		BEGIN 
		
			
		SELECT A.IdTrackingPR, 'CONCEPTO ALAMACENADO CORRECTAMENTE' Msj, 1 val, ISNULL(B.QryGroup31,'N') [QryGroup31]
														from HNT_TRZ.logistics.Tracking_ProyeccionReal A
														LEFT JOIN SBOCTRZ.dbo.OCRD B ON B.CardCode = A.CardCode  											
														where IdTrackingPR = @IdTrackingPR	

		END
		ELSE 
		BEGIN
					IF @IdTracking <> ''
					BEGIN
						IF @ConceptoDesc <> ''
						BEGIN
							IF @Importe <> ''
							BEGIN
								IF @Moneda <> ''
								BEGIN
									IF @Moneda IN ('USD', '$')
									BEGIN
										IF @CardCode <> ''
											BEGIN																	
													INSERT INTO HNT_TRZ.logistics.Tracking_ProyeccionReal (nIdTracking, IdConcepto, ConceptoDesc, Agrupacion, Importe, Moneda, CardCode, Comentarios)
													VALUES (CAST(@IdTracking AS INT), 'MOD', @ConceptoDesc, 'MOD', CAST(@Importe AS decimal(18,4)), @Moneda, @CardCode, @Comentarios)
												
														DECLARE @Info NVARCHAR(MAX) = ''
														DECLARE @body NVARCHAR(MAX) = ''
														DECLARE @Asunto NVARCHAR(MAX) = 'Modificación del Folio tracking '+ CAST(@IdTracking AS varchar)+ ' (CTRZ)'
														DECLARE @AsuntoG NVARCHAR(MAX) = 'Modificación del Folio tracking (CTRZ)'
														Declare @IdVi int = @@IDENTITY
						
														SELECT 	
		
																@Info = COALESCE(@Info + '
																							
																								<tr> 
																								<td style="border: 1px silver solid;">'+cast(A.ConceptoDesc as varchar)+'</td> 
																								<td  style="border: 1px silver solid;">'+cast(A.Importe as varchar)+'</td> 
																								<td  style="border: 1px silver solid;">'+cast(A.Moneda as varchar)+' </td> 
																								<td  style="border: 1px silver solid;">'+cast(A.CardCode as varchar)+'</td>
																								<td  style="border: 1px silver solid;">'+cast(ISNULL(A.Comentarios,'') as varchar)+'</td>
																								</tr>', '')  						  
															FROM  HNT_TRZ.logistics.Tracking_ProyeccionReal A where IdTrackingPR = @@IDENTITY	
														
											
														
													

														IF ISNULL(@Info,'') <> ''
															BEGIN 
	
																SET @body ='	         
																				El Área de Comercio Exterior a modificado el tracking, favor de consultar el Módulo de seguimiento de tracking
																				<br>
																				<table style="border-color: black !important;text-align: center;width:100%;padding: 2px;"> 
																				<tr>
																				<th style="background-color: #ea6e00;text-align: center;color: white;border: 1px black solid"> Concepto </th> 
																				<th style=" background-color: #ea6e00;text-align: center;color: white;border: 1px black solid"> Monto </th> 
																				<th style=" background-color: #ea6e00;text-align: center;color: white;border: 1px black solid"> Moneda </th> 
																				<th style=" background-color: #ea6e00;text-align: center;color: white;border: 1px black solid"> Socio de negocios </th>
																				<th style=" background-color: #ea6e00;text-align: center;color: white;border: 1px black solid"> Comentarios </th>
																				</tr>				
																				'+@Info+'
																				</table>				
																'    
															
																declare @HTML_MENSAJE varchar(max)
																		SET @HTML_MENSAJE = HNT_TRZ.dbo.fu_hnt_Str_Mail(
																			@Asunto,  ---Asunto
																			@body
																		)
		
																EXEC msdb.dbo.sp_send_dbmail
																@profile_name = 'Correo Halconet',
																@body = @HTML_MENSAJE,
																@body_format ='HTML',
																@recipients = 'auxiliar.contabilidadpj@tractozone.com.mx;ulises.uribe@tractozone.com.mx;comercio.exterior@tractozone.com.mx;zulma.garcia@tractozone.com.mx;leticia.aguilar@tractozone.com.mx', 
																--@recipients = 'david.cid@tractozone.com.mx', 
																@subject = @AsuntoG ;
															END

														SELECT A.IdTrackingPR, 'CONCEPTO ALAMACENADO CORRECTAMENTE' Msj, 1 val, ISNULL(B.QryGroup31,'N') [QryGroup31]
														from [HNT_TRZ].logistics.Tracking_ProyeccionReal A
														LEFT JOIN SBOCTRZ.dbo.OCRD B ON B.CardCode = A.CardCode  											
														where IdTrackingPR = @IdVi																																			
										
											END
										ELSE
											SELECT 0 IdTrackingPR, 'Debe de ingresar un Socio de negocios' Msj, 0 val
									END
									ELSE 
										SELECT 0 IdTrackingPR, 'La moneda no es válida' Msj, 0 val
								END
								ELSE
									SELECT 0 IdTrackingPR, 'Debe ingresar una Moneda' Msj, 0 val
							END
							ELSE
								SELECT 0 IdTrackingPR, 'Debe ingresar un importe' Msj, 0 val
						END
						ELSE
							SELECT 0 IdTrackingPR, 'Debe ingresar un concepto' Msj, 0 val
					END
					ELSE
						SELECT 0 IdTrackingPR, 'Es necesario un folio de ingreso' Msj, 0 val
		END

	END


	IF @TipoConsulta = 80
		BEGIN
				
						
				 IF @Opc = 1 AND @TipoTracking = 2 
					BEGIN

							IF @TipoDescarga = 1
								BEGIN
										SET @Tipo = 'Facturas'
								END
							ELSE IF @TipoDescarga = 5
								BEGIN
										SET @Tipo = 'Repartición'
								END
							ELSE IF @TipoDescarga = 9
								BEGIN
										SET @Tipo = 'Recep Doc'
										
								END
							ELSE IF @TipoDescarga = 10
								BEGIN
									SET @Tipo = 'Gastos Comprobados'
								END
							IF @TipoDescarga = 1 
							BEGIN
										SET @Qry = '			 
											SELECT *, '''+@Tipo+''' [Tipo] FROM (
													select 
															 nIdArchivo [ID]
															,Nombre
															,Archivo [FileData]
															, Extension [Ext] 
													from [HNT-Files].dbo.File_CFDI_HNT_TRZ 
													where nIdArchivo IN('+@nIdFiltro+')
													UNION ALL
													select 
														  nIdArchivo[ID]
														  ,Nombre
														  ,ArchivoPDF [FileData]
														  , ''.pdf'' [Ext] 
													from  [HNT-Files].dbo.File_CFDI_HNT_TRZ 
													where nIdArchivo  IN ('+@nIdFiltro+') 
											)T0 ORDER BY T0.ID, T0.Ext
										';		
							END
							ELSE IF  @TipoDescarga IN(5,10)
							BEGIN
									SET @Qry = 'SELECT 
														nID [ID]
														, sNombre [Nombre]
														,fArchivo [FileData]
														, sExtension [Ext] 
														,'''+@Tipo+''' [Tipo]
												 FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ 
												 WHERE nID IN ('+@nIdFiltro+') '		
							END

						
						
								
					END

			ELSE IF @Opc in( 1, 2)  AND @TipoTracking = 1 
					BEGIN		

					--DECLARE @ConcepFilt VARCHAR(MAX) = '';

						IF @TipoDescarga = 1
								BEGIN
										SET @Tipo = 'Facturas'
								END
						ELSE IF @TipoDescarga = 2
								BEGIN
										SET @Tipo = 'Pedimentos'
								END
						ELSE IF @TipoDescarga = 3
								BEGIN
										SET @Tipo = 'Gastos Adicionales'
								END
						ELSE IF @TipoDescarga = 4
								BEGIN
										SET @Tipo = 'Otros'
								END
						ELSE IF @TipoDescarga = 5
								BEGIN
										SET @Tipo = 'Repartición'
								END
						ELSE IF @TipoDescarga = 6
								BEGIN
										SET @Tipo = 'Proyeccion'
								END
						ELSE IF @TipoDescarga = 7
								BEGIN
										SET @Tipo = 'Modificacion'
										SET @ConcepFilt = ' AND A.IdConcepto =''MOD'' ';
								END
						ELSE IF @TipoDescarga = 10
							BEGIN
									SET @Tipo = 'Gastos Comprobados'
							END
						IF @TipoDescarga IN(6,7)
						BEGIN
								SET @Qry = '
		
					SELECT DISTINCT *FROM  (
						select B.nIdArchivo [nID],
										   A.nIdTracking, 
										   B.Nombre [Nombre],
										   B.Archivo [FileData],
										   B.Extension [Ext], 
										   '''+@Tipo+'''  [Tipo]
									 FROM [Halconet].logistics.Tracking_ProyeccionReal A 
									INNER JOIN [HNT-Files].dbo.File_CFDI B ON A.nIdArchivo = B.nIdArchivo
									WHERE B.nIdArchivo IN( '+@nIdFiltro+')  '+@ConcepFilt+' 
						union all
						select B.nIdArchivo [nID],
										   A.nIdTracking, 
										   B.Nombre [Nombre],
										   B.ArchivoPDF [FileData],
										   ''.pdf'' [Ext],
										   '''+@Tipo+'''  [Tipo]
									 FROM [Halconet].logistics.Tracking_ProyeccionReal A 
									INNER JOIN [HNT-Files].dbo.File_CFDI B ON A.nIdArchivo = B.nIdArchivo  
									WHERE B.nIdArchivo IN( '+ @nIdFiltro +')  '+@ConcepFilt+'
								) T0 ORDER BY T0.nID, T0.Ext
								
									'
						END
						ELSE
						BEGIN
								SET @Qry = '									
											select  nID [ID], sNombre [Nombre],fArchivo [FileData], sExtension [Ext], '''+@Tipo+''' [Tipo]
											from  [HNT-Files].[dbo].[Files_Tracking_HNT_TRZ]									
											where nID IN ('+@nIdFiltro+') 
										'		
						END


						
										
					END
			
			

		
				execute (@Qry)
			
							  			
		END 

	IF @TipoConsulta = 81
		BEGIN

		IF @Tipo = 'Proyeccion' AND @Extension = '.xml'
		BEGIN
				select  nIdArchivo [ID],									   
						Nombre [Nombre],
						Archivo [FileData],					
						@Extension [Extension] 									   								   
					FROM [HNT-Files].dbo.File_CFDI_HNT_TRZ 								
				WHERE nIdArchivo = 	@nID		
		END
		ELSE IF @Tipo = 'Proyeccion' AND @Extension = '.pdf'
		BEGIN
				select  nIdArchivo [ID],									   
						Nombre [Nombre],
						ArchivoPDF [FileData],					
						@Extension [Extension] 									   								   
					FROM [HNT-Files].dbo.File_CFDI_HNT_TRZ 								
				WHERE nIdArchivo = 	@nID		
		END
		ELSE
		BEGIN
				select  nID [ID], 
							sNombre [Nombre],
							fArchivo [FileData], 
							sExtension [Extension]
					from  [HNT-Files].[dbo].[Files_Tracking_HNT_TRZ]
					where nID = @nID 
		END
	
		END

	IF @TipoConsulta = 82
		BEGIN
				DECLARE @ConcepFiltro varchar(200) = '';  
				IF @Opc = 1
				BEGIN
						set @ConcepFiltro = 'AND A.IdConcepto <> ''MOD'' ';
					
				END	
				IF @Opc = 2
				BEGIN
						set @ConcepFiltro = 'AND A.IdConcepto = ''MOD'' ';
					
				END	
						SET @Qry = '
		
					SELECT DISTINCT *FROM  (
						select B.nIdArchivo [nID],
										   A.nIdTracking, 
										   B.Nombre [sNombre],
										   B.Archivo [FileData],
										   B.Extension [sExtension], 
										   A.ConceptoDesc [Concepto],
										   ''Proyeccion''  [Tipo]
									 FROM [HNT_TRZ].logistics.Tracking_ProyeccionReal A 
									INNER JOIN [HNT-Files].dbo.File_CFDI_HNT_TRZ B ON A.nIdArchivo = B.nIdArchivo 
									WHERE A.nIdTracking = '+cast(@IdTracking as varchar)+' '+@ConcepFiltro+'
						union all
						select B.nIdArchivo [nID],
										   A.nIdTracking, 
										   B.Nombre [sNombre],
										   B.ArchivoPDF [FileData],
										   ''.pdf'' [sExtension], 
										   A.ConceptoDesc [Concepto],
										   ''Proyeccion''  [Tipo]
									 FROM [HNT_TRZ].logistics.Tracking_ProyeccionReal A 
									INNER JOIN [HNT-Files].dbo.File_CFDI_HNT_TRZ B ON A.nIdArchivo = B.nIdArchivo
									WHERE A.nIdTracking = '+cast(@IdTracking as varchar)+' '+@ConcepFiltro+'
								) T0 ORDER BY T0.nID, T0.sExtension
								
									'
									

							EXECUTE (@Qry)
		END

	IF @TipoConsulta = 83
	BEGIN 
		
			SELECT ISNULL(QryGroup31,'N') [Propiedad] FROM SBOCTRZ.dbo.OCRD WHERE CardCode = @CardCode		
	END

	IF @TipoConsulta = 84
		BEGIN
				
						
				 IF @Opc = 1 AND @TipoTracking = 2 
					BEGIN
						IF @TipoDescarga = 8 
							BEGIN
							SET @Tipo = 'Total CTRZ'

										SET @Qry = '			 
											SELECT DISTINCT *, '''+@Tipo+''' [Tipo] FROM (
													select 
															 nIdArchivo [ID]
															,Nombre
															,Archivo [FileData]
															, Extension [Ext]
														
													from [HNT-Files].dbo.File_CFDI_HNT_TRZ 
													where nIdArchivo IN('+@nIdFiltro+')
													UNION ALL
													select 
														  nIdArchivo[ID]
														  ,Nombre
														  ,ArchivoPDF [FileData]
														  , ''.pdf'' [Ext] 
														 
													from  [HNT-Files].dbo.File_CFDI_HNT_TRZ 
													where nIdArchivo  IN ('+@nIdFiltro+') 
													UNION ALL
													SELECT 
														 nID [ID]
														, sNombre [Nombre]
														,fArchivo [FileData]
														, sExtension [Ext] 
														
												 FROM [HNT-Files].dbo.Files_Tracking_HNT_TRZ 
												 WHERE nIdTracking = '+cast(@IdTracking AS VARCHAR)+' 


											)T0 ORDER BY T0.ID, T0.Ext
										';		
							END														
								
					END


			ELSE IF @Opc = 2  AND @TipoTracking = 1 
			BEGIN					
				IF @TipoDescarga = 8
					BEGIN
							SET @Tipo = 'Total DPJ'
					END
					
				IF @TipoDescarga IN(8)
						BEGIN
								SET @Qry = '
		
												SELECT DISTINCT *FROM  (
											select 															  
															   B.Nombre [Nombre],
															   B.Archivo [FileData],
															   B.Extension [Ext], 
															   '''+@Tipo+'''  [Tipo]
														 FROM [Halconet].logistics.Tracking_ProyeccionReal A 
														INNER JOIN [HNT-Files].dbo.File_CFDI B ON A.nIdArchivo = B.nIdArchivo
														WHERE A.nIdTracking = '+cast(@IdTracking AS VARCHAR)+'    
											union all
											select 															   
															   B.Nombre [Nombre],
															   B.ArchivoPDF [FileData],
															   ''.pdf'' [Ext],
															   '''+@Tipo+'''  [Tipo]
														 FROM [Halconet].logistics.Tracking_ProyeccionReal A 
														INNER JOIN [HNT-Files].dbo.File_CFDI B ON A.nIdArchivo = B.nIdArchivo  
														WHERE  A.nIdTracking = '+cast(@IdTracking AS VARCHAR)+' 

											union all

											select  sNombre [Nombre],
											fArchivo [FileData], 
											sExtension [Ext], '''+@Tipo+''' [Tipo]
											from  [HNT-Files].[dbo].[Files_Tracking]									
											where nIdTracking = '+cast(@IdTracking AS VARCHAR)+' 

													) T0 ORDER BY T0.Nombre, T0.Ext
								
								
									'
					

						END
											
										
			END

			ELSE IF @Opc = 1  AND @TipoTracking = 1 --- NEW DC
			BEGIN					
				IF @TipoDescarga = 8
					BEGIN
							SET @Tipo = 'Total CTRZ'
					END
					
				IF @TipoDescarga IN(8)
						BEGIN
								SET @Qry = '
		
											SELECT DISTINCT *FROM  (
											select 															  
															   B.Nombre [Nombre],
															   B.Archivo [FileData],
															   B.Extension [Ext], 
															   '''+@Tipo+'''  [Tipo]
														 FROM HNT_TRZ.logistics.Tracking_ProyeccionReal A 
														INNER JOIN [HNT-Files].dbo.File_CFDI_HNT_TRZ B ON A.nIdArchivo = B.nIdArchivo
														WHERE A.nIdTracking = '+cast(@IdTracking AS VARCHAR)+'    
											union all
											select 															   
															   B.Nombre [Nombre],
															   B.ArchivoPDF [FileData],
															   ''.pdf'' [Ext],
															   '''+@Tipo+'''  [Tipo]
														 FROM HNT_TRZ.logistics.Tracking_ProyeccionReal A 
														INNER JOIN [HNT-Files].dbo.File_CFDI_HNT_TRZ B ON A.nIdArchivo = B.nIdArchivo  
														WHERE  A.nIdTracking = '+cast(@IdTracking AS VARCHAR)+' 

											union all

											select  sNombre [Nombre],
											fArchivo [FileData], 
											sExtension [Ext], '''+@Tipo+''' [Tipo]
											from  [HNT-Files].[dbo].[Files_Tracking_HNT_TRZ]									
											where nIdTracking = '+cast(@IdTracking AS VARCHAR)+' 

													) T0 ORDER BY T0.Nombre, T0.Ext
								
								
									'
					

						END
											
										
			END
			

		
				execute (@Qry)
			
							  			
		END 

	IF @TipoConsulta = 100
	BEGIN			
			SELECT 
					 A.nIdTracking 			
					, CL.CardCode 
					, CL.CardName  
					, B.sFactura   ---datos			
					, C.DocNum  [FacturaReserva]
					, DD.DocNum [EM]
					, A.sPedimento [Pedimento]
					, IG.nTasaIGI  						
					, CONVERT(varchar, DD.DocDate,23) [FechaEM]	
					--, C.DocTotal  [ImporteF]	
					, CASE WHEN C.DocCur = 'USD' THEN C.DocTotalFC
						   WHEN C.DocCur = '$' THEN C.DocTotal
						   END  [ImporteF]	
			FROM logistics.Tracking_Encabezado A
			INNER JOIN logistics.Tracking_Facturas B ON B.nIdTracking = A.nIdTracking AND B.bActivo = 1
			INNER JOIN SBOCTRZ.dbo.OPCH C ON CASE WHEN A.nTipoTracking = 1 THEN C.NumAtCard WHEN A.nTipoTracking = 2 THEN CAST(C.DocEntry AS VARCHAR(50)) END = CASE WHEN A.nTipoTracking = 1 THEN B.sFactura WHEN A.nTipoTracking = 2 THEN CAST(B.DocEntrySAP AS VARCHAR(50)) END AND C.DocType = 'I'					    
			INNER JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
			LEFT JOIN SBOCTRZ.dbo.OCRD CL ON CL.CardCode = C.CardCode
			LEFT JOIN SBOCTRZ.dbo.PDN1 D ON D.BaseEntry = CC.DocEntry AND D.BaseLine = CC.LineNum AND D.BaseType = 18
			LEFT JOIN SBOCTRZ.dbo.OPDN DD ON DD.DocEntry = D.DocEntry
			LEFT JOIN SBOCTRZ.dbo.IPF1 E ON E.BaseEntry = D.DocEntry AND E.OrigLine = D.LineNum AND E.BaseType = 20
			LEFT JOIN SBOCTRZ.dbo.OIPF EE ON EE.DocEntry = E.DocEntry
			LEFT JOIN logistics.Tracking_EM_IGI IG ON IG.nIdTracking = A.nIdTracking AND IG.DocEntry = DD.DocEntry
			WHERE A.bActivo = 1 AND B.bActivo = 1 AND  A.nIdTracking = @IdTracking
			GROUP BY a.nIdTracking, A.nTipoTracking, A.sCodAlmacenDestino, CL.CardCode, CL.CardName, B.sFactura, C.DocEntry, C.DocNum, DD.DocEntry, DD.DocNum, A.sPedimento, IG.nTasaIGI, EE.DocNum, EE.U_EstadoEntrega, DD.DocDate, C.DocTotal,  C.DocTotalFC, C.DocCur, C.DocTotalFC
			ORDER BY A.nIdTracking
		
	END

		IF @TipoConsulta = 101
	BEGIN			
		
				BEGIN TRY
			          BEGIN TRANSACTION 
							UPDATE HNT_TRZ.logistics.Tracking_Encabezado set ComentariosComercio = @Comentarios where nIdTracking = @IdTracking 
							SELECT 'Registro Correcto' [MESSAGE]		
							      ,'SUCCESS' [TIPO]	

				      COMMIT TRANSACTION

			END TRY
					BEGIN CATCH
						 		    
								SELECT 'Error: '+ ERROR_MESSAGE() [MESSAGE]		
									   ,'ERROR' [TIPO]	
								
								ROLLBACK TRANSACTION
					END CATCH;

	END

	--DC
	IF @TipoConsulta = 102
	BEGIN					
		  SELECT IdTrackingPR, ConceptoDesc FROM [HNT_TRZ].[logistics].[Tracking_ProyeccionReal] WHERE Tipo = 2 AND nIdTracking = @IdTracking
	END
	
	--DC
	IF @TipoConsulta = 103
	BEGIN			
		
				BEGIN TRY
			          BEGIN TRANSACTION 
							UPDATE [HNT_TRZ].[logistics].[Tracking_ProyeccionReal] set Tipo = 3 where IdTrackingPR = @IdTrackingPR 
							SELECT 'Registro Correcto' [MESSAGE]		
							      ,'SUCCESS' [TIPO]	

				      COMMIT TRANSACTION

			END TRY
					BEGIN CATCH
						 		    
								SELECT 'Error: '+ ERROR_MESSAGE() [MESSAGE]		
									   ,'ERROR' [TIPO]	
								
								ROLLBACK TRANSACTION
					END CATCH;

	END


	--DC
    IF @TipoConsulta = 104
	BEGIN
			DECLARE @TrackingRel INT = (select COUNT(IdTrackingPR) from [HNT_TRZ].logistics.Tracking_ProyeccionReal where nIdArchivo = @nIdArchivo);
			IF @TrackingRel = 1
			BEGIN  
				 delete from [HNT-Files].dbo.File_CFDI_HNT_TRZ where nIdArchivo = @nIdArchivo
				 select 'Los archivos se han eliminado correctamente' Msj	
			END
			ELSE
			BEGIN
					UPDATE [HNT_TRZ].[logistics].[Tracking_ProyeccionReal] set nIdArchivo = NULL where IdTrackingPR = @IdTrackingPR 
					select 'El archivo se ha desasociado del folio tracking correctamente' Msj
			END			
	END


	
	IF @TipoConsulta = 105
	BEGIN		

		--DECLARE @TipoTracking int  = 1;
	    --DECLARE @Factura varchar(1000) = 'SH065817'	
		SELECT 
				C.DocEntry, 
				DD.DocNum,
				CC.BaseType
		INTO #TmpFactConEM
		FROM SBOCTRZ.dbo.OPCH C
		LEFT JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
		LEFT JOIN SBOCTRZ.dbo.PDN1 D ON D.BaseEntry = CC.DocEntry AND D.BaseLine = CC.LineNum  --AND D.BaseType = 18
		LEFT JOIN SBOCTRZ.dbo.OPDN DD ON DD.DocEntry = D.DocEntry
		WHERE CASE WHEN @TipoTracking = 1 THEN C.NumAtCard WHEN @TipoTracking = 2 THEN CAST(C.DocEntry AS VARCHAR(50)) END = @Factura
		AND C.DocType = 'I'	--AND DD.DocNum IS NOT NULL
		GROUP BY  C.DocEntry, C.DocNum, DD.DocEntry, DD.DocNum, CC.BaseType

		IF (SELECT COUNT(DocEntry) fROM #TmpFactConEM) = 0
		BEGIN
				 SELECT 0 [Valido], 'No se encontro relación para esta factura de reserva: ' + @Factura [Mensaje]
		END
		ELSE
		BEGIN
		IF (SELECT COUNT(DocEntry) fROM #TmpFactConEM WHERE /*BaseType <> 22*/ BaseType not in(22, -1)  ) > 0
			BEGIN
				  SELECT 0 [Valido], 'No se puede generar tracking para esta factura de reserva: ' + @Factura [Mensaje]
			END
			ELSE
			BEGIN
				  SELECT 1 [Valido], 'Factura de reserva valida.' [Mensaje]
			END
		END 
		DROP TABLE #TmpFactConEM	
	END
	IF @TipoConsulta = 106
	BEGIN			
		SELECT 
				C.NumAtCard, 
				C.DocEntry, 
				DD.DocNum,
				CC.BaseType, 
				C.CardCode,
				OC.QryGroup51 --- cambiar la propiedad por la que me den 
		INTO #TmpFactLotes
		FROM SBOCTRZ.dbo.OPCH C
		LEFT JOIN SBOCTRZ.dbo.PCH1 CC ON CC.DocEntry = C.DocEntry
		LEFT JOIN SBOCTRZ.dbo.PDN1 D ON D.BaseEntry = CC.DocEntry AND D.BaseLine = CC.LineNum  --AND D.BaseType = 18
		LEFT JOIN SBOCTRZ.dbo.OPDN DD ON DD.DocEntry = D.DocEntry
		LEFT JOIN SBOCTRZ.dbo.OCRD OC ON OC.CardCode = C.CardCode
		WHERE  CASE WHEN @TipoTracking = 1 THEN C.NumAtCard WHEN @TipoTracking = 2 THEN CAST(C.DocEntry AS VARCHAR(50)) END = @Factura
		AND C.DocType = 'I' AND OC.QryGroup51 = 'Y'
		GROUP BY  C.DocEntry, C.DocNum, DD.DocEntry, DD.DocNum, CC.BaseType, C.CardCode, OC.QryGroup51,  C.NumAtCard 
	
		IF ( SELECT COUNT(QryGroup51) FROM #TmpFactLotes ) > 0
			BEGIN
			 
					IF @TipoTracking = 2 
					BEGIN
					SELECT 0 [Valido], 'Esta factura solo se puede crear para un tracking de importación. ' + @Factura [Mensaje]	
					END
					ELSE 
					BEGIN
					SELECT 0 [Valido], 'Esta factura se le debe agregar información para lotes: ' + @Factura [Mensaje]	
					END
				 		 
			END
			ELSE
			BEGIN
					SELECT 1 [Valido], 'Factura de reserva sin lotes.' [Mensaje]
			END
		
		DROP TABLE #TmpFactLotes
	END
	IF @TipoConsulta = 107
	BEGIN
		IF @Tipo = 1
		BEGIN
			SELECT * FROM logistics.Tracking_ConceptosProyeccion;			
		END
		IF @Tipo = 2
		BEGIN
			SELECT * FROM SBOLOGTRANSP.dbo.OCRD where frozenFor = 'N';
		END
		IF @Tipo = 3 --Modalidades
		BEGIN
			SELECT  'RL' IdModalidad, 'Rail' Nombre
			UNION ALL
			SELECT  'TK' IdModalidad	, 'Truck' Nombre
		END
		IF @Tipo = 4 -- Agente aduanal
		BEGIN
			SELECT  'ZAYR' IdAgenteAduanal, 'Zayro' Nombre
			UNION ALL
			SELECT  'ADCE' IdAgenteAduanal	, 'ADCE' Nombre
			UNION ALL
			SELECT  'POIN' IdAgenteAduanal	, 'Point' Nombre
		END
		IF @Tipo = 5 -- Forwarders
		BEGIN		
			SELECT  'HAHU' IdForwarder, 'Harbour Hub' Nombre
			UNION ALL
			SELECT  'ASIS' IdForwarder	, 'Asia-startrans' Nombre
			UNION ALL
			SELECT  'JORE' IdForwarder	, 'JOREAL' Nombre
			UNION ALL
			SELECT  'SUNN' IdForwarder	, 'SUNNINESS' Nombre
			UNION ALL
			SELECT  'OCCL' IdForwarder	, 'OTROS CCL' Nombre
			UNION ALL
			SELECT  'OSCL' IdForwarder	, 'OTROS SCL' Nombre
		END
		IF @Tipo = 6 -- Pesos Contenedores
		BEGIN
			SELECT  '25' IdPesoContenedor, '25 Toneladas' Nombre
			UNION ALL
			SELECT  '27' IdPesoContenedor	, '27 Toneladas' Nombre
		END
		IF @Tipo = 7
		BEGIN
			---- Declarar la tabla para almacenar los resultados
			--DECLARE @Resultados TABLE (
			--	Concepto NVARCHAR(100),
			--	Tarifa DECIMAL(18, 2),
			--	Moneda NVARCHAR(100),
			--	NombreTarifa NVARCHAR(100),
			--	SN INT 
			--);

			---- Validar Tarifas de CUENTA DE GASTOS
			--INSERT INTO @Resultados (Concepto, Tarifa, Moneda, NombreTarifa, SN)
			--SELECT 
			--	'CGA', r.Tarifa, r.Moneda, '', r.SN
			--FROM logistics.Tracking_ReglasProyeccion r
			--WHERE r.CampoRegla = 'CGA'
			--	AND r.Modalidad = @Modalidad
			--	AND r.Contenedores = @Contenedores;

			---- Validar Tarifas de Honorarios
			--INSERT INTO @Resultados (Concepto, Tarifa, Moneda, NombreTarifa, SN)
			--SELECT 
			--	'HON', r.Tarifa, r.Moneda, '', r.SN
			--FROM logistics.Tracking_ReglasProyeccion r
			--WHERE r.CampoRegla = 'HON'
			--	AND r.AgenteAduanal = @AgenteAduanal
			--	AND r.Contenedores = @Contenedores;

			---- Validar Tarifas de Maniobras
			--INSERT INTO @Resultados (Concepto, Tarifa, Moneda, NombreTarifa, SN)
			--SELECT 
			--	'MCO', r.Tarifa, r.Moneda, r.sNombreTarifa, r.SN
			--FROM logistics.Tracking_ReglasProyeccion r
			--WHERE r.CampoRegla = 'MCO'
			--	AND r.Destino = @Destino
			--	AND r.Aduana = @Aduana
			--	AND r.Modalidad = @Modalidad;

			---- Validar Tarifas de Demoras
			--INSERT INTO @Resultados (Concepto, Tarifa, Moneda, NombreTarifa, SN)
			--SELECT 
			--	'DEM', r.Tarifa, r.Moneda, r.sNombreTarifa, r.SN
			--FROM logistics.Tracking_ReglasProyeccion r
			--WHERE r.CampoRegla = 'DEM'			
			--	AND r.Modalidad = @Modalidad;

		
			---- Retornar los resultados
			--SELECT * FROM @Resultados;

			CREATE TABLE #Resultados (
				Concepto NVARCHAR(100),
				Tarifa DECIMAL(18, 2),
				Moneda NVARCHAR(100),
				NombreTarifa NVARCHAR(100),
				SN INT
			);

			DECLARE @SQL NVARCHAR(MAX);
			DECLARE @CampoRegla NVARCHAR(100);
			DECLARE @Condiciones NVARCHAR(MAX);
			DECLARE @Parametros NVARCHAR(MAX);

			DECLARE c_Reglas CURSOR FOR
			SELECT DISTINCT CampoRegla FROM logistics.Tracking_ReglasCondiciones

			OPEN c_Reglas;
			FETCH NEXT FROM c_Reglas INTO @CampoRegla;

			WHILE @@FETCH_STATUS = 0
			BEGIN
				SET @Condiciones = '';
				SET @Parametros = N'@Modalidad VARCHAR(50), @AgenteAduanal VARCHAR(50), @Forwarder VARCHAR(50), @Contenedores INT, @Destino VARCHAR(50), @Aduana VARCHAR(150)';

				-- Construcción manual de condiciones
				SELECT @Condiciones = 
					CASE WHEN Modalidad = 1 THEN 'r.Modalidad = @Modalidad AND ' ELSE '' END +
					CASE WHEN AgenteAduanal = 1 THEN 'r.AgenteAduanal = @AgenteAduanal AND ' ELSE '' END +
					CASE WHEN Forwarder = 1 THEN 'r.Forwarder = @Forwarder AND ' ELSE '' END +
					CASE WHEN Aduana = 1 THEN 'r.Aduana = @Aduana AND ' ELSE '' END +
					CASE WHEN Contenedores = 1 THEN 'r.Contenedores = @Contenedores AND ' ELSE '' END +        
					CASE WHEN Destino = 1 THEN 'r.Destino = @Destino AND ' ELSE '' END
				FROM logistics.Tracking_ReglasCondiciones 
				WHERE CampoRegla = @CampoRegla;

				-- Quitar el último "AND " si hay condiciones
				IF LEN(@Condiciones) > 4 
					SET @Condiciones = LEFT(@Condiciones, LEN(@Condiciones) - 4);
				ELSE 
					SET @Condiciones = '1 = 1'; -- Para evitar errores si no hay condiciones

				-- Construcción de la consulta dinámica
				SET @SQL = '
				INSERT INTO #Resultados (Concepto, Tarifa, Moneda, NombreTarifa, SN)
				SELECT 
					''' + @CampoRegla + ''', r.Tarifa, r.Moneda, r.sNombreTarifa, r.SN
				FROM logistics.Tracking_ReglasProyeccion r
				WHERE r.CampoRegla = ''' + @CampoRegla + ''' AND ' + @Condiciones;

				--SELECT @CampoRegla, @Condiciones

				PRINT @SQL; -- Depuración: Ver la consulta generada

				-- Ejecutar la consulta dinámica
				EXEC sp_executesql @SQL, 
					@Parametros, 
					@Modalidad = @Modalidad, 
					@AgenteAduanal = @AgenteAduanal, 
					@Forwarder = @Forwarder, 
					@Contenedores = @Contenedores, 
					@Destino = @Destino, 
					@Aduana = @Aduana;

				FETCH NEXT FROM c_Reglas INTO @CampoRegla;
			END;

			CLOSE c_Reglas;
			DEALLOCATE c_Reglas;

			-- Retornar los resultados
			SELECT * FROM #Resultados;

			-- Eliminar la tabla temporal
			DROP TABLE #Resultados;
		END
		IF @Tipo = 8
		BEGIN
			-- Declarar la tabla para almacenar los resultados
			DECLARE @ResultadosTarifas TABLE (
				Concepto NVARCHAR(100),
				Tarifa DECIMAL(18, 2),
				Moneda NVARCHAR(100),
				NombreTarifa NVARCHAR(100),
				TipoContenedor NVARCHAR(100),
				NumContenedor NVARCHAR(200)
			);

			-- Validar FLETES TERRESTRES
			INSERT INTO @ResultadosTarifas (Concepto, Tarifa, Moneda, NombreTarifa, TipoContenedor, NumContenedor)
			SELECT 
				'FTE', 
				r.Tarifa, 
				r.Moneda,
				r.sNombreTarifa,
				r.sTipoContenedor,
				@NumContenedor
			FROM logistics.Tracking_ReglasProyeccion r
			WHERE r.CampoRegla = 'FTE'
				AND r.Modalidad = @Modalidad
				AND r.Destino = @Destino
				AND r.Peso = @PesoContenedor;

			-- Retornar los resultados
			SELECT * FROM @ResultadosTarifas;
		END
		IF @Tipo = 9 -- Datos Enable
		BEGIN
			-- Declarar la tabla para almacenar los resultados
			DECLARE @ResultadosEnable TABLE (
				Concepto NVARCHAR(100),
				TipoRegla NVARCHAR(100),
				Enable INT
			);

			-- Validar CARGOS LOCALES
			INSERT INTO @ResultadosEnable (Concepto, TipoRegla, Enable)
			SELECT 
				'CRL', 
				r.TipoRegla, 
				r.Enable			
			FROM logistics.Tracking_ReglasProyeccion r
			WHERE r.CampoRegla = 'CRL'
				AND r.Forwarder = @Forwarder			

			-- Retornar los resultados
			SELECT * FROM @ResultadosEnable;
		END
		IF @Tipo = 10
		BEGIN
			UPDATE [Halconet].logistics.Tracking_Encabezado SET EditProyeccion=@StatusProyeccion WHERE nIdTracking=@IdTracking;
		END
		IF @Tipo = 11 --Aduanas
		BEGIN
			SELECT  'Manzanillo' IdAduana, 'Manzanillo' Nombre
			UNION ALL
			SELECT  'Lazaro' IdAduana	, 'Lázaro' Nombre	
			UNION ALL
			SELECT  'Ensenada' IdAduana	, 'Ensenada' Nombre	
			UNION ALL
			SELECT  'Veracruz' IdAduana	, 'Veracruz' Nombre	
		END
		IF @Tipo = 12
		BEGIN
			IF @IdTrackingPR < 0	
			BEGIN
				INSERT INTO [Halconet].logistics.Tracking_Logistica (
					nIdTracking,
					sContenedor,
					TipoConcepto,
					Moneda,								
					EstimadoCorte				
				) 
				VALUES (
					@IdTracking,
					@Contenedor,  
					@IdConcepto,  
					@Moneda,      				
					@MontoProyectado				
				);	
			END
			ELSE 
			BEGIN
				UPDATE [Halconet].logistics.Tracking_Logistica
				SET 				
					Moneda = @Moneda,				
					EstimadoCorte = @MontoProyectado				
				WHERE 
					Id = @IdTrackingPR		
			END
		END	
		IF @Tipo = 13
		BEGIN
			--SELECT * FROM [Halconet].logistics.Tracking_FacturasLogistica WHERE nIdTracking=@IdTracking AND TipoConcepto=@Concepto AND sContenedor=@Contenedor;
			SELECT
				a.nId,
				a.nIdArchivo,	
				b.Nombre,
				b.sFolio
			FROM logistics.Tracking_FacturasLogistica a
			INNER JOIN [HNT-Files].dbo.File_CFDI b ON a.nIdArchivo = b.nIdArchivo
			WHERE a.nIdTracking=@IdTracking AND a.TipoConcepto=@Concepto AND a.sContenedor=@Contenedor;
		END
		IF @Tipo = 14
		BEGIN
			-- Declarar la tabla temporal
			DECLARE @Tracking_GridManager TABLE (
				Concepto NVARCHAR(50),
				Celda INT
			);

			-- Insertar los datos en la tabla temporal
			INSERT INTO @Tracking_GridManager (Concepto, Celda)
			VALUES 
				('CGA', 7), ('CGA', 8), ('CGA', 9),
				('UVA', 7), ('UVA', 8), ('UVA', 9),
				('DEM', 7), ('DEM', 8), ('DEM', 9),
				('FTE', 7), ('FTE', 8), ('FTE', 9),
				('MCO', 7), ('MCO', 8), ('MCO', 9),
				('HON', 7), ('HON', 8), ('HON', 9), ('HON', 10);

			-- Consultar los datos (opcional)
			SELECT * FROM @Tracking_GridManager;

		END
		IF @Tipo = 15
		BEGIN
			SELECT 						
				Id,
				CampoRegla,
				ISNULL(Modalidad, 'NP') Modalidad,
				ISNULL(AgenteAduanal, 'NP') AgenteAduanal,				
				ISNULL(Forwarder, 'NP') Forwarder,				
				ISNULL(Aduana, 'NP') Aduana,				
				ISNULL(Contenedores, 'No Aplica') Contenedores,				
				ISNULL(Destino, 'NP') Destino,		
				ISNULL(Peso, 'NP') Peso,		
				Tarifa,
				Moneda,	
				StatusRegla,
				--ISNULL(sNombreTarifa, 'N/A') sNombreTarifa,
				sNombreTarifa,
				ISNULL(CAST(SN AS VARCHAR), '-1') SN,
				sTipoContenedor,
				TipoRegla		
			FROM [logistics].[Tracking_ReglasProyeccion] 
			WHERE TipoRegla = 'Tarifa'

			
			--Modalidades
			SELECT  'RL' IdModalidad, 'Rail' Nombre
			UNION ALL
			SELECT  'TK' IdModalidad	, 'Truck' Nombre
			UNION ALL
			SELECT  'NP' IdModalidad	, 'No Aplica' Nombre


			--Conceptos Proyección
			SELECT * FROM logistics.Tracking_ConceptosProyeccion;

			--Agentes Aduanales
			SELECT  'ZAYR' IdAgenteAduanal, 'Zayro' Nombre
			UNION ALL
			SELECT  'ADCE' IdAgenteAduanal	, 'ADCE' Nombre
			UNION ALL
			SELECT  'POIN' IdAgenteAduanal	, 'Point' Nombre
			UNION ALL
			SELECT  'NP' IdAgenteAduanal	, 'No Aplica' Nombre


			--Forwarders
			SELECT  'HAHU' IdForwarder, 'Harbour Hub' Nombre
			UNION ALL
			SELECT  'ASIS' IdForwarder	, 'Asia-startrans' Nombre
			UNION ALL
			SELECT  'JORE' IdForwarder	, 'JOREAL' Nombre
			UNION ALL
			SELECT  'SUNN' IdForwarder	, 'SUNNINESS' Nombre
			UNION ALL
			SELECT  'OCCL' IdForwarder	, 'OTROS CCL' Nombre
			UNION ALL
			SELECT  'OSCL' IdForwarder	, 'OTROS SCL' Nombre
			UNION ALL
			SELECT  'NP' IdForwarder	, 'No Aplica' Nombre


			--Aduanas
			SELECT  'Manzanillo' IdAduana, 'Manzanillo' Nombre
			UNION ALL
			SELECT  'Lazaro' IdAduana	, 'Lázaro' Nombre	
			UNION ALL
			SELECT  'Ensenada' IdAduana	, 'Ensenada' Nombre	
			UNION ALL
			SELECT  'Veracruz' IdAduana	, 'Veracruz' Nombre	
			UNION ALL
			SELECT  'NP' IdAduana	, 'No Aplica' Nombre

			--Almacénes de Destino
			SELECT 
				WhsCode[Codigo], 
				WhsName[Nombre] 
			FROM SB1CPEJ.DBO.OWHS where U_Vlgx_lvl = 'C' and WhsCode NOT IN('E1')
			UNION ALL
			SELECT 'NP' Codigo, 'No Aplica' Nombre


			--Status Reglas
			SELECT 1 IdStatus, 'Activo' Nombre
			UNION ALL
			SELECT 0 IdStatus, 'Inactivo' Nombre


			--Pesos de contenedores
			SELECT  '25' IdPesoContenedor, '25 Toneladas' Nombre
			UNION ALL
			SELECT  '27' IdPesoContenedor	, '27 Toneladas' Nombre
			UNION ALL
			SELECT  'NP' IdPesoContenedor	, 'No Aplica' Nombre


			--Numero de contenedores			
			SELECT  '1' NumContenedor, '1 Contenedor' Nombre
			UNION ALL
			SELECT  '2' NumContenedor	, '2 Contenedores' Nombre
			UNION ALL
			SELECT  'NP' NumContenedor	, 'No Aplica' Nombre


			--Socios de negocios (Proveedores)
			Select '-1' CardCode, '- Sin socio de negocios - ' CardName
			UNION ALL
			Select  A.CardCode, ' [' + A.CardCode + '] ' + CardName--, A.QRYGROUP31
			From SB1CPEJ.dbo.OCRD A  WHERE  A.CardType = 'S'	

			--Monedas
			SELECT  '$' IdMoneda, '$' Nombre
			UNION ALL
			SELECT  'USD' IdMoneda	, 'USD' Nombre			
		END
		IF @Tipo = 16
		BEGIN
			DECLARE @CamposInsertar NVARCHAR(MAX);
			DECLARE @ColumnasInsertar NVARCHAR(MAX);
			DECLARE @CamposFaltantes NVARCHAR(MAX) = '';
			DECLARE @EsValido BIT = 1;

			IF @TipoAccion = 'create'
			BEGIN				
				IF @TarifaRegla IS NULL OR @Moneda IS NULL OR @StatusRegla IS NULL 
				BEGIN
					SELECT 'Por favor, complete la información en los campos obligatorios marcados en rojo.' Mensaje, 1 Registro
				END
				ELSE
				BEGIN
					DECLARE c_Reglas CURSOR FOR
					SELECT DISTINCT CampoRegla FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla=@Concepto;

					OPEN c_Reglas;
					FETCH NEXT FROM c_Reglas INTO @CampoRegla;

					WHILE @@FETCH_STATUS = 0
					BEGIN
						-- Inicializar las variables dentro del loop para evitar problemas con re-declaraciones
						SET @Condiciones = '';
						SET @Parametros = N'@Modalidad VARCHAR(50), @AgenteAduanal VARCHAR(50), @Forwarder VARCHAR(50), 
						@ContenedoresRegla VARCHAR(50), @Destino VARCHAR(50), @Aduana VARCHAR(150), @TarifaRegla DECIMAL(18,2), 
						@Moneda VARCHAR(50), @SocioDeNegocios VARCHAR(100), @NombreTarifa VARCHAR(100), @StatusRegla INT, @Concepto VARCHAR(50),  @PesoRegla VARCHAR(50)';

							-- Validación de valores faltantes (NULL o "NP")
						SELECT @CamposFaltantes = STRING_AGG(Descripcion, ', ')
						FROM (
							SELECT 'Modalidad' AS Descripcion FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Modalidad = 1 AND (@Modalidad IS NULL OR @Modalidad = 'NP')
							UNION ALL
							SELECT 'Agente Aduanal' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND AgenteAduanal = 1 AND (@AgenteAduanal IS NULL OR @AgenteAduanal = 'NP')
							UNION ALL
							SELECT 'Forwarder' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Forwarder = 1 AND (@Forwarder IS NULL OR @Forwarder = 'NP')
							UNION ALL
							SELECT 'Aduana' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Aduana = 1 AND (@Aduana IS NULL OR @Aduana = 'NP')
							UNION ALL
							SELECT 'Contenedores' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Contenedores = 1 AND (@ContenedoresRegla IS NULL OR @ContenedoresRegla = 'NP')
							UNION ALL
							SELECT 'Destino' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Destino = 1 AND (@Destino IS NULL OR @Destino = 'NP')
							UNION ALL
							SELECT 'Peso' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Peso = 1 AND (@PesoRegla IS NULL OR @PesoRegla = 'NP')
						) AS Faltantes;

						IF @CamposFaltantes IS NOT NULL 
						BEGIN						
							SELECT 'Faltan los siguientes campos para guardar el registro: ' + @CamposFaltantes Mensaje, 1 Registro;
							SET @EsValido = 0;
						END

						-- Si la validación falla, no continuar con la ejecución del SQL dinámico
						IF @EsValido = 1
						BEGIN
							-- Construcción de condiciones
							SELECT @Condiciones = 
								CASE WHEN Modalidad = 1 THEN 'Modalidad = @Modalidad AND ' ELSE '' END +
								CASE WHEN AgenteAduanal = 1 THEN 'AgenteAduanal = @AgenteAduanal AND ' ELSE '' END +
								CASE WHEN Forwarder = 1 THEN 'Forwarder = @Forwarder AND ' ELSE '' END +
								CASE WHEN Aduana = 1 THEN 'Aduana = @Aduana AND ' ELSE '' END +
								CASE WHEN Contenedores = 1 THEN 'Contenedores = @ContenedoresRegla AND ' ELSE '' END +        
								CASE WHEN Destino = 1 THEN 'Destino = @Destino AND ' ELSE '' END +
								CASE WHEN Peso = 1 THEN 'Peso = CAST(@PesoRegla AS INT) AND ' ELSE '' END
							FROM logistics.Tracking_ReglasCondiciones 
							WHERE CampoRegla = @CampoRegla;

							SELECT @CamposInsertar = STRING_AGG(Valor, ', ')
							FROM (
								SELECT '@Modalidad' AS Valor FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Modalidad = 1
								UNION ALL
								SELECT '@AgenteAduanal' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND AgenteAduanal = 1
								UNION ALL
								SELECT '@Forwarder' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Forwarder = 1
								UNION ALL
								SELECT '@Aduana' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Aduana = 1
								UNION ALL
								SELECT '@ContenedoresRegla' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Contenedores = 1
								UNION ALL
								SELECT '@Destino' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Destino = 1
								UNION ALL
								SELECT '@PesoRegla' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Peso = 1
							) AS Campos;

							SELECT @ColumnasInsertar = STRING_AGG(Valor, ', ')
							FROM (
								SELECT 'Modalidad' AS Valor FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Modalidad = 1
								UNION ALL
								SELECT 'AgenteAduanal' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND AgenteAduanal = 1
								UNION ALL
								SELECT 'Forwarder' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Forwarder = 1
								UNION ALL
								SELECT 'Aduana' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Aduana = 1
								UNION ALL
								SELECT 'Contenedores' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Contenedores = 1
								UNION ALL
								SELECT 'Destino' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Destino = 1
								UNION ALL
								SELECT 'Peso' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Peso = 1
							) AS Campos;


							-- Quitar el último "AND " si hay condiciones
							IF LEN(@Condiciones) > 4
								SET @Condiciones = LEFT(@Condiciones, LEN(@Condiciones) - 4);
							ELSE 
								SET @Condiciones = '1 = 1';

							-- Construcción de consulta dinámica
							SET @SQL = '
								IF '''+@Concepto+''' = ''FTE''
								BEGIN 									
									INSERT INTO logistics.Tracking_ReglasProyeccion 
									(CampoRegla, TipoRegla, ' + @ColumnasInsertar + ', Tarifa, Moneda, StatusRegla, sNombreTarifa, SN) 
									VALUES 
									('''+@Concepto+''', ''Tarifa'', ' + @CamposInsertar + ', @TarifaRegla, @Moneda, @StatusRegla, @NombreTarifa, @SocioDeNegocios)
									SELECT ''Si existe el registro'' Mensaje, -1 Registro
								END
								ELSE
								BEGIN
									IF NOT EXISTS ( 
										SELECT 1 
										FROM logistics.Tracking_ReglasProyeccion 
										WHERE CampoRegla = ''' + @CampoRegla + ''' AND ' + @Condiciones + ' 
									)
									BEGIN
										INSERT INTO logistics.Tracking_ReglasProyeccion 
										(CampoRegla, TipoRegla, ' + @ColumnasInsertar + ', Tarifa, Moneda, StatusRegla, sNombreTarifa, SN) 
										VALUES 
										('''+@Concepto+''', ''Tarifa'', ' + @CamposInsertar + ', @TarifaRegla, @Moneda, @StatusRegla, @NombreTarifa, @SocioDeNegocios)
										SELECT ''No se encontraron coincidencias'' Mensaje, -1 Registro
									END
									ELSE
									BEGIN    
										SELECT ''Ya existe una regla con las condiciones que elegiste'' Mensaje, 1 Registro
									END
								END
							';

							-- Ejecutar la consulta dinámica
							EXEC sp_executesql @SQL, 
								@Parametros, 
								@Concepto = @Concepto,
								@Modalidad = @Modalidad, 
								@AgenteAduanal = @AgenteAduanal, 
								@Forwarder = @Forwarder, 
								@ContenedoresRegla = @ContenedoresRegla, 
								@Destino = @Destino, 
								@Aduana = @Aduana,
								@TarifaRegla = @TarifaRegla,
								@Moneda = @Moneda,
								@SocioDeNegocios = @SocioDeNegocios,
								@StatusRegla = @StatusRegla,
								@PesoRegla = @PesoRegla,
								@NombreTarifa = @NombreTarifa;
						END


						FETCH NEXT FROM c_Reglas INTO @CampoRegla;
					END;

					CLOSE c_Reglas;
					DEALLOCATE c_Reglas;
				END				
			END		
			IF @TipoAccion = 'update'
			BEGIN				
				DECLARE c_Reglas CURSOR FOR
				SELECT DISTINCT CampoRegla FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla=@Concepto;

				OPEN c_Reglas;
				FETCH NEXT FROM c_Reglas INTO @CampoRegla;

				WHILE @@FETCH_STATUS = 0
				BEGIN
					-- Inicializar las variables dentro del loop para evitar problemas con re-declaraciones
					SET @Condiciones = '';
					SET @Parametros = N'@Modalidad VARCHAR(50), @AgenteAduanal VARCHAR(50), @Forwarder VARCHAR(50), 
					@ContenedoresRegla VARCHAR(50), @Destino VARCHAR(50), @Aduana VARCHAR(150), @TarifaRegla DECIMAL(18,2), 
					@Moneda VARCHAR(50), @SN VARCHAR(100), @StatusRegla INT, @Concepto VARCHAR(50), @SocioDeNegocios VARCHAR(50), @NombreTarifa VARCHAR(MAX), @PesoRegla VARCHAR(50)';

					--SELECT @CampoRegla

					-- Validación de valores faltantes
					SELECT @CamposFaltantes = STRING_AGG(Descripcion, ', ')
					FROM (
						SELECT 'Modalidad' AS Descripcion FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Modalidad = 1 AND @Modalidad IS NULL
						UNION ALL
						SELECT 'Agente Aduanal' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND AgenteAduanal = 1 AND @AgenteAduanal IS NULL
						UNION ALL
						SELECT 'Forwarder' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Forwarder = 1 AND @Forwarder IS NULL
						UNION ALL
						SELECT 'Aduana' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Aduana = 1 AND @Aduana IS NULL
						UNION ALL
						SELECT 'Contenedores' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Contenedores = 1 AND @ContenedoresRegla IS NULL
						UNION ALL
						SELECT 'Destino' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Destino = 1 AND @Destino IS NULL
						UNION ALL
						SELECT 'Peso' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Peso = 1 AND @PesoRegla IS NULL
					) AS Faltantes;

					IF @CamposFaltantes IS NOT NULL 
					BEGIN
						PRINT 'Faltan los siguientes valores: ' + @CamposFaltantes;

						SELECT 'Faltan los siguientes campos para guardar el registro: ' + @CamposFaltantes Mensaje, -1 Registro;
						SET @EsValido = 0;
					END

					--SELECT @EsValido

					-- Si la validación falla, no continuar con la ejecución del SQL dinámico
					IF @EsValido = 1
					BEGIN
						-- Construcción de condiciones
						SELECT @Condiciones = 
							CASE WHEN Modalidad = 1 THEN 'Modalidad = @Modalidad AND ' ELSE '' END +
							CASE WHEN AgenteAduanal = 1 THEN 'AgenteAduanal = @AgenteAduanal AND ' ELSE '' END +
							CASE WHEN Forwarder = 1 THEN 'Forwarder = @Forwarder AND ' ELSE '' END +
							CASE WHEN Aduana = 1 THEN 'Aduana = @Aduana AND ' ELSE '' END +
							CASE WHEN Contenedores = 1 THEN 'Contenedores = @ContenedoresRegla AND ' ELSE '' END +        
							CASE WHEN Destino = 1 THEN 'Destino = @Destino AND ' ELSE '' END +
							CASE WHEN Peso = 1 THEN 'Peso = CAST(@PesoRegla AS INT) AND ' ELSE '' END
						FROM logistics.Tracking_ReglasCondiciones 
						WHERE CampoRegla = @CampoRegla;

						-- Quitar el último "AND " si hay condiciones
						IF LEN(@Condiciones) > 4
							SET @Condiciones = LEFT(@Condiciones, LEN(@Condiciones) - 4);
						ELSE 
							SET @Condiciones = '1 = 1';

						--SELECT @Condiciones;

						SELECT @CamposInsertar = STRING_AGG(Valor, ', ')
						FROM (
							SELECT 'Modalidad = @Modalidad' AS Valor FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Modalidad = 1
							UNION ALL
							SELECT 'AgenteAduanal = @AgenteAduanal' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND AgenteAduanal = 1
							UNION ALL
							SELECT 'Forwarder = @Forwarder' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Forwarder = 1
							UNION ALL
							SELECT 'Aduana = @Aduana' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Aduana = 1
							UNION ALL
							SELECT 'Contenedores = @ContenedoresRegla' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Contenedores = 1
							UNION ALL
							SELECT 'Destino = @Destino' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Destino = 1
							UNION ALL
							SELECT 'Peso = @PesoRegla' FROM logistics.Tracking_ReglasCondiciones WHERE CampoRegla = @CampoRegla AND Peso = 1
						) AS Campos;

						--SELECT @CamposInsertar;

						--SELECT @Concepto;

						-- Construcción de consulta dinámica
						SET @SQL = '
							IF '''+@Concepto+''' = ''FTE''
							BEGIN 
								UPDATE logistics.Tracking_ReglasProyeccion 
								SET 
									Tarifa='+CAST(@TarifaRegla AS varchar(50))+', 
									Moneda='''+@Moneda+''', 
									StatusRegla='+CAST(@StatusRegla AS varchar(50))+',
									sNombreTarifa='''+CAST(@NombreTarifa AS varchar(MAX))+''', 
									SN='''+CAST(@SocioDeNegocios AS varchar(50))+'''
								WHERE Id = ' + CAST(@IdRegla AS VARCHAR(50)) + '
								SELECT ''Si existe el registro'' Mensaje, -1 Registro        								
							END
							ELSE
							BEGIN
								IF NOT EXISTS ( 
									SELECT 1 
									FROM logistics.Tracking_ReglasProyeccion 
									WHERE CampoRegla = ''' + @CampoRegla + ''' AND ' + @Condiciones + ' 
								)
								BEGIN									            
									UPDATE logistics.Tracking_ReglasProyeccion 
									SET ' + @CamposInsertar + ' 
									WHERE Id = ' + CAST(@IdRegla AS VARCHAR(50)) + '
									SELECT ''No se encontraron coincidencias'' Mensaje, -1 Registro                 
								END
								ELSE
								BEGIN    
									UPDATE logistics.Tracking_ReglasProyeccion 
									SET 
										Tarifa='+CAST(@TarifaRegla AS varchar(50))+', 
										Moneda='''+@Moneda+''', 
										StatusRegla='+CAST(@StatusRegla AS varchar(50))+',
										sNombreTarifa='''+CAST(@NombreTarifa AS varchar(MAX))+''', 
										SN='''+CAST(@SocioDeNegocios AS varchar(50))+'''
									WHERE Id = ' + CAST(@IdRegla AS VARCHAR(50)) + '

									SELECT ''Ya existe una regla con las condiciones que elegiste'' Mensaje, -1 Registro
								END
							END
						';

						

						-- Ejecutar la consulta dinámica
						EXEC sp_executesql @SQL, 
							@Parametros, 
							@Concepto = @Concepto,
							@Modalidad = @Modalidad, 
							@AgenteAduanal = @AgenteAduanal, 
							@Forwarder = @Forwarder, 
							@ContenedoresRegla = @ContenedoresRegla, 
							@Destino = @Destino, 
							@Aduana = @Aduana,
							@TarifaRegla = @TarifaRegla,
							@Moneda = @Moneda,
							@SN = @SN,
							@StatusRegla = @StatusRegla,
							@SocioDeNegocios = @SocioDeNegocios,
							@NombreTarifa = @NombreTarifa,
							@PesoRegla = @PesoRegla;
					END


					FETCH NEXT FROM c_Reglas INTO @CampoRegla;
				END;

				CLOSE c_Reglas;
				DEALLOCATE c_Reglas;
			END
			IF @TipoAccion = 'delete'
			BEGIN
				DELETE FROM logistics.Tracking_ReglasProyeccion WHERE Id=@IdRegla
				
				SELECT 'Ya existe una regla con las condiciones que elegiste' Mensaje, -1 Registro
			END
		END
	END
	IF @TipoConsulta = 108
	BEGIN
		IF @Tipo = 1
		BEGIN

			-- Variables de respuesta
			DECLARE @Message NVARCHAR(500) = ''
			DECLARE @Type NVARCHAR(20) = 'Success'
			DECLARE @NewID INT = 0
			DECLARE @RowsAffected INT = 0

			IF @AccionTarifa = 'INSERT'
			BEGIN			
				IF @POD IS NULL OR LTRIM(RTRIM(@POD)) = ''
					BEGIN
						SET @Type = 'Error'
						SET @Message = 'POD es requerido'
                
						SELECT 0 AS ID, @Message AS Message, @Type AS Type, 0 AS RowsAffected
						RETURN
					END
            
				IF @POL IS NULL OR LTRIM(RTRIM(@POL)) = ''
					BEGIN
						SET @Type = 'Error'
						SET @Message = 'POL es requerido'
                
						SELECT 0 AS ID, @Message AS Message, @Type AS Type, 0 AS RowsAffected
						RETURN
					END
            
				IF @FORWARDER IS NULL OR LTRIM(RTRIM(@FORWARDER)) = ''
					BEGIN
						SET @Type = 'Error'
						SET @Message = 'FORWARDER es requerido'
                
						SELECT 0 AS ID, @Message AS Message, @Type AS Type, 0 AS RowsAffected
						RETURN
					END
            
				-- Validar que al menos una tarifa tenga valor
				IF ISNULL(@COSCO, 0) <= 0 
					AND ISNULL(@MAERSK, 0) <= 0 
					AND ISNULL(@MSC, 0) <= 0 
					AND ISNULL(@COSCO_SPOT, 0) <= 0 
					AND ISNULL(@CMA, 0) <= 0 
					AND ISNULL(@OOCL, 0) <= 0
				BEGIN
					SET @Type = 'Error'
					SET @Message = 'Debe especificar al menos una tarifa válida mayor a 0'
                
					SELECT 0 AS ID, @Message AS Message, @Type AS Type, 0 AS RowsAffected
					RETURN
				END
            
				-- Validar fechas de vigencia
				IF @FECHA_INICIO_VALIDITY IS NOT NULL 
					AND @FECHA_FIN_VALIDITY IS NOT NULL 
					AND @FECHA_INICIO_VALIDITY >= @FECHA_FIN_VALIDITY
				BEGIN
					SET @Type = 'Error'
					SET @Message = 'La fecha de inicio debe ser menor a la fecha de fin'
                
					SELECT 0 AS ID, @Message AS Message, @Type AS Type, 0 AS RowsAffected
					RETURN
				END
            
				-- VERIFICAR DUPLICADOS EXACTOS
				-- Validar que no exista una tarifa idéntica con los mismos valores
				DECLARE @DuplicateCount INT = 0

				SELECT @DuplicateCount = COUNT(*)
				FROM logistics.Tracking_TarifasFletesMaritimos 
				WHERE UPPER(LTRIM(RTRIM(POD))) = UPPER(LTRIM(RTRIM(@POD)))
					AND UPPER(LTRIM(RTRIM(POL))) = UPPER(LTRIM(RTRIM(@POL)))
					AND UPPER(LTRIM(RTRIM(FORWARDER))) = UPPER(LTRIM(RTRIM(@FORWARDER)))
					AND ISNULL(TIPO_CONTENEDOR, '40HQ') = ISNULL(@TIPO_CONTENEDOR, '40HQ')
					AND ACTIVO = 1
					-- Validación exacta de fechas (considerando NULLs)
					AND (
						(LAST_UPDATE IS NULL AND @LAST_UPDATE IS NULL) OR
						(CAST(LAST_UPDATE AS DATE) = CAST(@LAST_UPDATE AS DATE))
					)
					AND (
						(FECHA_INICIO_VALIDITY IS NULL AND @FECHA_INICIO_VALIDITY IS NULL) OR
						(CAST(FECHA_INICIO_VALIDITY AS DATE) = CAST(@FECHA_INICIO_VALIDITY AS DATE))
					)
					AND (
						(FECHA_FIN_VALIDITY IS NULL AND @FECHA_FIN_VALIDITY IS NULL) OR
						(CAST(FECHA_FIN_VALIDITY AS DATE) = CAST(@FECHA_FIN_VALIDITY AS DATE))
					)

				-- Si encontró duplicados exactos, rechazar
				IF @DuplicateCount > 0
				BEGIN
					DECLARE @DuplicateMessage NVARCHAR(500)
					SET @DuplicateMessage = 'DUPLICADO RECHAZADO: Ya existe una tarifa idéntica para ' + 
											ISNULL(@POL, 'N/A') + ' → ' + ISNULL(@POD, 'N/A') + 
											' (' + ISNULL(@FORWARDER, 'N/A') + ') ' +
											'con las mismas fechas de vigencia.'
	
					SET @Type = 'Error'
					SET @Message = @DuplicateMessage
    
					SELECT 0 AS ID, @Message AS Message, @Type AS Type, 0 AS RowsAffected
					RETURN
				END

				-- VALIDACIÓN ADICIONAL: Verificar solapamiento de fechas (opcional - solo warning)
				DECLARE @OverlapCount INT = 0

				SELECT @OverlapCount = COUNT(*)
				FROM logistics.Tracking_TarifasFletesMaritimos 
				WHERE UPPER(LTRIM(RTRIM(POD))) = UPPER(LTRIM(RTRIM(@POD)))
					AND UPPER(LTRIM(RTRIM(POL))) = UPPER(LTRIM(RTRIM(@POL)))
					AND UPPER(LTRIM(RTRIM(FORWARDER))) = UPPER(LTRIM(RTRIM(@FORWARDER)))
					AND ISNULL(TIPO_CONTENEDOR, '40HQ') = ISNULL(@TIPO_CONTENEDOR, '40HQ')
					AND ACTIVO = 1
					AND @FECHA_INICIO_VALIDITY IS NOT NULL 
					AND @FECHA_FIN_VALIDITY IS NOT NULL
					AND FECHA_INICIO_VALIDITY IS NOT NULL 
					AND FECHA_FIN_VALIDITY IS NOT NULL
					-- Verificar solapamiento de períodos
					AND (
						(@FECHA_INICIO_VALIDITY BETWEEN FECHA_INICIO_VALIDITY AND FECHA_FIN_VALIDITY) OR
						(@FECHA_FIN_VALIDITY BETWEEN FECHA_INICIO_VALIDITY AND FECHA_FIN_VALIDITY) OR
						(FECHA_INICIO_VALIDITY BETWEEN @FECHA_INICIO_VALIDITY AND @FECHA_FIN_VALIDITY) OR
						(FECHA_FIN_VALIDITY BETWEEN @FECHA_INICIO_VALIDITY AND @FECHA_FIN_VALIDITY)
					)

				-- Si hay solapamiento, dar warning pero permitir inserción
				IF @OverlapCount > 0
				BEGIN
					DECLARE @WarningMessage NVARCHAR(500)
					SET @WarningMessage = 'ADVERTENCIA: Existe una tarifa con fechas que se solapan para ' + 
										  ISNULL(@POL, 'N/A') + ' → ' + ISNULL(@POD, 'N/A') + 
										  ' (' + ISNULL(@FORWARDER, 'N/A') + '). Verificar vigencias.'
	
					SET @Type = 'Warning'
					SET @Message = @WarningMessage
				END
            
				-- INSERTAR NUEVO REGISTRO
				INSERT INTO logistics.Tracking_TarifasFletesMaritimos (
					POD, POL, FORWARDER,
					FECHA_INICIO_VALIDITY, FECHA_FIN_VALIDITY, LAST_UPDATE,
					COSCO, MAERSK, MSC, COSCO_SPOT, CMA, OOCL,
					TIPO_CONTENEDOR, MONEDA, ACTIVO,
					CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY,
					UPLOAD_BATCH_ID, UPLOAD_FILENAME, UPLOAD_DATE, OBSERVACIONES
				)
				VALUES (
					UPPER(LTRIM(RTRIM(@POD))), 
					UPPER(LTRIM(RTRIM(@POL))), 
					UPPER(LTRIM(RTRIM(@FORWARDER))),
					@FECHA_INICIO_VALIDITY, 
					@FECHA_FIN_VALIDITY, 
					ISNULL(@LAST_UPDATE, GETDATE()),
					@COSCO, @MAERSK, @MSC, @COSCO_SPOT, @CMA, @OOCL,
					ISNULL(@TIPO_CONTENEDOR, '40HQ'), 
					ISNULL(@MONEDA, 'USD'), 
					ISNULL(@ACTIVO, 1),
					GETDATE(), GETDATE(), 
					ISNULL(@CREATED_BY, 'SYSTEM'), 
					ISNULL(@UPDATED_BY, @CREATED_BY),
					-- ✅ CORRECCIÓN PARA UPLOAD_BATCH_ID
					CASE 
						WHEN @UPLOAD_BATCH_ID IS NULL OR @UPLOAD_BATCH_ID = '' 
						THEN NEWID()  -- Generar nuevo GUID si está vacío
						ELSE 
							CASE 
								WHEN TRY_CAST(@UPLOAD_BATCH_ID AS UNIQUEIDENTIFIER) IS NOT NULL
								THEN CAST(@UPLOAD_BATCH_ID AS UNIQUEIDENTIFIER)  -- Convertir si es válido
								ELSE NEWID()  -- Generar nuevo si no es válido
							END
					END,
					@UPLOAD_FILENAME, 
					ISNULL(@UPLOAD_DATE, GETDATE()), 
					@OBSERVACIONES
				)

            
				SET @NewID = SCOPE_IDENTITY()
				SET @RowsAffected = @@ROWCOUNT
            
				IF @Type != 'Warning'
					SET @Message = 'Tarifa marítima insertada correctamente'
            
				-- Devolver resultado del INSERT
				SELECT @NewID AS ID, @Message AS Message, @Type AS Type, @RowsAffected AS RowsAffected
			END
			IF @AccionTarifa = 'DELETE'
			BEGIN
			
				--DELETE FROM logistics.Tracking_TarifasFletesMaritimos WHERE Id=@IdTarifa
				UPDATE logistics.Tracking_TarifasFletesMaritimos SET ACTIVO=0 WHERE Id=@IdTarifa

				IF @Type != 'Warning'
					SET @Message = 'Tarifa marítima eliminada correctamente'

				SELECT @IdTarifa AS ID, @Message AS Message, @Type AS Type
			END
		END 
		IF @Tipo = 2
		BEGIN

			DECLARE @FECHA_INICIO DATETIME = NULL,
			@FECHA_FIN DATETIME = NULL,		
			@PageIndex INT = 0,
			@PageSize INT = 20,
			@SortField NVARCHAR(50) = NULL,
			@Offset INT,
			@SortOrder NVARCHAR(10) = NULL,
			@TotalRecords INT = 0
			SET @Offset = @PageIndex * @PageSize
			BEGIN TRY
				-- PREPARAR FILTROS DE FECHA POR DEFECTO
				IF @FECHA_INICIO IS NULL AND @FECHA_FIN IS NULL
				BEGIN
					SET @FECHA_FIN = GETDATE()
					SET @FECHA_INICIO = DATEADD(MONTH, -1, GETDATE())
				END
        
				-- CONTAR TOTAL DE REGISTROS QUE COINCIDEN CON LOS FILTROS
				SELECT @TotalRecords = COUNT(*)
				FROM logistics.Tracking_TarifasFletesMaritimos t
				LEFT JOIN hnt.Usuarios u ON t.CREATED_BY = u.UserID
				WHERE t.ACTIVO = 1
					AND (@POD IS NULL OR t.POD = @POD)
					AND (@POL IS NULL OR t.POL = @POL)
					AND (@FORWARDER IS NULL OR t.FORWARDER LIKE '%' + @FORWARDER + '%')
					AND (@FECHA_INICIO IS NULL OR t.FECHA_INICIO_VALIDITY >= @FECHA_INICIO)
					AND (@FECHA_FIN IS NULL OR t.FECHA_FIN_VALIDITY <= @FECHA_FIN)
					AND (@UPLOAD_BATCH_ID IS NULL OR t.UPLOAD_BATCH_ID = @UPLOAD_BATCH_ID)
        
				-- CONSULTA PRINCIPAL CON PAGINACIÓN
				SELECT 
					t.Id,
					t.POD,
					t.POL,
					t.FORWARDER,
					t.FECHA_INICIO_VALIDITY,
					t.FECHA_FIN_VALIDITY,
					t.LAST_UPDATE,
					t.COSCO,
					t.MAERSK,
					t.MSC,
					t.COSCO_SPOT,
					t.CMA,
					t.OOCL,
					t.TIPO_CONTENEDOR,
					t.MONEDA,
					t.ACTIVO,
					t.CREATED_AT,
					t.UPDATED_AT,
					t.CREATED_BY,
					t.UPDATED_BY,
					t.UPLOAD_BATCH_ID,
					t.UPLOAD_FILENAME,
					t.UPLOAD_DATE,
					t.OBSERVACIONES,
					-- ✅ AGREGAR INFORMACIÓN DEL USUARIO CREADOR
					u.Nombre AS CREATED_BY_NAME,
					ISNULL(u.Nombre, 'Usuario no encontrado') AS USUARIO_CREADOR,
					-- CAMPOS CALCULADOS
					CASE 
						WHEN GETDATE() BETWEEN ISNULL(t.FECHA_INICIO_VALIDITY, '1900-01-01') 
										 AND ISNULL(t.FECHA_FIN_VALIDITY, '2099-12-31') 
						THEN 'VIGENTE'
						WHEN GETDATE() < ISNULL(t.FECHA_INICIO_VALIDITY, '1900-01-01') THEN 'FUTURO'
						ELSE 'VENCIDO'
					END AS ESTADO_VIGENCIA,
					@TotalRecords AS TotalRecords,
					@PageIndex AS PageIndex,
					@PageSize AS PageSize
				FROM logistics.Tracking_TarifasFletesMaritimos t
				LEFT JOIN hnt.Usuarios u ON t.CREATED_BY = u.UserID
				WHERE t.ACTIVO = 1
					AND (@POD IS NULL OR t.POD = @POD)
					AND (@POL IS NULL OR t.POL = @POL)
					AND (@FORWARDER IS NULL OR t.FORWARDER LIKE '%' + @FORWARDER + '%')
					AND (@FECHA_INICIO IS NULL OR t.FECHA_INICIO_VALIDITY >= @FECHA_INICIO)
					AND (@FECHA_FIN IS NULL OR t.FECHA_FIN_VALIDITY <= @FECHA_FIN)
					AND (@UPLOAD_BATCH_ID IS NULL OR t.UPLOAD_BATCH_ID = @UPLOAD_BATCH_ID)
				ORDER BY 
					CASE 
						WHEN @SortField = 'POD' AND @SortOrder = 'ASC' THEN t.POD
						WHEN @SortField = 'POL' AND @SortOrder = 'ASC' THEN t.POL
						WHEN @SortField = 'FORWARDER' AND @SortOrder = 'ASC' THEN t.FORWARDER
						WHEN @SortField = 'USUARIO_CREADOR' AND @SortOrder = 'ASC' THEN u.Nombre
					END ASC,
					CASE 
						WHEN @SortField = 'POD' AND @SortOrder = 'DESC' THEN t.POD
						WHEN @SortField = 'POL' AND @SortOrder = 'DESC' THEN t.POL
						WHEN @SortField = 'FORWARDER' AND @SortOrder = 'DESC' THEN t.FORWARDER
						WHEN @SortField = 'USUARIO_CREADOR' AND @SortOrder = 'DESC' THEN u.Nombre
					END DESC,
					CASE 
						WHEN @SortField = 'CREATED_AT' AND @SortOrder = 'ASC' THEN t.CREATED_AT
						WHEN @SortField = 'FECHA_INICIO_VALIDITY' AND @SortOrder = 'ASC' THEN t.FECHA_INICIO_VALIDITY
					END ASC,
					CASE 
						WHEN @SortField = 'CREATED_AT' AND @SortOrder = 'DESC' THEN t.CREATED_AT
						WHEN @SortField = 'FECHA_INICIO_VALIDITY' AND @SortOrder = 'DESC' THEN t.FECHA_INICIO_VALIDITY
					END DESC,
					-- Orden por defecto
					t.CREATED_AT DESC, t.Id DESC
				OFFSET @Offset ROWS
				FETCH NEXT @PageSize ROWS ONLY
        
				-- SEGUNDA CONSULTA: RESUMEN DE CONTEOS (OPCIONAL)
				SELECT 
					@TotalRecords AS TotalRecords,
					COUNT(CASE WHEN GETDATE() BETWEEN ISNULL(t.FECHA_INICIO_VALIDITY, '1900-01-01') 
												AND ISNULL(t.FECHA_FIN_VALIDITY, '2099-12-31') THEN 1 END) AS VigentesCount,
					COUNT(CASE WHEN GETDATE() < ISNULL(t.FECHA_INICIO_VALIDITY, '1900-01-01') THEN 1 END) AS FuturosCount,
					COUNT(CASE WHEN GETDATE() > ISNULL(t.FECHA_FIN_VALIDITY, '2099-12-31') THEN 1 END) AS VencidosCount,
					COUNT(DISTINCT t.FORWARDER) AS ForwardersCount,
					COUNT(DISTINCT t.POD) AS PODsCount,
					COUNT(DISTINCT t.POL) AS POLsCount,
					COUNT(DISTINCT u.Nombre) AS UsuariosCreadores
				FROM logistics.Tracking_TarifasFletesMaritimos t
				LEFT JOIN hnt.Usuarios u ON t.CREATED_BY = u.UserID
				WHERE t.ACTIVO = 1
					AND (@POD IS NULL OR t.POD = @POD)
					AND (@POL IS NULL OR t.POL = @POL)
					AND (@FORWARDER IS NULL OR t.FORWARDER LIKE '%' + @FORWARDER + '%')
					AND (@FECHA_INICIO IS NULL OR t.FECHA_INICIO_VALIDITY >= @FECHA_INICIO)
					AND (@FECHA_FIN IS NULL OR t.FECHA_FIN_VALIDITY <= @FECHA_FIN)
					AND (@UPLOAD_BATCH_ID IS NULL OR t.UPLOAD_BATCH_ID = @UPLOAD_BATCH_ID)
        
			END TRY
			BEGIN CATCH
				-- RETORNAR ERROR EN CASO DE EXCEPCIÓN
				SELECT 
					'Error consultando tarifas: ' + ERROR_MESSAGE() AS ErrorMessage,
					ERROR_LINE() AS ErrorLine,
					ERROR_PROCEDURE() AS ErrorProcedure
			END CATCH
		END
		IF @Tipo = 3
		BEGIN	
			SELECT * FROM logistics.Tracking_POL WHERE Is_Active = 1;
		END
		IF @Tipo = 4
		BEGIN		
			SELECT * FROM logistics.Tracking_POD;
		END
		IF @Tipo = 5
		BEGIN		
			SELECT * FROM logistics.Tracking_Forwarders;
		END
		IF @Tipo = 6
		BEGIN
			WITH ObservacionesConteos AS (
				SELECT 
					o.Fila_ID,
					o.Naviera,
					COUNT(*) AS Count
				FROM logistics.Tracking_Observaciones o 
				WHERE o.Is_Active = 1
				GROUP BY o.Fila_ID, o.Naviera
			),
			TarifasVigentes AS (
				SELECT 
					t.Id,
					t.POD,
					t.POL,
					t.FORWARDER,
					t.FECHA_INICIO_VALIDITY,
					t.FECHA_FIN_VALIDITY,
					t.LAST_UPDATE,
					-- Convertir fechas a formato ISO para JavaScript (manejo de NULLs)
					CASE 
						WHEN t.FECHA_INICIO_VALIDITY IS NOT NULL 
						THEN CONVERT(VARCHAR(10), t.FECHA_INICIO_VALIDITY, 120) 
						ELSE NULL 
					END AS FECHA_INICIO_ISO,
					CASE 
						WHEN t.FECHA_FIN_VALIDITY IS NOT NULL 
						THEN CONVERT(VARCHAR(10), t.FECHA_FIN_VALIDITY, 120) 
						ELSE NULL 
					END AS FECHA_FIN_ISO,
					CASE 
						WHEN t.LAST_UPDATE IS NOT NULL 
						THEN CONVERT(VARCHAR(10), t.LAST_UPDATE, 120) 
						ELSE NULL 
					END AS LAST_UPDATE_ISO,
					-- Crear el texto VALIDITY directamente en SQL
					CASE 
						WHEN t.FECHA_INICIO_VALIDITY IS NULL OR t.FECHA_FIN_VALIDITY IS NULL THEN 'Sin fechas'
						WHEN YEAR(t.FECHA_INICIO_VALIDITY) = YEAR(t.FECHA_FIN_VALIDITY) 
								AND MONTH(t.FECHA_INICIO_VALIDITY) = MONTH(t.FECHA_FIN_VALIDITY) THEN
							'DEL ' + CAST(DAY(t.FECHA_INICIO_VALIDITY) AS VARCHAR(2)) + 
							' AL ' + CAST(DAY(t.FECHA_FIN_VALIDITY) AS VARCHAR(2)) + ' ' +
							CASE MONTH(t.FECHA_INICIO_VALIDITY)
								WHEN 1 THEN 'ENE' WHEN 2 THEN 'FEB' WHEN 3 THEN 'MAR'
								WHEN 4 THEN 'ABR' WHEN 5 THEN 'MAY' WHEN 6 THEN 'JUN'
								WHEN 7 THEN 'JUL' WHEN 8 THEN 'AGO' WHEN 9 THEN 'SEP'
								WHEN 10 THEN 'OCT' WHEN 11 THEN 'NOV' WHEN 12 THEN 'DIC'
							END
						WHEN YEAR(t.FECHA_INICIO_VALIDITY) = YEAR(t.FECHA_FIN_VALIDITY) THEN
							'DEL ' + CAST(DAY(t.FECHA_INICIO_VALIDITY) AS VARCHAR(2)) + ' ' +
							CASE MONTH(t.FECHA_INICIO_VALIDITY)
								WHEN 1 THEN 'ENE' WHEN 2 THEN 'FEB' WHEN 3 THEN 'MAR'
								WHEN 4 THEN 'ABR' WHEN 5 THEN 'MAY' WHEN 6 THEN 'JUN'
								WHEN 7 THEN 'JUL' WHEN 8 THEN 'AGO' WHEN 9 THEN 'SEP'
								WHEN 10 THEN 'OCT' WHEN 11 THEN 'NOV' WHEN 12 THEN 'DIC'
							END + 
							' AL ' + CAST(DAY(t.FECHA_FIN_VALIDITY) AS VARCHAR(2)) + ' ' +
							CASE MONTH(t.FECHA_FIN_VALIDITY)
								WHEN 1 THEN 'ENE' WHEN 2 THEN 'FEB' WHEN 3 THEN 'MAR'
								WHEN 4 THEN 'ABR' WHEN 5 THEN 'MAY' WHEN 6 THEN 'JUN'
								WHEN 7 THEN 'JUL' WHEN 8 THEN 'AGO' WHEN 9 THEN 'SEP'
								WHEN 10 THEN 'OCT' WHEN 11 THEN 'NOV' WHEN 12 THEN 'DIC'
							END
						ELSE
							'DEL ' + CAST(DAY(t.FECHA_INICIO_VALIDITY) AS VARCHAR(2)) + ' ' +
							CASE MONTH(t.FECHA_INICIO_VALIDITY)
								WHEN 1 THEN 'ENE' WHEN 2 THEN 'FEB' WHEN 3 THEN 'MAR'
								WHEN 4 THEN 'ABR' WHEN 5 THEN 'MAY' WHEN 6 THEN 'JUN'
								WHEN 7 THEN 'JUL' WHEN 8 THEN 'AGO' WHEN 9 THEN 'SEP'
								WHEN 10 THEN 'OCT' WHEN 11 THEN 'NOV' WHEN 12 THEN 'DIC'
							END + ' ' + CAST(YEAR(t.FECHA_INICIO_VALIDITY) AS VARCHAR(4)) +
							' AL ' + CAST(DAY(t.FECHA_FIN_VALIDITY) AS VARCHAR(2)) + ' ' +
							CASE MONTH(t.FECHA_FIN_VALIDITY)
								WHEN 1 THEN 'ENE' WHEN 2 THEN 'FEB' WHEN 3 THEN 'MAR'
								WHEN 4 THEN 'ABR' WHEN 5 THEN 'MAY' WHEN 6 THEN 'JUN'
								WHEN 7 THEN 'JUL' WHEN 8 THEN 'AGO' WHEN 9 THEN 'SEP'
								WHEN 10 THEN 'OCT' WHEN 11 THEN 'NOV' WHEN 12 THEN 'DIC'
							END + ' ' + CAST(YEAR(t.FECHA_FIN_VALIDITY) AS VARCHAR(4))
					END AS VALIDITY_TEXT,
					t.COSCO,
					t.MAERSK,
					t.MSC,
					t.COSCO_SPOT,
					t.CMA,
					t.OOCL,
					t.TIPO_CONTENEDOR,
					t.MONEDA,
					t.CREATED_BY,
					t.UPLOAD_FILENAME,
					DATEDIFF(DAY, @FECHA_CONSULTA, t.FECHA_FIN_VALIDITY) AS DIAS_VIGENCIA_RESTANTE,
					-- ✅ AGREGAR INFORMACIÓN DEL USUARIO CREADOR
					u.Nombre AS CREATED_BY_NAME,
					ISNULL(u.Nombre, 'Usuario no encontrado') AS USUARIO_CREADOR
				FROM logistics.Tracking_TarifasFletesMaritimos t
				-- ✅ AGREGAR LEFT JOIN CON USUARIOS
				LEFT JOIN hnt.Usuarios u ON t.CREATED_BY = u.UserID
				WHERE t.ACTIVO = 1
					AND (@POD IS NULL OR t.POD = @POD)
					AND (@POL IS NULL OR t.POL = @POL)
					AND (@FORWARDER IS NULL OR t.FORWARDER = @FORWARDER)
					AND @FECHA_CONSULTA BETWEEN ISNULL(t.FECHA_INICIO_VALIDITY, '1900-01-01') 
											AND ISNULL(t.FECHA_FIN_VALIDITY, '2099-12-31')
			),
			TarifasConMejor AS (
				SELECT 
					-- Campos base explícitos
					tv.Id,
					tv.POD,
					tv.POL,
					tv.FORWARDER,
					tv.FECHA_INICIO_VALIDITY,
					tv.FECHA_FIN_VALIDITY,
					tv.LAST_UPDATE,
					tv.FECHA_INICIO_ISO,
					tv.FECHA_FIN_ISO,
					tv.LAST_UPDATE_ISO,
					tv.VALIDITY_TEXT,
					tv.COSCO,
					tv.MAERSK,
					tv.MSC,
					tv.COSCO_SPOT,
					tv.CMA,
					tv.OOCL,
					tv.TIPO_CONTENEDOR,
					tv.MONEDA,
					tv.CREATED_BY,
					tv.UPLOAD_FILENAME,
					tv.DIAS_VIGENCIA_RESTANTE,
					-- ✅ PROPAGAR CAMPOS DEL USUARIO
					tv.CREATED_BY_NAME,
					tv.USUARIO_CREADOR,
					-- Campos calculados
					(SELECT MIN(tarifa) 
						FROM (VALUES 
						(CASE WHEN tv.COSCO > 0 THEN tv.COSCO END),
						(CASE WHEN tv.MAERSK > 0 THEN tv.MAERSK END),
						(CASE WHEN tv.MSC > 0 THEN tv.MSC END),
						(CASE WHEN tv.COSCO_SPOT > 0 THEN tv.COSCO_SPOT END),
						(CASE WHEN tv.CMA > 0 THEN tv.CMA END),
						(CASE WHEN tv.OOCL > 0 THEN tv.OOCL END)
						) AS TarifasDisponibles(tarifa)
						WHERE tarifa IS NOT NULL
					) AS MEJOR_TARIFA,
					CASE 
						WHEN tv.COSCO > 0 AND tv.COSCO = (SELECT MIN(tarifa) 
															FROM (VALUES 
															(CASE WHEN tv.COSCO > 0 THEN tv.COSCO END),
															(CASE WHEN tv.MAERSK > 0 THEN tv.MAERSK END),
															(CASE WHEN tv.MSC > 0 THEN tv.MSC END),
															(CASE WHEN tv.COSCO_SPOT > 0 THEN tv.COSCO_SPOT END),
															(CASE WHEN tv.CMA > 0 THEN tv.CMA END),
															(CASE WHEN tv.OOCL > 0 THEN tv.OOCL END)
															) AS TarifasDisponibles(tarifa)
															WHERE tarifa IS NOT NULL)
						THEN 'COSCO'
						WHEN tv.MAERSK > 0 AND tv.MAERSK = (SELECT MIN(tarifa) 
															FROM (VALUES 
															(CASE WHEN tv.COSCO > 0 THEN tv.COSCO END),
															(CASE WHEN tv.MAERSK > 0 THEN tv.MAERSK END),
															(CASE WHEN tv.MSC > 0 THEN tv.MSC END),
															(CASE WHEN tv.COSCO_SPOT > 0 THEN tv.COSCO_SPOT END),
															(CASE WHEN tv.CMA > 0 THEN tv.CMA END),
															(CASE WHEN tv.OOCL > 0 THEN tv.OOCL END)
															) AS TarifasDisponibles(tarifa)
															WHERE tarifa IS NOT NULL)
						THEN 'MAERSK'
						WHEN tv.MSC > 0 AND tv.MSC = (SELECT MIN(tarifa) 
														FROM (VALUES 
															(CASE WHEN tv.COSCO > 0 THEN tv.COSCO END),
															(CASE WHEN tv.MAERSK > 0 THEN tv.MAERSK END),
															(CASE WHEN tv.MSC > 0 THEN tv.MSC END),
															(CASE WHEN tv.COSCO_SPOT > 0 THEN tv.COSCO_SPOT END),
															(CASE WHEN tv.CMA > 0 THEN tv.CMA END),
															(CASE WHEN tv.OOCL > 0 THEN tv.OOCL END)
														) AS TarifasDisponibles(tarifa)
														WHERE tarifa IS NOT NULL)
						THEN 'MSC'
						WHEN tv.COSCO_SPOT > 0 AND tv.COSCO_SPOT = (SELECT MIN(tarifa) 
																	FROM (VALUES 
															(CASE WHEN tv.COSCO > 0 THEN tv.COSCO END),
															(CASE WHEN tv.MAERSK > 0 THEN tv.MAERSK END),
															(CASE WHEN tv.MSC > 0 THEN tv.MSC END),
															(CASE WHEN tv.COSCO_SPOT > 0 THEN tv.COSCO_SPOT END),
															(CASE WHEN tv.CMA > 0 THEN tv.CMA END),
															(CASE WHEN tv.OOCL > 0 THEN tv.OOCL END)
																	) AS TarifasDisponibles(tarifa)
																	WHERE tarifa IS NOT NULL)
						THEN 'COSCO_SPOT'
						WHEN tv.CMA > 0 AND tv.CMA = (SELECT MIN(tarifa) 
														FROM (VALUES 
															(CASE WHEN tv.COSCO > 0 THEN tv.COSCO END),
															(CASE WHEN tv.MAERSK > 0 THEN tv.MAERSK END),
															(CASE WHEN tv.MSC > 0 THEN tv.MSC END),
															(CASE WHEN tv.COSCO_SPOT > 0 THEN tv.COSCO_SPOT END),
															(CASE WHEN tv.CMA > 0 THEN tv.CMA END),
															(CASE WHEN tv.OOCL > 0 THEN tv.OOCL END)
														) AS TarifasDisponibles(tarifa)
														WHERE tarifa IS NOT NULL)
						THEN 'CMA'
						WHEN tv.OOCL > 0 AND tv.OOCL = (SELECT MIN(tarifa) 
														FROM (VALUES 
															(CASE WHEN tv.COSCO > 0 THEN tv.COSCO END),
															(CASE WHEN tv.MAERSK > 0 THEN tv.MAERSK END),
															(CASE WHEN tv.MSC > 0 THEN tv.MSC END),
															(CASE WHEN tv.COSCO_SPOT > 0 THEN tv.COSCO_SPOT END),
															(CASE WHEN tv.CMA > 0 THEN tv.CMA END),
															(CASE WHEN tv.OOCL > 0 THEN tv.OOCL END)
														) AS TarifasDisponibles(tarifa)
														WHERE tarifa IS NOT NULL)
						THEN 'OOCL'
						ELSE 'N/A'
					END AS MEJOR_NAVIERA,
					(SELECT AVG(tarifa) 
						FROM (VALUES 
						(CASE WHEN tv.COSCO > 0 THEN tv.COSCO END),
						(CASE WHEN tv.MAERSK > 0 THEN tv.MAERSK END),
						(CASE WHEN tv.MSC > 0 THEN tv.MSC END),
						(CASE WHEN tv.COSCO_SPOT > 0 THEN tv.COSCO_SPOT END),
						(CASE WHEN tv.CMA > 0 THEN tv.CMA END),
						(CASE WHEN tv.OOCL > 0 THEN tv.OOCL END)
						) AS TarifasDisponibles(tarifa)
						WHERE tarifa IS NOT NULL
					) AS PROMEDIO_TARIFAS
				FROM TarifasVigentes tv
				WHERE EXISTS (
					SELECT 1 FROM (VALUES 
						(tv.COSCO), (tv.MAERSK), (tv.MSC), 
						(tv.COSCO_SPOT), (tv.CMA), (tv.OOCL)
					) AS TarifasCheck(tarifa)
					WHERE tarifa > 0
				)
			)
			SELECT 
				-- ✅ INFORMACIÓN BASE Y DE CATÁLOGOS
				tcm.ID,
				ISNULL(cpol.Puerto_Origen, tcm.POL) AS POL,
				ISNULL(cpod.Puerto_Destino, tcm.POD) AS POD,
				ISNULL(cf.Forwarder, tcm.FORWARDER) AS FORWARDER,
				tcm.TIPO_CONTENEDOR,
				tcm.FECHA_INICIO_VALIDITY,
				tcm.FECHA_FIN_VALIDITY,
				tcm.LAST_UPDATE,  
				tcm.LAST_UPDATE_ISO,
				tcm.VALIDITY_TEXT,
				tcm.COSCO,
				tcm.MAERSK,
				tcm.MSC,
				tcm.COSCO_SPOT,
				tcm.CMA,
				tcm.OOCL,    
				tcm.FECHA_INICIO_ISO,
				tcm.FECHA_FIN_ISO,
	
				-- ✅ INFORMACIÓN DEL USUARIO
				tcm.CREATED_BY,
				tcm.CREATED_BY_NAME,
				tcm.USUARIO_CREADOR,
	
				-- ✅ CAMPOS CALCULADOS DE MEJOR TARIFA
				tcm.MEJOR_TARIFA,
				tcm.MEJOR_NAVIERA,
				tcm.PROMEDIO_TARIFAS,
				tcm.DIAS_VIGENCIA_RESTANTE,
	
				-- Calcular AHORRO_VS_PROMEDIO
				CASE 
					WHEN tcm.PROMEDIO_TARIFAS > 0 AND tcm.MEJOR_TARIFA > 0 
					THEN tcm.PROMEDIO_TARIFAS - tcm.MEJOR_TARIFA 
					ELSE 0 
				END AS AHORRO_VS_PROMEDIO,
    
				-- Calcular PORCENTAJE_AHORRO
				CASE 
					WHEN tcm.PROMEDIO_TARIFAS > 0 AND tcm.MEJOR_TARIFA > 0 
					THEN ROUND((tcm.PROMEDIO_TARIFAS - tcm.MEJOR_TARIFA) * 100.0 / tcm.PROMEDIO_TARIFAS, 2) 
					ELSE 0 
				END AS PORCENTAJE_AHORRO,
	
				-- ✅ CONTEOS DE OBSERVACIONES POR NAVIERA
				ISNULL(obs_cosco.Count, 0) AS COSCO_OBS_COUNT,
				ISNULL(obs_maersk.Count, 0) AS MAERSK_OBS_COUNT,
				ISNULL(obs_msc.Count, 0) AS MSC_OBS_COUNT,
				ISNULL(obs_cosco_spot.Count, 0) AS COSCO_SPOT_OBS_COUNT,
				ISNULL(obs_cma.Count, 0) AS CMA_OBS_COUNT,
				ISNULL(obs_oocl.Count, 0) AS OOCL_OBS_COUNT,
	
				-- ✅ TOTAL DE OBSERVACIONES POR FILA
				(ISNULL(obs_cosco.Count, 0) + ISNULL(obs_maersk.Count, 0) + 
				 ISNULL(obs_msc.Count, 0) + ISNULL(obs_cosco_spot.Count, 0) + 
				 ISNULL(obs_cma.Count, 0) + ISNULL(obs_oocl.Count, 0)) AS TOTAL_OBS_COUNT
	 
			FROM TarifasConMejor tcm
				-- ✅ LEFT JOINs EXISTENTES CON CATÁLOGOS
				LEFT JOIN logistics.Tracking_POL cpol 
					ON tcm.POL = cpol.ID_POL
				LEFT JOIN logistics.Tracking_POD cpod 
					ON tcm.POD = cpod.ID_POD  
				LEFT JOIN logistics.Tracking_Forwarders cf 
					ON tcm.FORWARDER = cf.ID_FORWARDER
		
				-- ✅ NUEVOS LEFT JOINs PARA CONTEOS DE OBSERVACIONES POR NAVIERA
				LEFT JOIN ObservacionesConteos obs_cosco 
					ON tcm.ID = obs_cosco.Fila_ID AND obs_cosco.Naviera = 'COSCO'
				LEFT JOIN ObservacionesConteos obs_maersk 
					ON tcm.ID = obs_maersk.Fila_ID AND obs_maersk.Naviera = 'MAERSK'
				LEFT JOIN ObservacionesConteos obs_msc 
					ON tcm.ID = obs_msc.Fila_ID AND obs_msc.Naviera = 'MSC'
				LEFT JOIN ObservacionesConteos obs_cosco_spot 
					ON tcm.ID = obs_cosco_spot.Fila_ID AND obs_cosco_spot.Naviera = 'COSCO_SPOT'
				LEFT JOIN ObservacionesConteos obs_cma 
					ON tcm.ID = obs_cma.Fila_ID AND obs_cma.Naviera = 'CMA'
				LEFT JOIN ObservacionesConteos obs_oocl 
					ON tcm.ID = obs_oocl.Fila_ID AND obs_oocl.Naviera = 'OOCL'

			ORDER BY 
				ISNULL(cpod.Puerto_Destino, tcm.POD), 
				ISNULL(cpol.Puerto_Origen, tcm.POL), 
				ISNULL(cf.Forwarder, tcm.FORWARDER), 
				tcm.MEJOR_TARIFA
		END
		IF @Tipo = 7 -- PUERTOS ORIGEN (POL)
		BEGIN
			-- Variables de respuesta
			DECLARE @MessagePOL NVARCHAR(500) = ''
			DECLARE @TypePOL NVARCHAR(20) = 'Success'
			DECLARE @NewIDPOL INT = 0
			DECLARE @RowsAffectedPOL INT = 0

			IF @AccionCatalogo = 'INSERT'
			BEGIN
				-- Validaciones básicas
				IF @Codigo IS NULL OR LTRIM(RTRIM(@Codigo)) = ''
				BEGIN
					SET @TypePOL = 'Error'
					SET @MessagePOL = 'Código es requerido'
					SELECT 0 AS ID, @MessagePOL AS Message, @TypePOL AS Type, 0 AS RowsAffected
					RETURN
				END

				IF @Descripcion IS NULL OR LTRIM(RTRIM(@Descripcion)) = ''
				BEGIN
					SET @TypePOL = 'Error'
					SET @MessagePOL = 'Descripción es requerida'
					SELECT 0 AS ID, @MessagePOL AS Message, @TypePOL AS Type, 0 AS RowsAffected
					RETURN
				END

				-- Limpiar datos
				SET @Codigo = UPPER(LTRIM(RTRIM(@Codigo)))
				SET @Descripcion = LTRIM(RTRIM(@Descripcion))

				-- Verificar duplicado
				IF EXISTS (SELECT 1 FROM logistics.Tracking_POL WHERE ID_POL = @Codigo)
				BEGIN
					SET @TypePOL = 'Error'
					SET @MessagePOL = 'Ya existe un puerto origen con el código: ' + @Codigo
					SELECT 0 AS ID, @MessagePOL AS Message, @TypePOL AS Type, 0 AS RowsAffected
					RETURN
				END

				-- Insertar nuevo POL
				INSERT INTO logistics.Tracking_POL (Puerto_Origen, ID_POL, Created_Date, Created_By, Is_Active)
				VALUES (@Descripcion, @Codigo, GETDATE(), @CREATED_BY, 1)

				SET @NewIDPOL = SCOPE_IDENTITY()
				SET @RowsAffectedPOL = @@ROWCOUNT
				SET @MessagePOL = 'Puerto origen agregado correctamente: ' + @Codigo + ' - ' + @Descripcion

				SELECT @NewIDPOL AS ID, @MessagePOL AS Message, @TypePOL AS Type, @RowsAffectedPOL AS RowsAffected
			END
			ELSE IF @AccionCatalogo = 'SELECT'
			BEGIN
				-- Consultar POL (para mantener compatibilidad con tu función existente)
				SELECT 
					IdPol AS ID,
					Puerto_Origen,
					ID_POL,
					Created_Date,
					Created_By,
					Is_Active
				FROM logistics.Tracking_POL 
				WHERE ISNULL(Is_Active, 1) = 1 
				ORDER BY Puerto_Origen
			END
		END
		IF @Tipo = 8 -- PUERTOS DESTINO (POD)
		BEGIN
			-- Variables de respuesta
			DECLARE @MessagePOD NVARCHAR(500) = ''
			DECLARE @TypePOD NVARCHAR(20) = 'Success'
			DECLARE @NewIDPOD INT = 0
			DECLARE @RowsAffectedPOD INT = 0

			IF @AccionCatalogo = 'INSERT'
			BEGIN
				-- Validaciones básicas
				IF @Codigo IS NULL OR LTRIM(RTRIM(@Codigo)) = ''
				BEGIN
					SET @TypePOD = 'Error'
					SET @MessagePOD = 'Código es requerido'
					SELECT 0 AS ID, @MessagePOD AS Message, @TypePOD AS Type, 0 AS RowsAffected
					RETURN
				END

				IF @Descripcion IS NULL OR LTRIM(RTRIM(@Descripcion)) = ''
				BEGIN
					SET @TypePOD = 'Error'
					SET @MessagePOD = 'Descripción es requerida'
					SELECT 0 AS ID, @MessagePOD AS Message, @TypePOD AS Type, 0 AS RowsAffected
					RETURN
				END

				-- Limpiar datos
				SET @Codigo = UPPER(LTRIM(RTRIM(@Codigo)))
				SET @Descripcion = LTRIM(RTRIM(@Descripcion))

				-- Verificar duplicado
				IF EXISTS (SELECT 1 FROM logistics.Tracking_POD WHERE ID_POD = @Codigo)
				BEGIN
					SET @TypePOD = 'Error'
					SET @MessagePOD = 'Ya existe un puerto destino con el código: ' + @Codigo
					SELECT 0 AS ID, @MessagePOD AS Message, @TypePOD AS Type, 0 AS RowsAffected
					RETURN
				END

				-- Insertar nuevo POD
				INSERT INTO logistics.Tracking_POD (Puerto_Destino, ID_POD, Created_Date, Created_By, Is_Active)
				VALUES (@Descripcion, @Codigo, GETDATE(), @CREATED_BY, 1)

				SET @NewIDPOD = SCOPE_IDENTITY()
				SET @RowsAffectedPOD = @@ROWCOUNT
				SET @MessagePOD = 'Puerto destino agregado correctamente: ' + @Codigo + ' - ' + @Descripcion

				SELECT @NewIDPOD AS ID, @MessagePOD AS Message, @TypePOD AS Type, @RowsAffectedPOD AS RowsAffected
			END
			ELSE IF @AccionCatalogo = 'SELECT'
			BEGIN
				-- Consultar POD
				SELECT 
					IdPod AS ID,
					Puerto_Destino,
					ID_POD,
					Created_Date,
					Created_By,
					Is_Active
				FROM logistics.Tracking_POD 
				WHERE ISNULL(Is_Active, 1) = 1 
				ORDER BY Puerto_Destino
			END
		END
		IF @Tipo = 9 -- FORWARDERS
		BEGIN
			-- Variables de respuesta
			DECLARE @MessageFWD NVARCHAR(500) = ''
			DECLARE @TypeFWD NVARCHAR(20) = 'Success'
			DECLARE @NewIDFWD INT = 0
			DECLARE @RowsAffectedFWD INT = 0

			IF @AccionCatalogo = 'INSERT'
			BEGIN
				-- Validaciones básicas
				IF @Codigo IS NULL OR LTRIM(RTRIM(@Codigo)) = ''
				BEGIN
					SET @TypeFWD = 'Error'
					SET @MessageFWD = 'Código es requerido'
					SELECT 0 AS ID, @MessageFWD AS Message, @TypeFWD AS Type, 0 AS RowsAffected
					RETURN
				END

				IF @Descripcion IS NULL OR LTRIM(RTRIM(@Descripcion)) = ''
				BEGIN
					SET @TypeFWD = 'Error'
					SET @MessageFWD = 'Descripción es requerida'
					SELECT 0 AS ID, @MessageFWD AS Message, @TypeFWD AS Type, 0 AS RowsAffected
					RETURN
				END

				-- Limpiar datos
				SET @Codigo = UPPER(LTRIM(RTRIM(@Codigo)))
				SET @Descripcion = LTRIM(RTRIM(@Descripcion))

				-- Verificar duplicado
				IF EXISTS (SELECT 1 FROM logistics.Tracking_Forwarders WHERE ID_FORWARDER = @Codigo)
				BEGIN
					SET @TypeFWD = 'Error'
					SET @MessageFWD = 'Ya existe un forwarder con el código: ' + @Codigo
					SELECT 0 AS ID, @MessageFWD AS Message, @TypeFWD AS Type, 0 AS RowsAffected
					RETURN
				END

				-- Insertar nuevo FORWARDER
				INSERT INTO logistics.Tracking_Forwarders (Forwarder, ID_FORWARDER, Created_Date, Created_By, Is_Active)
				VALUES (@Descripcion, @Codigo, GETDATE(), @CREATED_BY, 1)

				SET @NewIDFWD = SCOPE_IDENTITY()
				SET @RowsAffectedFWD = @@ROWCOUNT
				SET @MessageFWD = 'Forwarder agregado correctamente: ' + @Codigo + ' - ' + @Descripcion

				SELECT @NewIDFWD AS ID, @MessageFWD AS Message, @TypeFWD AS Type, @RowsAffectedFWD AS RowsAffected
			END
			ELSE IF @AccionCatalogo = 'SELECT'
			BEGIN
				-- Consultar FORWARDERS
				SELECT 
					IdForwarder AS ID,
					Forwarder,
					ID_FORWARDER,
					Created_Date,
					Created_By,
					Is_Active
				FROM logistics.Tracking_Forwarders 
				WHERE ISNULL(Is_Active, 1) = 1 
				ORDER BY Forwarder
			END
		END
		IF @Tipo = 10 -- OBSERVACIONES (NUEVA VERSIÓN CON ID + NAVIERA)
		BEGIN
			-- Variables de respuesta
			DECLARE @MessageOBS NVARCHAR(500) = ''
			DECLARE @TypeOBS NVARCHAR(20) = 'Success'
			DECLARE @NewIDOBS INT = 0
			DECLARE @RowsAffectedOBS INT = 0
    
			-- Nuevos parámetros simplificados
			DECLARE @FilaID INT = 0
			DECLARE @Naviera NVARCHAR(100) = ''
			DECLARE @Contenido NVARCHAR(MAX) = ''		
			DECLARE @ObservacionId INT = 0
    
			IF @AccionCatalogo = 'INSERT'
			BEGIN
				-- Extraer parámetros del campo @Descripcion
				-- Formato simplificado: "FILA_ID|NAVIERA|CONTENIDO|USUARIO"
				DECLARE @Delimiter CHAR(1) = '|'
				DECLARE @Pos INT = 1
				DECLARE @Part NVARCHAR(MAX) = ''
				DECLARE @Counter INT = 1
				DECLARE @TempDesc NVARCHAR(MAX) = @Descripcion + @Delimiter
        
				WHILE @Pos <= LEN(@TempDesc)
				BEGIN
					IF SUBSTRING(@TempDesc, @Pos, 1) = @Delimiter
					BEGIN
						SET @Part = SUBSTRING(@TempDesc, 1, @Pos - 1)
                
						IF @Counter = 1 SET @FilaID = CAST(@Part AS INT)
						ELSE IF @Counter = 2 SET @Naviera = @Part
						ELSE IF @Counter = 3 SET @Contenido = @Part
						ELSE IF @Counter = 4 SET @Usuario = @Part
                
						SET @TempDesc = SUBSTRING(@TempDesc, @Pos + 1, LEN(@TempDesc))
						SET @Pos = 1
						SET @Counter = @Counter + 1
					END
					ELSE
						SET @Pos = @Pos + 1
				END
        
				-- Validaciones básicas
				IF @FilaID <= 0
				BEGIN
					SET @TypeOBS = 'Error'
					SET @MessageOBS = 'ID de fila es requerido y debe ser mayor a 0'
					SELECT 0 AS ID, @MessageOBS AS Message, @TypeOBS AS Type, 0 AS RowsAffected
					RETURN
				END
        
				IF @Naviera IS NULL OR LTRIM(RTRIM(@Naviera)) = ''
				BEGIN
					SET @TypeOBS = 'Error'
					SET @MessageOBS = 'Naviera es requerida'
					SELECT 0 AS ID, @MessageOBS AS Message, @TypeOBS AS Type, 0 AS RowsAffected
					RETURN
				END
        
				IF @Contenido IS NULL OR LTRIM(RTRIM(@Contenido)) = ''
				BEGIN
					SET @TypeOBS = 'Error'
					SET @MessageOBS = 'Contenido es requerido'
					SELECT 0 AS ID, @MessageOBS AS Message, @TypeOBS AS Type, 0 AS RowsAffected
					RETURN
				END
        
				-- Limpiar datos
				SET @Naviera = LTRIM(RTRIM(@Naviera))
				SET @Contenido = LTRIM(RTRIM(@Contenido))
				SET @Usuario = LTRIM(RTRIM(@Usuario))
        
				-- La ObservacionKey ahora es simplemente el FilaID
				DECLARE @ObservacionKey NVARCHAR(50) = CAST(@FilaID AS NVARCHAR(50))
        
				-- Insertar nueva observación
				INSERT INTO logistics.Tracking_Observaciones (
					Fila_ID, Naviera, Observacion_Key,
					Contenido, Usuario, Created_By, Is_Active
				)
				VALUES (
					@FilaID, @Naviera, @ObservacionKey,
					@Contenido, @Usuario, @CREATED_BY, 1
				)
        
				SET @NewIDOBS = SCOPE_IDENTITY()
				SET @RowsAffectedOBS = @@ROWCOUNT
				SET @MessageOBS = 'Observación agregada correctamente para fila ' + CAST(@FilaID AS NVARCHAR(10)) + ' - ' + @Naviera
        
				SELECT @NewIDOBS AS ID, @MessageOBS AS Message, @TypeOBS AS Type, @RowsAffectedOBS AS RowsAffected
			END
    
			ELSE IF @AccionCatalogo = 'SELECT'
			BEGIN
				-- Para SELECT: @Codigo contiene "FilaID|Naviera"
				DECLARE @SearchParams NVARCHAR(500) = @Codigo
				DECLARE @SearchFilaID INT = 0
				DECLARE @SearchNaviera NVARCHAR(100) = ''
        
				-- Extraer FilaID y Naviera del parámetro Codigo
				IF CHARINDEX('|', @SearchParams) > 0
				BEGIN
					SET @SearchFilaID = CAST(SUBSTRING(@SearchParams, 1, CHARINDEX('|', @SearchParams) - 1) AS INT)
					SET @SearchNaviera = SUBSTRING(@SearchParams, CHARINDEX('|', @SearchParams) + 1, LEN(@SearchParams))
				END
				ELSE
				BEGIN
					-- Solo se proporcionó FilaID, buscar todas las navieras de esa fila
					SET @SearchFilaID = CAST(@SearchParams AS INT)
					SET @SearchNaviera = ''
				END
        
				-- Consultar observaciones
				IF @SearchNaviera != ''
				BEGIN
					-- Buscar por FilaID + Naviera específica
					SELECT 
						A.Id_Observacion AS ID,
						A.Fila_ID,
						A.Naviera,
						A.Observacion_Key,
						A.Contenido,
						A.Usuario,
						A.Fecha_Creacion,
						A.Fecha_Modificacion,
						A.Is_Active,
						REPLACE(MAX(C.FotoPerfil), 'data:image/png;base64,', '') AS img_user,
						B.Nombre
					FROM logistics.Tracking_Observaciones A
					INNER JOIN hnt.Usuarios B ON A.Usuario = B.UserID
					LEFT JOIN [HNT-Files].dbo.Foto_Usuario C ON B.RH_NumEmpleado = C.NumEmpleado COLLATE SQL_Latin1_General_CP1_CI_AS
					WHERE A.Fila_ID = @SearchFilaID 
						AND A.Naviera = @SearchNaviera
						AND ISNULL(A.Is_Active, 1) = 1 
					GROUP BY 
						A.Id_Observacion,
						A.Fila_ID,
						A.Naviera,
						A.Observacion_Key,
						A.Contenido,
						A.Usuario,
						A.Fecha_Creacion,
						A.Fecha_Modificacion,
						A.Is_Active,
						B.Nombre
					ORDER BY A.Fecha_Creacion ASC
				END
				ELSE
				BEGIN
					-- Buscar todas las observaciones de la fila (todas las navieras)
					SELECT 
						Id_Observacion AS ID,
						Fila_ID,
						Naviera,
						Observacion_Key,
						Contenido,
						Usuario,
						Fecha_Creacion,
						Fecha_Modificacion,
						Is_Active
					FROM logistics.Tracking_Observaciones 
					WHERE Fila_ID = @SearchFilaID
					AND ISNULL(Is_Active, 1) = 1 
					ORDER BY Naviera, Fecha_Creacion ASC
				END
			END
    
			ELSE IF @AccionCatalogo = 'DELETE'
			BEGIN
				-- Eliminar observación por ID
				SET @ObservacionId = CAST(@Codigo AS INT)
        
				-- Obtener información antes de eliminar (para el mensaje)
				DECLARE @DeletedFilaID INT, @DeletedNaviera NVARCHAR(100)
				SELECT @DeletedFilaID = Fila_ID, @DeletedNaviera = Naviera
				FROM logistics.Tracking_Observaciones 
				WHERE Id_Observacion = @ObservacionId AND Is_Active = 1
        
				IF @DeletedFilaID IS NULL
				BEGIN
					SET @TypeOBS = 'Error'
					SET @MessageOBS = 'No se encontró la observación a eliminar'
					SELECT 0 AS ID, @MessageOBS AS Message, @TypeOBS AS Type, 0 AS RowsAffected
					RETURN
				END
        
				-- Eliminar (marcar como inactiva)
				UPDATE logistics.Tracking_Observaciones 
				SET Is_Active = 0, Updated_By = @UPDATED_BY, Fecha_Modificacion = GETDATE()
				WHERE Id_Observacion = @ObservacionId
        
				SET @RowsAffectedOBS = @@ROWCOUNT
				SET @MessageOBS = 'Observación eliminada correctamente (Fila: ' + CAST(@DeletedFilaID AS NVARCHAR(10)) + ', Naviera: ' + @DeletedNaviera + ')'
        
				SELECT @ObservacionId AS ID, @MessageOBS AS Message, @TypeOBS AS Type, @RowsAffectedOBS AS RowsAffected
			END
    
			ELSE IF @AccionCatalogo = 'COUNT'
			BEGIN
				-- Nueva operación: Contar observaciones por FilaID + Naviera
				DECLARE @CountParams NVARCHAR(500) = @Codigo
				DECLARE @CountFilaID INT = 0
				DECLARE @CountNaviera NVARCHAR(100) = ''
        
				-- Extraer parámetros
				IF CHARINDEX('|', @CountParams) > 0
				BEGIN
					SET @CountFilaID = CAST(SUBSTRING(@CountParams, 1, CHARINDEX('|', @CountParams) - 1) AS INT)
					SET @CountNaviera = SUBSTRING(@CountParams, CHARINDEX('|', @CountParams) + 1, LEN(@CountParams))
				END
        
				DECLARE @ObsCount INT = 0
				SELECT @ObsCount = COUNT(*)
				FROM logistics.Tracking_Observaciones 
				WHERE Fila_ID = @CountFilaID 
				AND Naviera = @CountNaviera
				AND ISNULL(Is_Active, 1) = 1
        
				SET @MessageOBS = 'Conteo realizado correctamente'
				SELECT @ObsCount AS ID, @MessageOBS AS Message, @TypeOBS AS Type, 1 AS RowsAffected
			END
		END
		IF @Tipo = 11
		BEGIN
			IF @_Rol IN (1) AND @Usuario IN (2565)
			BEGIN
				SELECT 1 Lectura, 1 Escritura
			END
			IF @_Rol IN (33, 43) AND @Usuario IN (7297,6094)
			BEGIN
				SELECT 1 Lectura, 1 Escritura
			END
			IF @_Rol IN (33)
			BEGIN
				SELECT 1 Lectura, 0 Escritura
			END
		END
	END
END
	











